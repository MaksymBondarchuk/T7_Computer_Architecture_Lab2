GAS LISTING /tmp/ccEjei2f.s 			page 1


   1              		.file	"main.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   7              	_ZStL19piecewise_construct:
   8 0000 00       		.zero	1
   9              		.local	_ZStL8__ioinit
  10              		.comm	_ZStL8__ioinit,1,1
  11              		.section	.text._ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_,"axG",@progbits,_ZNS
  12              		.align 2
  13              		.weak	_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_
  15              	_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_:
  16              	.LFB1941:
  17              		.file 1 "/usr/include/c++/5/chrono"
   1:/usr/include/c++/5/chrono **** // <chrono> -*- C++ -*-
   2:/usr/include/c++/5/chrono **** 
   3:/usr/include/c++/5/chrono **** // Copyright (C) 2008-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/chrono **** //
   5:/usr/include/c++/5/chrono **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/chrono **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/chrono **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/chrono **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/chrono **** // any later version.
  10:/usr/include/c++/5/chrono **** 
  11:/usr/include/c++/5/chrono **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/chrono **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/chrono **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/chrono **** // GNU General Public License for more details.
  15:/usr/include/c++/5/chrono **** 
  16:/usr/include/c++/5/chrono **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/chrono **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/chrono **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/chrono **** 
  20:/usr/include/c++/5/chrono **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/chrono **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/chrono **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/chrono **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/chrono **** 
  25:/usr/include/c++/5/chrono **** /** @file include/chrono
  26:/usr/include/c++/5/chrono ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/5/chrono ****  */
  28:/usr/include/c++/5/chrono **** 
  29:/usr/include/c++/5/chrono **** #ifndef _GLIBCXX_CHRONO
  30:/usr/include/c++/5/chrono **** #define _GLIBCXX_CHRONO 1
  31:/usr/include/c++/5/chrono **** 
  32:/usr/include/c++/5/chrono **** #pragma GCC system_header
  33:/usr/include/c++/5/chrono **** 
  34:/usr/include/c++/5/chrono **** #if __cplusplus < 201103L
  35:/usr/include/c++/5/chrono **** # include <bits/c++0x_warning.h>
  36:/usr/include/c++/5/chrono **** #else
  37:/usr/include/c++/5/chrono **** 
  38:/usr/include/c++/5/chrono **** #include <ratio>
  39:/usr/include/c++/5/chrono **** #include <type_traits>
  40:/usr/include/c++/5/chrono **** #include <limits>
  41:/usr/include/c++/5/chrono **** #include <ctime>
  42:/usr/include/c++/5/chrono **** #include <bits/parse_numbers.h> // for literals support.
  43:/usr/include/c++/5/chrono **** 
GAS LISTING /tmp/ccEjei2f.s 			page 2


  44:/usr/include/c++/5/chrono **** #ifdef _GLIBCXX_USE_C99_STDINT_TR1
  45:/usr/include/c++/5/chrono **** 
  46:/usr/include/c++/5/chrono **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/5/chrono **** {
  48:/usr/include/c++/5/chrono ****   /**
  49:/usr/include/c++/5/chrono ****    * @defgroup chrono Time
  50:/usr/include/c++/5/chrono ****    * @ingroup utilities
  51:/usr/include/c++/5/chrono ****    *
  52:/usr/include/c++/5/chrono ****    * Classes and functions for time.
  53:/usr/include/c++/5/chrono ****    * @{
  54:/usr/include/c++/5/chrono ****    */
  55:/usr/include/c++/5/chrono **** 
  56:/usr/include/c++/5/chrono ****   /** @namespace std::chrono
  57:/usr/include/c++/5/chrono ****    *  @brief ISO C++ 2011 entities sub-namespace for time and date.
  58:/usr/include/c++/5/chrono ****    */
  59:/usr/include/c++/5/chrono ****   namespace chrono
  60:/usr/include/c++/5/chrono ****   {
  61:/usr/include/c++/5/chrono ****   _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/5/chrono **** 
  63:/usr/include/c++/5/chrono ****     template<typename _Rep, typename _Period = ratio<1>>
  64:/usr/include/c++/5/chrono ****       struct duration;
  65:/usr/include/c++/5/chrono **** 
  66:/usr/include/c++/5/chrono ****     template<typename _Clock, typename _Dur = typename _Clock::duration>
  67:/usr/include/c++/5/chrono ****       struct time_point;
  68:/usr/include/c++/5/chrono **** 
  69:/usr/include/c++/5/chrono ****   _GLIBCXX_END_NAMESPACE_VERSION
  70:/usr/include/c++/5/chrono ****   }
  71:/usr/include/c++/5/chrono **** 
  72:/usr/include/c++/5/chrono **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/5/chrono **** 
  74:/usr/include/c++/5/chrono ****   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)
  75:/usr/include/c++/5/chrono ****   
  76:/usr/include/c++/5/chrono ****   template<typename _CT, typename _Period1, typename _Period2>
  77:/usr/include/c++/5/chrono ****     struct __duration_common_type_wrapper
  78:/usr/include/c++/5/chrono ****     {
  79:/usr/include/c++/5/chrono ****     private:
  80:/usr/include/c++/5/chrono ****       typedef __static_gcd<_Period1::num, _Period2::num> __gcd_num;
  81:/usr/include/c++/5/chrono ****       typedef __static_gcd<_Period1::den, _Period2::den> __gcd_den;
  82:/usr/include/c++/5/chrono ****       typedef typename _CT::type __cr;
  83:/usr/include/c++/5/chrono ****       typedef ratio<__gcd_num::value,
  84:/usr/include/c++/5/chrono ****         (_Period1::den / __gcd_den::value) * _Period2::den> __r;
  85:/usr/include/c++/5/chrono ****     public:
  86:/usr/include/c++/5/chrono ****       typedef __success_type<chrono::duration<__cr, __r>> type;
  87:/usr/include/c++/5/chrono ****     };
  88:/usr/include/c++/5/chrono **** 
  89:/usr/include/c++/5/chrono ****   template<typename _Period1, typename _Period2>
  90:/usr/include/c++/5/chrono ****     struct __duration_common_type_wrapper<__failure_type, _Period1, _Period2>
  91:/usr/include/c++/5/chrono ****     { typedef __failure_type type; };
  92:/usr/include/c++/5/chrono **** 
  93:/usr/include/c++/5/chrono ****   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
  94:/usr/include/c++/5/chrono ****     struct common_type<chrono::duration<_Rep1, _Period1>,
  95:/usr/include/c++/5/chrono ****              chrono::duration<_Rep2, _Period2>>
  96:/usr/include/c++/5/chrono ****     : public __duration_common_type_wrapper<typename __member_type_wrapper<
  97:/usr/include/c++/5/chrono ****              common_type<_Rep1, _Rep2>>::type, _Period1, _Period2>::type
  98:/usr/include/c++/5/chrono ****     { };
  99:/usr/include/c++/5/chrono **** 
 100:/usr/include/c++/5/chrono ****   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)
GAS LISTING /tmp/ccEjei2f.s 			page 3


 101:/usr/include/c++/5/chrono ****   
 102:/usr/include/c++/5/chrono ****   template<typename _CT, typename _Clock>
 103:/usr/include/c++/5/chrono ****     struct __timepoint_common_type_wrapper
 104:/usr/include/c++/5/chrono ****     {
 105:/usr/include/c++/5/chrono ****       typedef __success_type<chrono::time_point<_Clock, typename _CT::type>>
 106:/usr/include/c++/5/chrono ****         type;
 107:/usr/include/c++/5/chrono ****     };
 108:/usr/include/c++/5/chrono **** 
 109:/usr/include/c++/5/chrono ****   template<typename _Clock>
 110:/usr/include/c++/5/chrono ****     struct __timepoint_common_type_wrapper<__failure_type, _Clock>
 111:/usr/include/c++/5/chrono ****     { typedef __failure_type type; };
 112:/usr/include/c++/5/chrono **** 
 113:/usr/include/c++/5/chrono ****   template<typename _Clock, typename _Duration1, typename _Duration2>
 114:/usr/include/c++/5/chrono ****     struct common_type<chrono::time_point<_Clock, _Duration1>,
 115:/usr/include/c++/5/chrono ****              chrono::time_point<_Clock, _Duration2>>
 116:/usr/include/c++/5/chrono ****     : public __timepoint_common_type_wrapper<typename __member_type_wrapper<
 117:/usr/include/c++/5/chrono ****              common_type<_Duration1, _Duration2>>::type, _Clock>::type
 118:/usr/include/c++/5/chrono ****     { };
 119:/usr/include/c++/5/chrono **** 
 120:/usr/include/c++/5/chrono **** _GLIBCXX_END_NAMESPACE_VERSION
 121:/usr/include/c++/5/chrono **** 
 122:/usr/include/c++/5/chrono ****   namespace chrono
 123:/usr/include/c++/5/chrono ****   {
 124:/usr/include/c++/5/chrono ****   _GLIBCXX_BEGIN_NAMESPACE_VERSION
 125:/usr/include/c++/5/chrono **** 
 126:/usr/include/c++/5/chrono ****     // Primary template for duration_cast impl.
 127:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _CF, typename _CR,
 128:/usr/include/c++/5/chrono **** 	     bool _NumIsOne = false, bool _DenIsOne = false>
 129:/usr/include/c++/5/chrono ****       struct __duration_cast_impl
 130:/usr/include/c++/5/chrono ****       {
 131:/usr/include/c++/5/chrono **** 	template<typename _Rep, typename _Period>
 132:/usr/include/c++/5/chrono **** 	  static constexpr _ToDur
 133:/usr/include/c++/5/chrono **** 	  __cast(const duration<_Rep, _Period>& __d)
 134:/usr/include/c++/5/chrono **** 	  {
 135:/usr/include/c++/5/chrono **** 	    typedef typename _ToDur::rep			__to_rep;
 136:/usr/include/c++/5/chrono **** 	    return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
 137:/usr/include/c++/5/chrono **** 	      * static_cast<_CR>(_CF::num)
 138:/usr/include/c++/5/chrono **** 	      / static_cast<_CR>(_CF::den)));
 139:/usr/include/c++/5/chrono **** 	  }
 140:/usr/include/c++/5/chrono ****       };
 141:/usr/include/c++/5/chrono **** 
 142:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _CF, typename _CR>
 143:/usr/include/c++/5/chrono ****       struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
 144:/usr/include/c++/5/chrono ****       {
 145:/usr/include/c++/5/chrono **** 	template<typename _Rep, typename _Period>
 146:/usr/include/c++/5/chrono **** 	  static constexpr _ToDur
 147:/usr/include/c++/5/chrono **** 	  __cast(const duration<_Rep, _Period>& __d)
 148:/usr/include/c++/5/chrono **** 	  {
 149:/usr/include/c++/5/chrono **** 	    typedef typename _ToDur::rep			__to_rep;
 150:/usr/include/c++/5/chrono **** 	    return _ToDur(static_cast<__to_rep>(__d.count()));
 151:/usr/include/c++/5/chrono **** 	  }
 152:/usr/include/c++/5/chrono ****       };
 153:/usr/include/c++/5/chrono **** 
 154:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _CF, typename _CR>
 155:/usr/include/c++/5/chrono ****       struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
 156:/usr/include/c++/5/chrono ****       {
 157:/usr/include/c++/5/chrono **** 	template<typename _Rep, typename _Period>
GAS LISTING /tmp/ccEjei2f.s 			page 4


 158:/usr/include/c++/5/chrono **** 	  static constexpr _ToDur
 159:/usr/include/c++/5/chrono **** 	  __cast(const duration<_Rep, _Period>& __d)
 160:/usr/include/c++/5/chrono **** 	  {
 161:/usr/include/c++/5/chrono **** 	    typedef typename _ToDur::rep			__to_rep;
 162:/usr/include/c++/5/chrono **** 	    return _ToDur(static_cast<__to_rep>(
 163:/usr/include/c++/5/chrono **** 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
 164:/usr/include/c++/5/chrono **** 	  }
 165:/usr/include/c++/5/chrono ****       };
 166:/usr/include/c++/5/chrono **** 
 167:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _CF, typename _CR>
 168:/usr/include/c++/5/chrono ****       struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
 169:/usr/include/c++/5/chrono ****       {
 170:/usr/include/c++/5/chrono **** 	template<typename _Rep, typename _Period>
 171:/usr/include/c++/5/chrono **** 	  static constexpr _ToDur
 172:/usr/include/c++/5/chrono **** 	  __cast(const duration<_Rep, _Period>& __d)
 173:/usr/include/c++/5/chrono **** 	  {
 174:/usr/include/c++/5/chrono **** 	    typedef typename _ToDur::rep			__to_rep;
 175:/usr/include/c++/5/chrono **** 	    return _ToDur(static_cast<__to_rep>(
 176:/usr/include/c++/5/chrono **** 	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
 177:/usr/include/c++/5/chrono **** 	  }
 178:/usr/include/c++/5/chrono ****       };
 179:/usr/include/c++/5/chrono **** 
 180:/usr/include/c++/5/chrono ****     template<typename _Tp>
 181:/usr/include/c++/5/chrono ****       struct __is_duration
 182:/usr/include/c++/5/chrono ****       : std::false_type
 183:/usr/include/c++/5/chrono ****       { };
 184:/usr/include/c++/5/chrono **** 
 185:/usr/include/c++/5/chrono ****     template<typename _Rep, typename _Period>
 186:/usr/include/c++/5/chrono ****       struct __is_duration<duration<_Rep, _Period>>
 187:/usr/include/c++/5/chrono ****       : std::true_type
 188:/usr/include/c++/5/chrono ****       { };
 189:/usr/include/c++/5/chrono **** 
 190:/usr/include/c++/5/chrono ****     /// duration_cast
 191:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _Rep, typename _Period>
 192:/usr/include/c++/5/chrono ****       constexpr typename enable_if<__is_duration<_ToDur>::value,
 193:/usr/include/c++/5/chrono **** 				   _ToDur>::type
 194:/usr/include/c++/5/chrono ****       duration_cast(const duration<_Rep, _Period>& __d)
 195:/usr/include/c++/5/chrono ****       {
 196:/usr/include/c++/5/chrono **** 	typedef typename _ToDur::period				__to_period;
 197:/usr/include/c++/5/chrono **** 	typedef typename _ToDur::rep				__to_rep;
 198:/usr/include/c++/5/chrono **** 	typedef ratio_divide<_Period, __to_period> 		__cf;
 199:/usr/include/c++/5/chrono **** 	typedef typename common_type<__to_rep, _Rep, intmax_t>::type
 200:/usr/include/c++/5/chrono **** 	  							__cr;
 201:/usr/include/c++/5/chrono **** 	typedef  __duration_cast_impl<_ToDur, __cf, __cr,
 202:/usr/include/c++/5/chrono **** 				      __cf::num == 1, __cf::den == 1> __dc;
 203:/usr/include/c++/5/chrono **** 	return __dc::__cast(__d);
 204:/usr/include/c++/5/chrono ****       }
 205:/usr/include/c++/5/chrono **** 
 206:/usr/include/c++/5/chrono ****     /// treat_as_floating_point
 207:/usr/include/c++/5/chrono ****     template<typename _Rep>
 208:/usr/include/c++/5/chrono ****       struct treat_as_floating_point
 209:/usr/include/c++/5/chrono ****       : is_floating_point<_Rep>
 210:/usr/include/c++/5/chrono ****       { };
 211:/usr/include/c++/5/chrono **** 
 212:/usr/include/c++/5/chrono ****     /// duration_values
 213:/usr/include/c++/5/chrono ****     template<typename _Rep>
 214:/usr/include/c++/5/chrono ****       struct duration_values
GAS LISTING /tmp/ccEjei2f.s 			page 5


 215:/usr/include/c++/5/chrono ****       {
 216:/usr/include/c++/5/chrono **** 	static constexpr _Rep
 217:/usr/include/c++/5/chrono **** 	zero()
 218:/usr/include/c++/5/chrono **** 	{ return _Rep(0); }
 219:/usr/include/c++/5/chrono **** 
 220:/usr/include/c++/5/chrono **** 	static constexpr _Rep
 221:/usr/include/c++/5/chrono **** 	max()
 222:/usr/include/c++/5/chrono **** 	{ return numeric_limits<_Rep>::max(); }
 223:/usr/include/c++/5/chrono **** 
 224:/usr/include/c++/5/chrono **** 	static constexpr _Rep
 225:/usr/include/c++/5/chrono **** 	min()
 226:/usr/include/c++/5/chrono **** 	{ return numeric_limits<_Rep>::lowest(); }
 227:/usr/include/c++/5/chrono ****       };
 228:/usr/include/c++/5/chrono **** 
 229:/usr/include/c++/5/chrono ****     template<typename _Tp>
 230:/usr/include/c++/5/chrono ****       struct __is_ratio
 231:/usr/include/c++/5/chrono ****       : std::false_type
 232:/usr/include/c++/5/chrono ****       { };
 233:/usr/include/c++/5/chrono **** 
 234:/usr/include/c++/5/chrono ****     template<intmax_t _Num, intmax_t _Den>
 235:/usr/include/c++/5/chrono ****       struct __is_ratio<ratio<_Num, _Den>>
 236:/usr/include/c++/5/chrono ****       : std::true_type
 237:/usr/include/c++/5/chrono ****       { };
 238:/usr/include/c++/5/chrono **** 
 239:/usr/include/c++/5/chrono ****     /// duration
 240:/usr/include/c++/5/chrono ****     template<typename _Rep, typename _Period>
 241:/usr/include/c++/5/chrono ****       struct duration
 242:/usr/include/c++/5/chrono ****       {
 243:/usr/include/c++/5/chrono **** 	typedef _Rep						rep;
 244:/usr/include/c++/5/chrono **** 	typedef _Period 					period;
 245:/usr/include/c++/5/chrono **** 
 246:/usr/include/c++/5/chrono **** 	static_assert(!__is_duration<_Rep>::value, "rep cannot be a duration");
 247:/usr/include/c++/5/chrono **** 	static_assert(__is_ratio<_Period>::value,
 248:/usr/include/c++/5/chrono **** 		      "period must be a specialization of ratio");
 249:/usr/include/c++/5/chrono **** 	static_assert(_Period::num > 0, "period must be positive");
 250:/usr/include/c++/5/chrono **** 
 251:/usr/include/c++/5/chrono **** 	// 20.11.5.1 construction / copy / destroy
 252:/usr/include/c++/5/chrono **** 	constexpr duration() = default;
 253:/usr/include/c++/5/chrono **** 
 254:/usr/include/c++/5/chrono **** 	// NB: Make constexpr implicit. This cannot be explicitly
 255:/usr/include/c++/5/chrono **** 	// constexpr, as any UDT that is not a literal type with a
 256:/usr/include/c++/5/chrono **** 	// constexpr copy constructor will be ill-formed.
 257:/usr/include/c++/5/chrono **** 	duration(const duration&) = default;
 258:/usr/include/c++/5/chrono **** 
 259:/usr/include/c++/5/chrono **** 	template<typename _Rep2, typename = typename
 260:/usr/include/c++/5/chrono **** 	       enable_if<is_convertible<_Rep2, rep>::value
 261:/usr/include/c++/5/chrono **** 			 && (treat_as_floating_point<rep>::value
 262:/usr/include/c++/5/chrono **** 			     || !treat_as_floating_point<_Rep2>::value)>::type>
 263:/usr/include/c++/5/chrono **** 	  constexpr explicit duration(const _Rep2& __rep)
  18              		.loc 1 263 0
  19              		.cfi_startproc
  20 0000 55       		pushq	%rbp
  21              		.cfi_def_cfa_offset 16
  22              		.cfi_offset 6, -16
  23 0001 4889E5   		movq	%rsp, %rbp
  24              		.cfi_def_cfa_register 6
  25 0004 48897DF8 		movq	%rdi, -8(%rbp)
GAS LISTING /tmp/ccEjei2f.s 			page 6


  26 0008 488975F0 		movq	%rsi, -16(%rbp)
  27              	.LBB2:
 264:/usr/include/c++/5/chrono **** 	  : __r(static_cast<rep>(__rep)) { }
  28              		.loc 1 264 0
  29 000c 488B45F0 		movq	-16(%rbp), %rax
  30 0010 488B10   		movq	(%rax), %rdx
  31 0013 488B45F8 		movq	-8(%rbp), %rax
  32 0017 488910   		movq	%rdx, (%rax)
  33              	.LBE2:
  34 001a 90       		nop
  35 001b 5D       		popq	%rbp
  36              		.cfi_def_cfa 7, 8
  37 001c C3       		ret
  38              		.cfi_endproc
  39              	.LFE1941:
  41              		.section	.text._ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv,"axG",@progbits,_ZNKSt
  42              		.align 2
  43              		.weak	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
  45              	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv:
  46              	.LFB1945:
 265:/usr/include/c++/5/chrono **** 
 266:/usr/include/c++/5/chrono **** 	template<typename _Rep2, typename _Period2, typename = typename
 267:/usr/include/c++/5/chrono **** 	       enable_if<treat_as_floating_point<rep>::value
 268:/usr/include/c++/5/chrono **** 			 || (ratio_divide<_Period2, period>::den == 1
 269:/usr/include/c++/5/chrono **** 			     && !treat_as_floating_point<_Rep2>::value)>::type>
 270:/usr/include/c++/5/chrono **** 	  constexpr duration(const duration<_Rep2, _Period2>& __d)
 271:/usr/include/c++/5/chrono **** 	  : __r(duration_cast<duration>(__d).count()) { }
 272:/usr/include/c++/5/chrono **** 
 273:/usr/include/c++/5/chrono **** 	~duration() = default;
 274:/usr/include/c++/5/chrono **** 	duration& operator=(const duration&) = default;
 275:/usr/include/c++/5/chrono **** 
 276:/usr/include/c++/5/chrono **** 	// 20.11.5.2 observer
 277:/usr/include/c++/5/chrono **** 	constexpr rep
 278:/usr/include/c++/5/chrono **** 	count() const
  47              		.loc 1 278 0
  48              		.cfi_startproc
  49 0000 55       		pushq	%rbp
  50              		.cfi_def_cfa_offset 16
  51              		.cfi_offset 6, -16
  52 0001 4889E5   		movq	%rsp, %rbp
  53              		.cfi_def_cfa_register 6
  54 0004 48897DF8 		movq	%rdi, -8(%rbp)
 279:/usr/include/c++/5/chrono **** 	{ return __r; }
  55              		.loc 1 279 0
  56 0008 488B45F8 		movq	-8(%rbp), %rax
  57 000c 488B00   		movq	(%rax), %rax
  58 000f 5D       		popq	%rbp
  59              		.cfi_def_cfa 7, 8
  60 0010 C3       		ret
  61              		.cfi_endproc
  62              	.LFE1945:
  64              		.section	.text._ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl100000
  65              		.align 2
  66              		.weak	_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE
  68              	_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_
  69              	.LFB1947:
 280:/usr/include/c++/5/chrono **** 
GAS LISTING /tmp/ccEjei2f.s 			page 7


 281:/usr/include/c++/5/chrono **** 	// 20.11.5.3 arithmetic
 282:/usr/include/c++/5/chrono **** 	constexpr duration
 283:/usr/include/c++/5/chrono **** 	operator+() const
 284:/usr/include/c++/5/chrono **** 	{ return *this; }
 285:/usr/include/c++/5/chrono **** 
 286:/usr/include/c++/5/chrono **** 	constexpr duration
 287:/usr/include/c++/5/chrono **** 	operator-() const
 288:/usr/include/c++/5/chrono **** 	{ return duration(-__r); }
 289:/usr/include/c++/5/chrono **** 
 290:/usr/include/c++/5/chrono **** 	duration&
 291:/usr/include/c++/5/chrono **** 	operator++()
 292:/usr/include/c++/5/chrono **** 	{
 293:/usr/include/c++/5/chrono **** 	  ++__r;
 294:/usr/include/c++/5/chrono **** 	  return *this;
 295:/usr/include/c++/5/chrono **** 	}
 296:/usr/include/c++/5/chrono **** 
 297:/usr/include/c++/5/chrono **** 	duration
 298:/usr/include/c++/5/chrono **** 	operator++(int)
 299:/usr/include/c++/5/chrono **** 	{ return duration(__r++); }
 300:/usr/include/c++/5/chrono **** 
 301:/usr/include/c++/5/chrono **** 	duration&
 302:/usr/include/c++/5/chrono **** 	operator--()
 303:/usr/include/c++/5/chrono **** 	{
 304:/usr/include/c++/5/chrono **** 	  --__r;
 305:/usr/include/c++/5/chrono **** 	  return *this;
 306:/usr/include/c++/5/chrono **** 	}
 307:/usr/include/c++/5/chrono **** 
 308:/usr/include/c++/5/chrono **** 	duration
 309:/usr/include/c++/5/chrono **** 	operator--(int)
 310:/usr/include/c++/5/chrono **** 	{ return duration(__r--); }
 311:/usr/include/c++/5/chrono **** 
 312:/usr/include/c++/5/chrono **** 	duration&
 313:/usr/include/c++/5/chrono **** 	operator+=(const duration& __d)
 314:/usr/include/c++/5/chrono **** 	{
 315:/usr/include/c++/5/chrono **** 	  __r += __d.count();
 316:/usr/include/c++/5/chrono **** 	  return *this;
 317:/usr/include/c++/5/chrono **** 	}
 318:/usr/include/c++/5/chrono **** 
 319:/usr/include/c++/5/chrono **** 	duration&
 320:/usr/include/c++/5/chrono **** 	operator-=(const duration& __d)
 321:/usr/include/c++/5/chrono **** 	{
 322:/usr/include/c++/5/chrono **** 	  __r -= __d.count();
 323:/usr/include/c++/5/chrono **** 	  return *this;
 324:/usr/include/c++/5/chrono **** 	}
 325:/usr/include/c++/5/chrono **** 
 326:/usr/include/c++/5/chrono **** 	duration&
 327:/usr/include/c++/5/chrono **** 	operator*=(const rep& __rhs)
 328:/usr/include/c++/5/chrono **** 	{
 329:/usr/include/c++/5/chrono **** 	  __r *= __rhs;
 330:/usr/include/c++/5/chrono **** 	  return *this;
 331:/usr/include/c++/5/chrono **** 	}
 332:/usr/include/c++/5/chrono **** 
 333:/usr/include/c++/5/chrono **** 	duration&
 334:/usr/include/c++/5/chrono **** 	operator/=(const rep& __rhs)
 335:/usr/include/c++/5/chrono **** 	{
 336:/usr/include/c++/5/chrono **** 	  __r /= __rhs;
 337:/usr/include/c++/5/chrono **** 	  return *this;
GAS LISTING /tmp/ccEjei2f.s 			page 8


 338:/usr/include/c++/5/chrono **** 	}
 339:/usr/include/c++/5/chrono **** 
 340:/usr/include/c++/5/chrono **** 	// DR 934.
 341:/usr/include/c++/5/chrono **** 	template<typename _Rep2 = rep>
 342:/usr/include/c++/5/chrono **** 	  typename enable_if<!treat_as_floating_point<_Rep2>::value,
 343:/usr/include/c++/5/chrono **** 			     duration&>::type
 344:/usr/include/c++/5/chrono **** 	  operator%=(const rep& __rhs)
 345:/usr/include/c++/5/chrono **** 	  {
 346:/usr/include/c++/5/chrono **** 	    __r %= __rhs;
 347:/usr/include/c++/5/chrono **** 	    return *this;
 348:/usr/include/c++/5/chrono **** 	  }
 349:/usr/include/c++/5/chrono **** 
 350:/usr/include/c++/5/chrono **** 	template<typename _Rep2 = rep>
 351:/usr/include/c++/5/chrono **** 	  typename enable_if<!treat_as_floating_point<_Rep2>::value,
 352:/usr/include/c++/5/chrono **** 			     duration&>::type
 353:/usr/include/c++/5/chrono **** 	  operator%=(const duration& __d)
 354:/usr/include/c++/5/chrono **** 	  {
 355:/usr/include/c++/5/chrono **** 	    __r %= __d.count();
 356:/usr/include/c++/5/chrono **** 	    return *this;
 357:/usr/include/c++/5/chrono **** 	  }
 358:/usr/include/c++/5/chrono **** 
 359:/usr/include/c++/5/chrono **** 	// 20.11.5.4 special values
 360:/usr/include/c++/5/chrono **** 	static constexpr duration
 361:/usr/include/c++/5/chrono **** 	zero()
 362:/usr/include/c++/5/chrono **** 	{ return duration(duration_values<rep>::zero()); }
 363:/usr/include/c++/5/chrono **** 
 364:/usr/include/c++/5/chrono **** 	static constexpr duration
 365:/usr/include/c++/5/chrono **** 	min()
 366:/usr/include/c++/5/chrono **** 	{ return duration(duration_values<rep>::min()); }
 367:/usr/include/c++/5/chrono **** 
 368:/usr/include/c++/5/chrono **** 	static constexpr duration
 369:/usr/include/c++/5/chrono **** 	max()
 370:/usr/include/c++/5/chrono **** 	{ return duration(duration_values<rep>::max()); }
 371:/usr/include/c++/5/chrono **** 
 372:/usr/include/c++/5/chrono ****       private:
 373:/usr/include/c++/5/chrono **** 	rep __r;
 374:/usr/include/c++/5/chrono ****       };
 375:/usr/include/c++/5/chrono **** 
 376:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 377:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 378:/usr/include/c++/5/chrono ****       constexpr typename common_type<duration<_Rep1, _Period1>,
 379:/usr/include/c++/5/chrono **** 				     duration<_Rep2, _Period2>>::type
 380:/usr/include/c++/5/chrono ****       operator+(const duration<_Rep1, _Period1>& __lhs,
 381:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 382:/usr/include/c++/5/chrono ****       {
 383:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 384:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 385:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__cd;
 386:/usr/include/c++/5/chrono **** 	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
 387:/usr/include/c++/5/chrono ****       }
 388:/usr/include/c++/5/chrono **** 
 389:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 390:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 391:/usr/include/c++/5/chrono ****       constexpr typename common_type<duration<_Rep1, _Period1>,
 392:/usr/include/c++/5/chrono **** 				     duration<_Rep2, _Period2>>::type
 393:/usr/include/c++/5/chrono ****       operator-(const duration<_Rep1, _Period1>& __lhs,
 394:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
GAS LISTING /tmp/ccEjei2f.s 			page 9


 395:/usr/include/c++/5/chrono ****       {
 396:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 397:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 398:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__cd;
 399:/usr/include/c++/5/chrono **** 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
 400:/usr/include/c++/5/chrono ****       }
 401:/usr/include/c++/5/chrono **** 
 402:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Rep2, bool =
 403:/usr/include/c++/5/chrono **** 	     is_convertible<_Rep2,
 404:/usr/include/c++/5/chrono **** 			    typename common_type<_Rep1, _Rep2>::type>::value>
 405:/usr/include/c++/5/chrono ****       struct __common_rep_type { };
 406:/usr/include/c++/5/chrono **** 
 407:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Rep2>
 408:/usr/include/c++/5/chrono ****       struct __common_rep_type<_Rep1, _Rep2, true>
 409:/usr/include/c++/5/chrono ****       { typedef typename common_type<_Rep1, _Rep2>::type type; };
 410:/usr/include/c++/5/chrono **** 
 411:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period, typename _Rep2>
 412:/usr/include/c++/5/chrono ****       constexpr
 413:/usr/include/c++/5/chrono ****       duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>
 414:/usr/include/c++/5/chrono ****       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
 415:/usr/include/c++/5/chrono ****       {
 416:/usr/include/c++/5/chrono **** 	typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
 417:/usr/include/c++/5/chrono **** 	  __cd;
 418:/usr/include/c++/5/chrono **** 	return __cd(__cd(__d).count() * __s);
 419:/usr/include/c++/5/chrono ****       }
 420:/usr/include/c++/5/chrono **** 
 421:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Rep2, typename _Period>
 422:/usr/include/c++/5/chrono ****       constexpr
 423:/usr/include/c++/5/chrono ****       duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>
 424:/usr/include/c++/5/chrono ****       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
 425:/usr/include/c++/5/chrono ****       { return __d * __s; }
 426:/usr/include/c++/5/chrono **** 
 427:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period, typename _Rep2>
 428:/usr/include/c++/5/chrono ****       constexpr duration<typename __common_rep_type<_Rep1, typename
 429:/usr/include/c++/5/chrono **** 	enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
 430:/usr/include/c++/5/chrono ****       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
 431:/usr/include/c++/5/chrono ****       {
 432:/usr/include/c++/5/chrono **** 	typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
 433:/usr/include/c++/5/chrono **** 	  __cd;
 434:/usr/include/c++/5/chrono **** 	return __cd(__cd(__d).count() / __s);
 435:/usr/include/c++/5/chrono ****       }
 436:/usr/include/c++/5/chrono **** 
 437:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 438:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 439:/usr/include/c++/5/chrono ****       constexpr typename common_type<_Rep1, _Rep2>::type
 440:/usr/include/c++/5/chrono ****       operator/(const duration<_Rep1, _Period1>& __lhs,
 441:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 442:/usr/include/c++/5/chrono ****       {
 443:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 444:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 445:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__cd;
 446:/usr/include/c++/5/chrono **** 	return __cd(__lhs).count() / __cd(__rhs).count();
 447:/usr/include/c++/5/chrono ****       }
 448:/usr/include/c++/5/chrono **** 
 449:/usr/include/c++/5/chrono ****     // DR 934.
 450:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period, typename _Rep2>
 451:/usr/include/c++/5/chrono ****       constexpr duration<typename __common_rep_type<_Rep1, typename
GAS LISTING /tmp/ccEjei2f.s 			page 10


 452:/usr/include/c++/5/chrono **** 	enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
 453:/usr/include/c++/5/chrono ****       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
 454:/usr/include/c++/5/chrono ****       {
 455:/usr/include/c++/5/chrono **** 	typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
 456:/usr/include/c++/5/chrono **** 	  __cd;
 457:/usr/include/c++/5/chrono **** 	return __cd(__cd(__d).count() % __s);
 458:/usr/include/c++/5/chrono ****       }
 459:/usr/include/c++/5/chrono **** 
 460:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 461:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 462:/usr/include/c++/5/chrono ****       constexpr typename common_type<duration<_Rep1, _Period1>,
 463:/usr/include/c++/5/chrono **** 				     duration<_Rep2, _Period2>>::type
 464:/usr/include/c++/5/chrono ****       operator%(const duration<_Rep1, _Period1>& __lhs,
 465:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 466:/usr/include/c++/5/chrono ****       {
 467:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 468:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 469:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__cd;
 470:/usr/include/c++/5/chrono **** 	return __cd(__cd(__lhs).count() % __cd(__rhs).count());
 471:/usr/include/c++/5/chrono ****       }
 472:/usr/include/c++/5/chrono **** 
 473:/usr/include/c++/5/chrono ****     // comparisons
 474:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 475:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 476:/usr/include/c++/5/chrono ****       constexpr bool
 477:/usr/include/c++/5/chrono ****       operator==(const duration<_Rep1, _Period1>& __lhs,
 478:/usr/include/c++/5/chrono **** 		 const duration<_Rep2, _Period2>& __rhs)
 479:/usr/include/c++/5/chrono ****       {
 480:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 481:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 482:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__ct;
 483:/usr/include/c++/5/chrono **** 	return __ct(__lhs).count() == __ct(__rhs).count();
 484:/usr/include/c++/5/chrono ****       }
 485:/usr/include/c++/5/chrono **** 
 486:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 487:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 488:/usr/include/c++/5/chrono ****       constexpr bool
 489:/usr/include/c++/5/chrono ****       operator<(const duration<_Rep1, _Period1>& __lhs,
 490:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 491:/usr/include/c++/5/chrono ****       {
 492:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 493:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 494:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,__dur2>::type	__ct;
 495:/usr/include/c++/5/chrono **** 	return __ct(__lhs).count() < __ct(__rhs).count();
 496:/usr/include/c++/5/chrono ****       }
 497:/usr/include/c++/5/chrono **** 
 498:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 499:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 500:/usr/include/c++/5/chrono ****       constexpr bool
 501:/usr/include/c++/5/chrono ****       operator!=(const duration<_Rep1, _Period1>& __lhs,
 502:/usr/include/c++/5/chrono **** 		 const duration<_Rep2, _Period2>& __rhs)
 503:/usr/include/c++/5/chrono ****       { return !(__lhs == __rhs); }
 504:/usr/include/c++/5/chrono **** 
 505:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 506:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 507:/usr/include/c++/5/chrono ****       constexpr bool
 508:/usr/include/c++/5/chrono ****       operator<=(const duration<_Rep1, _Period1>& __lhs,
GAS LISTING /tmp/ccEjei2f.s 			page 11


 509:/usr/include/c++/5/chrono **** 		 const duration<_Rep2, _Period2>& __rhs)
 510:/usr/include/c++/5/chrono ****       { return !(__rhs < __lhs); }
 511:/usr/include/c++/5/chrono **** 
 512:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 513:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 514:/usr/include/c++/5/chrono ****       constexpr bool
 515:/usr/include/c++/5/chrono ****       operator>(const duration<_Rep1, _Period1>& __lhs,
 516:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 517:/usr/include/c++/5/chrono ****       { return __rhs < __lhs; }
 518:/usr/include/c++/5/chrono **** 
 519:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 520:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 521:/usr/include/c++/5/chrono ****       constexpr bool
 522:/usr/include/c++/5/chrono ****       operator>=(const duration<_Rep1, _Period1>& __lhs,
 523:/usr/include/c++/5/chrono **** 		 const duration<_Rep2, _Period2>& __rhs)
 524:/usr/include/c++/5/chrono ****       { return !(__lhs < __rhs); }
 525:/usr/include/c++/5/chrono **** 
 526:/usr/include/c++/5/chrono ****     /// nanoseconds
 527:/usr/include/c++/5/chrono ****     typedef duration<int64_t, nano> 	    nanoseconds;
 528:/usr/include/c++/5/chrono **** 
 529:/usr/include/c++/5/chrono ****     /// microseconds
 530:/usr/include/c++/5/chrono ****     typedef duration<int64_t, micro> 	    microseconds;
 531:/usr/include/c++/5/chrono **** 
 532:/usr/include/c++/5/chrono ****     /// milliseconds
 533:/usr/include/c++/5/chrono ****     typedef duration<int64_t, milli> 	    milliseconds;
 534:/usr/include/c++/5/chrono **** 
 535:/usr/include/c++/5/chrono ****     /// seconds
 536:/usr/include/c++/5/chrono ****     typedef duration<int64_t> 		    seconds;
 537:/usr/include/c++/5/chrono **** 
 538:/usr/include/c++/5/chrono ****     /// minutes
 539:/usr/include/c++/5/chrono ****     typedef duration<int64_t, ratio< 60>>   minutes;
 540:/usr/include/c++/5/chrono **** 
 541:/usr/include/c++/5/chrono ****     /// hours
 542:/usr/include/c++/5/chrono ****     typedef duration<int64_t, ratio<3600>>  hours;
 543:/usr/include/c++/5/chrono **** 
 544:/usr/include/c++/5/chrono ****     /// time_point
 545:/usr/include/c++/5/chrono ****     template<typename _Clock, typename _Dur>
 546:/usr/include/c++/5/chrono ****       struct time_point
 547:/usr/include/c++/5/chrono ****       {
 548:/usr/include/c++/5/chrono **** 	typedef _Clock			  			clock;
 549:/usr/include/c++/5/chrono **** 	typedef _Dur		  				duration;
 550:/usr/include/c++/5/chrono **** 	typedef typename duration::rep	  			rep;
 551:/usr/include/c++/5/chrono **** 	typedef typename duration::period			period;
 552:/usr/include/c++/5/chrono **** 
 553:/usr/include/c++/5/chrono **** 	constexpr time_point() : __d(duration::zero())
 554:/usr/include/c++/5/chrono **** 	{ }
 555:/usr/include/c++/5/chrono **** 
 556:/usr/include/c++/5/chrono **** 	constexpr explicit time_point(const duration& __dur)
 557:/usr/include/c++/5/chrono **** 	: __d(__dur)
 558:/usr/include/c++/5/chrono **** 	{ }
 559:/usr/include/c++/5/chrono **** 
 560:/usr/include/c++/5/chrono **** 	// conversions
 561:/usr/include/c++/5/chrono **** 	template<typename _Dur2>
 562:/usr/include/c++/5/chrono **** 	  constexpr time_point(const time_point<clock, _Dur2>& __t)
 563:/usr/include/c++/5/chrono **** 	  : __d(__t.time_since_epoch())
 564:/usr/include/c++/5/chrono **** 	  { }
 565:/usr/include/c++/5/chrono **** 
GAS LISTING /tmp/ccEjei2f.s 			page 12


 566:/usr/include/c++/5/chrono **** 	// observer
 567:/usr/include/c++/5/chrono **** 	constexpr duration
 568:/usr/include/c++/5/chrono **** 	time_since_epoch() const
  70              		.loc 1 568 0
  71              		.cfi_startproc
  72 0000 55       		pushq	%rbp
  73              		.cfi_def_cfa_offset 16
  74              		.cfi_offset 6, -16
  75 0001 4889E5   		movq	%rsp, %rbp
  76              		.cfi_def_cfa_register 6
  77 0004 48897DF8 		movq	%rdi, -8(%rbp)
 569:/usr/include/c++/5/chrono **** 	{ return __d; }
  78              		.loc 1 569 0
  79 0008 488B45F8 		movq	-8(%rbp), %rax
  80 000c 488B00   		movq	(%rax), %rax
  81 000f 5D       		popq	%rbp
  82              		.cfi_def_cfa 7, 8
  83 0010 C3       		ret
  84              		.cfi_endproc
  85              	.LFE1947:
  87              		.section	.text._ZN7DecoderD2Ev,"axG",@progbits,_ZN7DecoderD5Ev,comdat
  88              		.align 2
  89              		.weak	_ZN7DecoderD2Ev
  91              	_ZN7DecoderD2Ev:
  92              	.LFB1967:
  93              		.file 2 "Decoder/Decoder.h"
   1:Decoder/Decoder.h **** //
   2:Decoder/Decoder.h **** // Created by max on 14.09.15.
   3:Decoder/Decoder.h **** //
   4:Decoder/Decoder.h **** 
   5:Decoder/Decoder.h **** #ifndef T7_COMPUTER_ARCHITECTURE_LAB1_DECODER_H
   6:Decoder/Decoder.h **** #define T7_COMPUTER_ARCHITECTURE_LAB1_DECODER_H
   7:Decoder/Decoder.h **** 
   8:Decoder/Decoder.h **** #include <string>
   9:Decoder/Decoder.h **** #include <vector>
  10:Decoder/Decoder.h **** #include <iostream>
  11:Decoder/Decoder.h **** using namespace std;
  12:Decoder/Decoder.h **** 
  13:Decoder/Decoder.h **** class Decoder {
  94              		.loc 2 13 0
  95              		.cfi_startproc
  96 0000 55       		pushq	%rbp
  97              		.cfi_def_cfa_offset 16
  98              		.cfi_offset 6, -16
  99 0001 4889E5   		movq	%rsp, %rbp
 100              		.cfi_def_cfa_register 6
 101 0004 4883EC10 		subq	$16, %rsp
 102 0008 48897DF8 		movq	%rdi, -8(%rbp)
 103              	.LBB3:
 104              		.loc 2 13 0
 105 000c 488B45F8 		movq	-8(%rbp), %rax
 106 0010 4889C7   		movq	%rax, %rdi
 107 0013 E8000000 		call	_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED1Ev
 107      00
 108              	.LBE3:
 109 0018 90       		nop
 110 0019 C9       		leave
GAS LISTING /tmp/ccEjei2f.s 			page 13


 111              		.cfi_def_cfa 7, 8
 112 001a C3       		ret
 113              		.cfi_endproc
 114              	.LFE1967:
 116              		.weak	_ZN7DecoderD1Ev
 117              		.set	_ZN7DecoderD1Ev,_ZN7DecoderD2Ev
 118              		.section	.text._ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T
 119              		.weak	_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_I
 121              	_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_E
 122              	.LFB1973:
 393:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 123              		.loc 1 393 0
 124              		.cfi_startproc
 125 0000 55       		pushq	%rbp
 126              		.cfi_def_cfa_offset 16
 127              		.cfi_offset 6, -16
 128 0001 4889E5   		movq	%rsp, %rbp
 129              		.cfi_def_cfa_register 6
 130 0004 53       		pushq	%rbx
 131 0005 4883EC58 		subq	$88, %rsp
 132              		.cfi_offset 3, -24
 133 0009 48897DA8 		movq	%rdi, -88(%rbp)
 134 000d 488975A0 		movq	%rsi, -96(%rbp)
 393:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 135              		.loc 1 393 0
 136 0011 64488B04 		movq	%fs:40, %rax
 136      25280000 
 136      00
 137 001a 488945E8 		movq	%rax, -24(%rbp)
 138 001e 31C0     		xorl	%eax, %eax
 399:/usr/include/c++/5/chrono ****       }
 139              		.loc 1 399 0
 140 0020 488B45A8 		movq	-88(%rbp), %rax
 141 0024 488B00   		movq	(%rax), %rax
 142 0027 488945B0 		movq	%rax, -80(%rbp)
 143 002b 488D45B0 		leaq	-80(%rbp), %rax
 144 002f 4889C7   		movq	%rax, %rdi
 145 0032 E8000000 		call	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
 145      00
 146 0037 4889C3   		movq	%rax, %rbx
 147 003a 488B45A0 		movq	-96(%rbp), %rax
 148 003e 488B00   		movq	(%rax), %rax
 149 0041 488945C0 		movq	%rax, -64(%rbp)
 150 0045 488D45C0 		leaq	-64(%rbp), %rax
 151 0049 4889C7   		movq	%rax, %rdi
 152 004c E8000000 		call	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
 152      00
 153 0051 4829C3   		subq	%rax, %rbx
 154 0054 4889D8   		movq	%rbx, %rax
 155 0057 488945E0 		movq	%rax, -32(%rbp)
 156 005b 488D55E0 		leaq	-32(%rbp), %rdx
 157 005f 488D45D0 		leaq	-48(%rbp), %rax
 158 0063 4889D6   		movq	%rdx, %rsi
 159 0066 4889C7   		movq	%rax, %rdi
 160 0069 E8000000 		call	_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_
 160      00
 161 006e 488B45D0 		movq	-48(%rbp), %rax
GAS LISTING /tmp/ccEjei2f.s 			page 14


 400:/usr/include/c++/5/chrono **** 
 162              		.loc 1 400 0
 163 0072 488B4DE8 		movq	-24(%rbp), %rcx
 164 0076 6448330C 		xorq	%fs:40, %rcx
 164      25280000 
 164      00
 165 007f 7405     		je	.L9
 166 0081 E8000000 		call	__stack_chk_fail
 166      00
 167              	.L9:
 168 0086 4883C458 		addq	$88, %rsp
 169 008a 5B       		popq	%rbx
 170 008b 5D       		popq	%rbp
 171              		.cfi_def_cfa 7, 8
 172 008c C3       		ret
 173              		.cfi_endproc
 174              	.LFE1973:
 176              		.weak	_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIINS_8durationIT_T0_EENS4_I
 177              		.set	_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIINS_8durationIT_T0_EENS4_IT
 178              		.section	.text._ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_
 179              		.weak	_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11co
 181              	_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_ty
 182              	.LFB1972:
 570:/usr/include/c++/5/chrono **** 
 571:/usr/include/c++/5/chrono **** 	// arithmetic
 572:/usr/include/c++/5/chrono **** 	time_point&
 573:/usr/include/c++/5/chrono **** 	operator+=(const duration& __dur)
 574:/usr/include/c++/5/chrono **** 	{
 575:/usr/include/c++/5/chrono **** 	  __d += __dur;
 576:/usr/include/c++/5/chrono **** 	  return *this;
 577:/usr/include/c++/5/chrono **** 	}
 578:/usr/include/c++/5/chrono **** 
 579:/usr/include/c++/5/chrono **** 	time_point&
 580:/usr/include/c++/5/chrono **** 	operator-=(const duration& __dur)
 581:/usr/include/c++/5/chrono **** 	{
 582:/usr/include/c++/5/chrono **** 	  __d -= __dur;
 583:/usr/include/c++/5/chrono **** 	  return *this;
 584:/usr/include/c++/5/chrono **** 	}
 585:/usr/include/c++/5/chrono **** 
 586:/usr/include/c++/5/chrono **** 	// special values
 587:/usr/include/c++/5/chrono **** 	static constexpr time_point
 588:/usr/include/c++/5/chrono **** 	min()
 589:/usr/include/c++/5/chrono **** 	{ return time_point(duration::min()); }
 590:/usr/include/c++/5/chrono **** 
 591:/usr/include/c++/5/chrono **** 	static constexpr time_point
 592:/usr/include/c++/5/chrono **** 	max()
 593:/usr/include/c++/5/chrono **** 	{ return time_point(duration::max()); }
 594:/usr/include/c++/5/chrono **** 
 595:/usr/include/c++/5/chrono ****       private:
 596:/usr/include/c++/5/chrono **** 	duration __d;
 597:/usr/include/c++/5/chrono ****       };
 598:/usr/include/c++/5/chrono **** 
 599:/usr/include/c++/5/chrono ****     /// time_point_cast
 600:/usr/include/c++/5/chrono ****     template<typename _ToDur, typename _Clock, typename _Dur>
 601:/usr/include/c++/5/chrono ****       constexpr typename enable_if<__is_duration<_ToDur>::value,
 602:/usr/include/c++/5/chrono **** 				   time_point<_Clock, _ToDur>>::type
 603:/usr/include/c++/5/chrono ****       time_point_cast(const time_point<_Clock, _Dur>& __t)
GAS LISTING /tmp/ccEjei2f.s 			page 15


 604:/usr/include/c++/5/chrono ****       {
 605:/usr/include/c++/5/chrono **** 	typedef time_point<_Clock, _ToDur> 			__time_point;
 606:/usr/include/c++/5/chrono **** 	return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
 607:/usr/include/c++/5/chrono ****       }
 608:/usr/include/c++/5/chrono **** 
 609:/usr/include/c++/5/chrono ****     template<typename _Clock, typename _Dur1,
 610:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 611:/usr/include/c++/5/chrono ****       constexpr time_point<_Clock,
 612:/usr/include/c++/5/chrono **** 	typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
 613:/usr/include/c++/5/chrono ****       operator+(const time_point<_Clock, _Dur1>& __lhs,
 614:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 615:/usr/include/c++/5/chrono ****       {
 616:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 617:/usr/include/c++/5/chrono **** 	typedef typename common_type<_Dur1,__dur2>::type	__ct;
 618:/usr/include/c++/5/chrono **** 	typedef time_point<_Clock, __ct> 			__time_point;
 619:/usr/include/c++/5/chrono **** 	return __time_point(__lhs.time_since_epoch() + __rhs);
 620:/usr/include/c++/5/chrono ****       }
 621:/usr/include/c++/5/chrono **** 
 622:/usr/include/c++/5/chrono ****     template<typename _Rep1, typename _Period1,
 623:/usr/include/c++/5/chrono **** 	     typename _Clock, typename _Dur2>
 624:/usr/include/c++/5/chrono ****       constexpr time_point<_Clock,
 625:/usr/include/c++/5/chrono **** 	typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
 626:/usr/include/c++/5/chrono ****       operator+(const duration<_Rep1, _Period1>& __lhs,
 627:/usr/include/c++/5/chrono **** 		const time_point<_Clock, _Dur2>& __rhs)
 628:/usr/include/c++/5/chrono ****       { 
 629:/usr/include/c++/5/chrono **** 	typedef duration<_Rep1, _Period1>			__dur1;
 630:/usr/include/c++/5/chrono **** 	typedef typename common_type<__dur1,_Dur2>::type	__ct;
 631:/usr/include/c++/5/chrono **** 	typedef time_point<_Clock, __ct> 			__time_point;
 632:/usr/include/c++/5/chrono **** 	return __time_point(__rhs.time_since_epoch() + __lhs); 
 633:/usr/include/c++/5/chrono ****       }
 634:/usr/include/c++/5/chrono **** 
 635:/usr/include/c++/5/chrono ****     template<typename _Clock, typename _Dur1,
 636:/usr/include/c++/5/chrono **** 	     typename _Rep2, typename _Period2>
 637:/usr/include/c++/5/chrono ****       constexpr time_point<_Clock,
 638:/usr/include/c++/5/chrono **** 	typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
 639:/usr/include/c++/5/chrono ****       operator-(const time_point<_Clock, _Dur1>& __lhs,
 640:/usr/include/c++/5/chrono **** 		const duration<_Rep2, _Period2>& __rhs)
 641:/usr/include/c++/5/chrono ****       { 
 642:/usr/include/c++/5/chrono **** 	typedef duration<_Rep2, _Period2>			__dur2;
 643:/usr/include/c++/5/chrono **** 	typedef typename common_type<_Dur1,__dur2>::type	__ct;
 644:/usr/include/c++/5/chrono **** 	typedef time_point<_Clock, __ct> 			__time_point;
 645:/usr/include/c++/5/chrono **** 	return __time_point(__lhs.time_since_epoch() -__rhs); 
 646:/usr/include/c++/5/chrono ****       }
 647:/usr/include/c++/5/chrono **** 
 648:/usr/include/c++/5/chrono ****     template<typename _Clock, typename _Dur1, typename _Dur2>
 649:/usr/include/c++/5/chrono ****       constexpr typename common_type<_Dur1, _Dur2>::type
 650:/usr/include/c++/5/chrono ****       operator-(const time_point<_Clock, _Dur1>& __lhs,
 183              		.loc 1 650 0
 184              		.cfi_startproc
 185 0000 55       		pushq	%rbp
 186              		.cfi_def_cfa_offset 16
 187              		.cfi_offset 6, -16
 188 0001 4889E5   		movq	%rsp, %rbp
 189              		.cfi_def_cfa_register 6
 190 0004 4883EC30 		subq	$48, %rsp
 191 0008 48897DD8 		movq	%rdi, -40(%rbp)
 192 000c 488975D0 		movq	%rsi, -48(%rbp)
GAS LISTING /tmp/ccEjei2f.s 			page 16


 193              		.loc 1 650 0
 194 0010 64488B04 		movq	%fs:40, %rax
 194      25280000 
 194      00
 195 0019 488945F8 		movq	%rax, -8(%rbp)
 196 001d 31C0     		xorl	%eax, %eax
 651:/usr/include/c++/5/chrono **** 		const time_point<_Clock, _Dur2>& __rhs)
 652:/usr/include/c++/5/chrono ****       { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }
 197              		.loc 1 652 0
 198 001f 488B45D0 		movq	-48(%rbp), %rax
 199 0023 4889C7   		movq	%rax, %rdi
 200 0026 E8000000 		call	_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE1
 200      00
 201 002b 488945F0 		movq	%rax, -16(%rbp)
 202 002f 488B45D8 		movq	-40(%rbp), %rax
 203 0033 4889C7   		movq	%rax, %rdi
 204 0036 E8000000 		call	_ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE1
 204      00
 205 003b 488945E0 		movq	%rax, -32(%rbp)
 206 003f 488D55F0 		leaq	-16(%rbp), %rdx
 207 0043 488D45E0 		leaq	-32(%rbp), %rax
 208 0047 4889D6   		movq	%rdx, %rsi
 209 004a 4889C7   		movq	%rax, %rdi
 210 004d E8000000 		call	_ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT
 210      00
 211 0052 488B4DF8 		movq	-8(%rbp), %rcx
 212 0056 6448330C 		xorq	%fs:40, %rcx
 212      25280000 
 212      00
 213 005f 7405     		je	.L12
 214 0061 E8000000 		call	__stack_chk_fail
 214      00
 215              	.L12:
 216 0066 C9       		leave
 217              		.cfi_def_cfa 7, 8
 218 0067 C3       		ret
 219              		.cfi_endproc
 220              	.LFE1972:
 222              		.weak	_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11co
 223              		.set	_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11com
 224              		.section	.text._ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_IL
 225              		.weak	_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EEl
 227              	_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EElLb1ELb1
 228              	.LFB1975:
 147:/usr/include/c++/5/chrono **** 	  {
 229              		.loc 1 147 0
 230              		.cfi_startproc
 231 0000 55       		pushq	%rbp
 232              		.cfi_def_cfa_offset 16
 233              		.cfi_offset 6, -16
 234 0001 4889E5   		movq	%rsp, %rbp
 235              		.cfi_def_cfa_register 6
 236 0004 4883EC30 		subq	$48, %rsp
 237 0008 48897DD8 		movq	%rdi, -40(%rbp)
 147:/usr/include/c++/5/chrono **** 	  {
 238              		.loc 1 147 0
 239 000c 64488B04 		movq	%fs:40, %rax
GAS LISTING /tmp/ccEjei2f.s 			page 17


 239      25280000 
 239      00
 240 0015 488945F8 		movq	%rax, -8(%rbp)
 241 0019 31C0     		xorl	%eax, %eax
 150:/usr/include/c++/5/chrono **** 	  }
 242              		.loc 1 150 0
 243 001b 488B45D8 		movq	-40(%rbp), %rax
 244 001f 4889C7   		movq	%rax, %rdi
 245 0022 E8000000 		call	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
 245      00
 246 0027 488945F0 		movq	%rax, -16(%rbp)
 247 002b 488D55F0 		leaq	-16(%rbp), %rdx
 248 002f 488D45E0 		leaq	-32(%rbp), %rax
 249 0033 4889D6   		movq	%rdx, %rsi
 250 0036 4889C7   		movq	%rax, %rdi
 251 0039 E8000000 		call	_ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_
 251      00
 252 003e 488B45E0 		movq	-32(%rbp), %rax
 151:/usr/include/c++/5/chrono ****       };
 253              		.loc 1 151 0
 254 0042 488B4DF8 		movq	-8(%rbp), %rcx
 255 0046 6448330C 		xorq	%fs:40, %rcx
 255      25280000 
 255      00
 256 004f 7405     		je	.L15
 257 0051 E8000000 		call	__stack_chk_fail
 257      00
 258              	.L15:
 259 0056 C9       		leave
 260              		.cfi_def_cfa 7, 8
 261 0057 C3       		ret
 262              		.cfi_endproc
 263              	.LFE1975:
 265              		.section	.text._ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9en
 266              		.weak	_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIX
 268              	_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXsrNS_13
 269              	.LFB1974:
 194:/usr/include/c++/5/chrono ****       {
 270              		.loc 1 194 0
 271              		.cfi_startproc
 272 0000 55       		pushq	%rbp
 273              		.cfi_def_cfa_offset 16
 274              		.cfi_offset 6, -16
 275 0001 4889E5   		movq	%rsp, %rbp
 276              		.cfi_def_cfa_register 6
 277 0004 4883EC10 		subq	$16, %rsp
 278 0008 48897DF8 		movq	%rdi, -8(%rbp)
 203:/usr/include/c++/5/chrono ****       }
 279              		.loc 1 203 0
 280 000c 488B45F8 		movq	-8(%rbp), %rax
 281 0010 4889C7   		movq	%rax, %rdi
 282 0013 E8000000 		call	_ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EElL
 282      00
 204:/usr/include/c++/5/chrono **** 
 283              		.loc 1 204 0
 284 0018 C9       		leave
 285              		.cfi_def_cfa 7, 8
GAS LISTING /tmp/ccEjei2f.s 			page 18


 286 0019 C3       		ret
 287              		.cfi_endproc
 288              	.LFE1974:
 290              		.section	.rodata
 291              	.LC0:
 292 0001 656E636F 		.string	"encode"
 292      646500
 293              	.LC1:
 294 0008 4578616D 		.string	"Example text"
 294      706C6520 
 294      74657874 
 294      00
 295              	.LC2:
 296 0015 6465636F 		.string	"decode"
 296      646500
 297 001c 00000000 		.align 8
 298              	.LC3:
 299 0020 2D2E2E2E 		.string	"-...---.-.-.---...-.---...---.---...-.---.---.-...-.---.-.-...-.......---...-...---.-.-.-
 299      2D2D2D2E 
 299      2D2E2D2E 
 299      2D2D2D2E 
 299      2E2E2D2E 
 300              	.LC5:
 301 0082 576F726B 		.string	"Worked for "
 301      65642066 
 301      6F722000 
 302              	.LC6:
 303 008e 207300   		.string	" s"
 304              		.text
 305              		.globl	main
 307              	main:
 308              	.LFB1965:
 309              		.file 3 "main.cpp"
   1:main.cpp      **** #include <iostream>
   2:main.cpp      **** #include "Decoder/Decoder.h"
   3:main.cpp      **** #include <chrono>
   4:main.cpp      **** 
   5:main.cpp      **** using namespace std;
   6:main.cpp      **** 
   7:main.cpp      **** int main(int argc, char **argv) {
 310              		.loc 3 7 0
 311              		.cfi_startproc
 312              		.cfi_personality 0x3,__gxx_personality_v0
 313              		.cfi_lsda 0x3,.LLSDA1965
 314 0000 55       		pushq	%rbp
 315              		.cfi_def_cfa_offset 16
 316              		.cfi_offset 6, -16
 317 0001 4889E5   		movq	%rsp, %rbp
 318              		.cfi_def_cfa_register 6
 319 0004 53       		pushq	%rbx
 320 0005 4881EC08 		subq	$264, %rsp
 320      010000
 321              		.cfi_offset 3, -24
 322 000c 89BD0CFF 		movl	%edi, -244(%rbp)
 322      FFFF
 323 0012 4889B500 		movq	%rsi, -256(%rbp)
 323      FFFFFF
GAS LISTING /tmp/ccEjei2f.s 			page 19


 324              		.loc 3 7 0
 325 0019 64488B04 		movq	%fs:40, %rax
 325      25280000 
 325      00
 326 0022 488945E8 		movq	%rax, -24(%rbp)
 327 0026 31C0     		xorl	%eax, %eax
   8:main.cpp      ****     if (argc != 2)
 328              		.loc 3 8 0
 329 0028 83BD0CFF 		cmpl	$2, -244(%rbp)
 329      FFFF02
 330 002f 740A     		je	.L19
   9:main.cpp      ****         return 1;
 331              		.loc 3 9 0
 332 0031 BB010000 		movl	$1, %ebx
 332      00
 333 0036 E9290200 		jmp	.L23
 333      00
 334              	.L19:
  10:main.cpp      **** 
  11:main.cpp      ****     auto d = Decoder();
 335              		.loc 3 11 0
 336 003b 488D8560 		leaq	-160(%rbp), %rax
 336      FFFFFF
 337 0042 4889C7   		movq	%rax, %rdi
 338              	.LEHB0:
 339 0045 E8000000 		call	_ZN7DecoderC1Ev
 339      00
 340              	.LEHE0:
  12:main.cpp      **** 
  13:main.cpp      ****     auto begin = chrono::high_resolution_clock::now();
 341              		.loc 3 13 0
 342 004a E8000000 		call	_ZNSt6chrono3_V212system_clock3nowEv
 342      00
 343 004f 48898520 		movq	%rax, -224(%rbp)
 343      FFFFFF
  14:main.cpp      **** 
  15:main.cpp      ****     string encodeOrDecode = argv[1];
 344              		.loc 3 15 0
 345 0056 488D8550 		leaq	-176(%rbp), %rax
 345      FFFFFF
 346 005d 4889C7   		movq	%rax, %rdi
 347 0060 E8000000 		call	_ZNSaIcEC1Ev
 347      00
 348 0065 488B8500 		movq	-256(%rbp), %rax
 348      FFFFFF
 349 006c 4883C008 		addq	$8, %rax
 350 0070 488B08   		movq	(%rax), %rcx
 351 0073 488D9550 		leaq	-176(%rbp), %rdx
 351      FFFFFF
 352 007a 488D4580 		leaq	-128(%rbp), %rax
 353 007e 4889CE   		movq	%rcx, %rsi
 354 0081 4889C7   		movq	%rax, %rdi
 355              	.LEHB1:
 356 0084 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
 356      00
 357              	.LEHE1:
 358              		.loc 3 15 0 is_stmt 0 discriminator 1
GAS LISTING /tmp/ccEjei2f.s 			page 20


 359 0089 488D8550 		leaq	-176(%rbp), %rax
 359      FFFFFF
 360 0090 4889C7   		movq	%rax, %rdi
 361 0093 E8000000 		call	_ZNSaIcED1Ev
 361      00
  16:main.cpp      ****     const int runsNumber = 1000000;
 362              		.loc 3 16 0 is_stmt 1 discriminator 1
 363 0098 C7851CFF 		movl	$1000000, -228(%rbp)
 363      FFFF4042 
 363      0F00
  17:main.cpp      **** 
  18:main.cpp      ****     if (encodeOrDecode == "encode")
 364              		.loc 3 18 0 discriminator 1
 365 00a2 488D4580 		leaq	-128(%rbp), %rax
 366 00a6 BE000000 		movl	$.LC0, %esi
 366      00
 367 00ab 4889C7   		movq	%rax, %rdi
 368              	.LEHB2:
 369 00ae E8000000 		call	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_
 369      00
 370              	.LEHE2:
 371 00b3 84C0     		testb	%al, %al
 372 00b5 7461     		je	.L21
  19:main.cpp      ****         d.codeBig("Example text", true, runsNumber);    // Encode
 373              		.loc 3 19 0
 374 00b7 488D8550 		leaq	-176(%rbp), %rax
 374      FFFFFF
 375 00be 4889C7   		movq	%rax, %rdi
 376 00c1 E8000000 		call	_ZNSaIcEC1Ev
 376      00
 377 00c6 488D9550 		leaq	-176(%rbp), %rdx
 377      FFFFFF
 378 00cd 488D45A0 		leaq	-96(%rbp), %rax
 379 00d1 BE000000 		movl	$.LC1, %esi
 379      00
 380 00d6 4889C7   		movq	%rax, %rdi
 381              	.LEHB3:
 382 00d9 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
 382      00
 383              	.LEHE3:
 384              		.loc 3 19 0 is_stmt 0 discriminator 2
 385 00de 488D75A0 		leaq	-96(%rbp), %rsi
 386 00e2 488D8560 		leaq	-160(%rbp), %rax
 386      FFFFFF
 387 00e9 B940420F 		movl	$1000000, %ecx
 387      00
 388 00ee BA010000 		movl	$1, %edx
 388      00
 389 00f3 4889C7   		movq	%rax, %rdi
 390              	.LEHB4:
 391 00f6 E8000000 		call	_ZN7Decoder7codeBigENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbi
 391      00
 392              	.LEHE4:
 393              		.loc 3 19 0 discriminator 4
 394 00fb 488D45A0 		leaq	-96(%rbp), %rax
 395 00ff 4889C7   		movq	%rax, %rdi
 396 0102 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
GAS LISTING /tmp/ccEjei2f.s 			page 21


 396      00
 397 0107 488D8550 		leaq	-176(%rbp), %rax
 397      FFFFFF
 398 010e 4889C7   		movq	%rax, %rdi
 399 0111 E8000000 		call	_ZNSaIcED1Ev
 399      00
 400 0116 EB74     		jmp	.L22
 401              	.L21:
  20:main.cpp      ****     else if (encodeOrDecode == "decode")
 402              		.loc 3 20 0 is_stmt 1
 403 0118 488D4580 		leaq	-128(%rbp), %rax
 404 011c BE000000 		movl	$.LC2, %esi
 404      00
 405 0121 4889C7   		movq	%rax, %rdi
 406              	.LEHB5:
 407 0124 E8000000 		call	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_
 407      00
 408              	.LEHE5:
 409 0129 84C0     		testb	%al, %al
 410 012b 745F     		je	.L22
  21:main.cpp      ****         d.codeBig("-...---.-.-.---...-.---...---.---...-.---.---.-...-.---.-.-...-.......---...-...
 411              		.loc 3 21 0
 412 012d 488D8550 		leaq	-176(%rbp), %rax
 412      FFFFFF
 413 0134 4889C7   		movq	%rax, %rdi
 414 0137 E8000000 		call	_ZNSaIcEC1Ev
 414      00
 415 013c 488D9550 		leaq	-176(%rbp), %rdx
 415      FFFFFF
 416 0143 488D45C0 		leaq	-64(%rbp), %rax
 417 0147 BE000000 		movl	$.LC3, %esi
 417      00
 418 014c 4889C7   		movq	%rax, %rdi
 419              	.LEHB6:
 420 014f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
 420      00
 421              	.LEHE6:
 422              		.loc 3 21 0 is_stmt 0 discriminator 2
 423 0154 488D75C0 		leaq	-64(%rbp), %rsi
 424 0158 488D8560 		leaq	-160(%rbp), %rax
 424      FFFFFF
 425 015f B940420F 		movl	$1000000, %ecx
 425      00
 426 0164 BA000000 		movl	$0, %edx
 426      00
 427 0169 4889C7   		movq	%rax, %rdi
 428              	.LEHB7:
 429 016c E8000000 		call	_ZN7Decoder7codeBigENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbi
 429      00
 430              	.LEHE7:
 431              		.loc 3 21 0 discriminator 4
 432 0171 488D45C0 		leaq	-64(%rbp), %rax
 433 0175 4889C7   		movq	%rax, %rdi
 434 0178 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 434      00
 435 017d 488D8550 		leaq	-176(%rbp), %rax
 435      FFFFFF
GAS LISTING /tmp/ccEjei2f.s 			page 22


 436 0184 4889C7   		movq	%rax, %rdi
 437 0187 E8000000 		call	_ZNSaIcED1Ev
 437      00
 438              	.L22:
  22:main.cpp      **** 
  23:main.cpp      ****     auto end = chrono::high_resolution_clock::now();
 439              		.loc 3 23 0 is_stmt 1
 440 018c E8000000 		call	_ZNSt6chrono3_V212system_clock3nowEv
 440      00
 441 0191 48898530 		movq	%rax, -208(%rbp)
 441      FFFFFF
  24:main.cpp      ****     auto time = chrono::duration_cast<std::chrono::nanoseconds>(end - begin).count() / 1000000000.0
 442              		.loc 3 24 0
 443 0198 488D9520 		leaq	-224(%rbp), %rdx
 443      FFFFFF
 444 019f 488D8530 		leaq	-208(%rbp), %rax
 444      FFFFFF
 445 01a6 4889D6   		movq	%rdx, %rsi
 446 01a9 4889C7   		movq	%rax, %rdi
 447 01ac E8000000 		call	_ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11com
 447      00
 448 01b1 48898540 		movq	%rax, -192(%rbp)
 448      FFFFFF
 449 01b8 488D8540 		leaq	-192(%rbp), %rax
 449      FFFFFF
 450 01bf 4889C7   		movq	%rax, %rdi
 451 01c2 E8000000 		call	_ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXs
 451      00
 452 01c7 48898550 		movq	%rax, -176(%rbp)
 452      FFFFFF
 453 01ce 488D8550 		leaq	-176(%rbp), %rax
 453      FFFFFF
 454 01d5 4889C7   		movq	%rax, %rdi
 455 01d8 E8000000 		call	_ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
 455      00
 456 01dd 660FEFC0 		pxor	%xmm0, %xmm0
 457 01e1 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 457      C0
 458 01e6 F20F100D 		movsd	.LC4(%rip), %xmm1
 458      00000000 
 459 01ee F20F5EC1 		divsd	%xmm1, %xmm0
 460 01f2 F20F1185 		movsd	%xmm0, -168(%rbp)
 460      58FFFFFF 
  25:main.cpp      ****     cout << "Worked for " << time << " s" << endl;
 461              		.loc 3 25 0
 462 01fa BE000000 		movl	$.LC5, %esi
 462      00
 463 01ff BF000000 		movl	$_ZSt4cout, %edi
 463      00
 464              	.LEHB8:
 465 0204 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 465      00
 466 0209 4889C2   		movq	%rax, %rdx
 467 020c 488B8558 		movq	-168(%rbp), %rax
 467      FFFFFF
 468 0213 488985F8 		movq	%rax, -264(%rbp)
 468      FEFFFF
GAS LISTING /tmp/ccEjei2f.s 			page 23


 469 021a F20F1085 		movsd	-264(%rbp), %xmm0
 469      F8FEFFFF 
 470 0222 4889D7   		movq	%rdx, %rdi
 471 0225 E8000000 		call	_ZNSolsEd
 471      00
 472              		.loc 3 25 0 is_stmt 0 discriminator 1
 473 022a BE000000 		movl	$.LC6, %esi
 473      00
 474 022f 4889C7   		movq	%rax, %rdi
 475 0232 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 475      00
 476              		.loc 3 25 0 discriminator 2
 477 0237 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 477      00
 478 023c 4889C7   		movq	%rax, %rdi
 479 023f E8000000 		call	_ZNSolsEPFRSoS_E
 479      00
 480              	.LEHE8:
  26:main.cpp      **** 
  27:main.cpp      **** //    cout << d.decode("-.-.-...---.---.---...---.---...-.......---...-...---.-.-.---...---") << en
  28:main.cpp      ****     return 0;
 481              		.loc 3 28 0 is_stmt 1
 482 0244 BB000000 		movl	$0, %ebx
 482      00
  15:main.cpp      ****     const int runsNumber = 1000000;
 483              		.loc 3 15 0
 484 0249 488D4580 		leaq	-128(%rbp), %rax
 485 024d 4889C7   		movq	%rax, %rdi
 486 0250 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 486      00
  11:main.cpp      **** 
 487              		.loc 3 11 0
 488 0255 488D8560 		leaq	-160(%rbp), %rax
 488      FFFFFF
 489 025c 4889C7   		movq	%rax, %rdi
 490 025f E8000000 		call	_ZN7DecoderD1Ev
 490      00
 491              	.L23:
 492 0264 89D8     		movl	%ebx, %eax
  29:main.cpp      **** }...
 493              		.loc 3 29 0 discriminator 1
 494 0266 488B4DE8 		movq	-24(%rbp), %rcx
 495 026a 6448330C 		xorq	%fs:40, %rcx
 495      25280000 
 495      00
 496 0273 0F849100 		je	.L31
 496      0000
 497 0279 E9870000 		jmp	.L38
 497      00
 498              	.L32:
 499 027e 4889C3   		movq	%rax, %rbx
 500 0281 488D8550 		leaq	-176(%rbp), %rax
 500      FFFFFF
 501 0288 4889C7   		movq	%rax, %rdi
 502 028b E8000000 		call	_ZNSaIcED1Ev
 502      00
 503 0290 EB59     		jmp	.L25
GAS LISTING /tmp/ccEjei2f.s 			page 24


 504              	.L35:
 505 0292 4889C3   		movq	%rax, %rbx
  19:main.cpp      ****         d.codeBig("Example text", true, runsNumber);    // Encode
 506              		.loc 3 19 0
 507 0295 488D45A0 		leaq	-96(%rbp), %rax
 508 0299 4889C7   		movq	%rax, %rdi
 509 029c E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 509      00
 510 02a1 EB03     		jmp	.L27
 511              	.L34:
 512 02a3 4889C3   		movq	%rax, %rbx
 513              	.L27:
  19:main.cpp      ****         d.codeBig("Example text", true, runsNumber);    // Encode
 514              		.loc 3 19 0 is_stmt 0 discriminator 1
 515 02a6 488D8550 		leaq	-176(%rbp), %rax
 515      FFFFFF
 516 02ad 4889C7   		movq	%rax, %rdi
 517 02b0 E8000000 		call	_ZNSaIcED1Ev
 517      00
 518 02b5 EB28     		jmp	.L28
 519              	.L37:
 520 02b7 4889C3   		movq	%rax, %rbx
  21:main.cpp      ****         d.codeBig("-...---.-.-.---...-.---...---.---...-.---.---.-...-.---.-.-...-.......---...-...
 521              		.loc 3 21 0 is_stmt 1
 522 02ba 488D45C0 		leaq	-64(%rbp), %rax
 523 02be 4889C7   		movq	%rax, %rdi
 524 02c1 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 524      00
 525 02c6 EB03     		jmp	.L30
 526              	.L36:
 527 02c8 4889C3   		movq	%rax, %rbx
 528              	.L30:
  21:main.cpp      ****         d.codeBig("-...---.-.-.---...-.---...---.---...-.---.---.-...-.---.-.-...-.......---...-...
 529              		.loc 3 21 0 is_stmt 0 discriminator 1
 530 02cb 488D8550 		leaq	-176(%rbp), %rax
 530      FFFFFF
 531 02d2 4889C7   		movq	%rax, %rdi
 532 02d5 E8000000 		call	_ZNSaIcED1Ev
 532      00
 533 02da EB03     		jmp	.L28
 534              	.L33:
 535 02dc 4889C3   		movq	%rax, %rbx
 536              	.L28:
  15:main.cpp      ****     string encodeOrDecode = argv[1];
 537              		.loc 3 15 0 is_stmt 1
 538 02df 488D4580 		leaq	-128(%rbp), %rax
 539 02e3 4889C7   		movq	%rax, %rdi
 540 02e6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 540      00
 541              	.L25:
  11:main.cpp      ****     auto d = Decoder();
 542              		.loc 3 11 0
 543 02eb 488D8560 		leaq	-160(%rbp), %rax
 543      FFFFFF
 544 02f2 4889C7   		movq	%rax, %rdi
 545 02f5 E8000000 		call	_ZN7DecoderD1Ev
 545      00
GAS LISTING /tmp/ccEjei2f.s 			page 25


 546 02fa 4889D8   		movq	%rbx, %rax
 547 02fd 4889C7   		movq	%rax, %rdi
 548              	.LEHB9:
 549 0300 E8000000 		call	_Unwind_Resume
 549      00
 550              	.LEHE9:
 551              	.L38:
 552              		.loc 3 29 0
 553 0305 E8000000 		call	__stack_chk_fail
 553      00
 554              	.L31:
 555 030a 4881C408 		addq	$264, %rsp
 555      010000
 556 0311 5B       		popq	%rbx
 557 0312 5D       		popq	%rbp
 558              		.cfi_def_cfa 7, 8
 559 0313 C3       		ret
 560              		.cfi_endproc
 561              	.LFE1965:
 562              		.globl	__gxx_personality_v0
 563              		.section	.gcc_except_table,"a",@progbits
 564              	.LLSDA1965:
 565 0000 FF       		.byte	0xff
 566 0001 FF       		.byte	0xff
 567 0002 01       		.byte	0x1
 568 0003 39       		.uleb128 .LLSDACSE1965-.LLSDACSB1965
 569              	.LLSDACSB1965:
 570 0004 45       		.uleb128 .LEHB0-.LFB1965
 571 0005 05       		.uleb128 .LEHE0-.LEHB0
 572 0006 00       		.uleb128 0
 573 0007 00       		.uleb128 0
 574 0008 8401     		.uleb128 .LEHB1-.LFB1965
 575 000a 05       		.uleb128 .LEHE1-.LEHB1
 576 000b FE04     		.uleb128 .L32-.LFB1965
 577 000d 00       		.uleb128 0
 578 000e AE01     		.uleb128 .LEHB2-.LFB1965
 579 0010 05       		.uleb128 .LEHE2-.LEHB2
 580 0011 DC05     		.uleb128 .L33-.LFB1965
 581 0013 00       		.uleb128 0
 582 0014 D901     		.uleb128 .LEHB3-.LFB1965
 583 0016 05       		.uleb128 .LEHE3-.LEHB3
 584 0017 A305     		.uleb128 .L34-.LFB1965
 585 0019 00       		.uleb128 0
 586 001a F601     		.uleb128 .LEHB4-.LFB1965
 587 001c 05       		.uleb128 .LEHE4-.LEHB4
 588 001d 9205     		.uleb128 .L35-.LFB1965
 589 001f 00       		.uleb128 0
 590 0020 A402     		.uleb128 .LEHB5-.LFB1965
 591 0022 05       		.uleb128 .LEHE5-.LEHB5
 592 0023 DC05     		.uleb128 .L33-.LFB1965
 593 0025 00       		.uleb128 0
 594 0026 CF02     		.uleb128 .LEHB6-.LFB1965
 595 0028 05       		.uleb128 .LEHE6-.LEHB6
 596 0029 C805     		.uleb128 .L36-.LFB1965
 597 002b 00       		.uleb128 0
 598 002c EC02     		.uleb128 .LEHB7-.LFB1965
 599 002e 05       		.uleb128 .LEHE7-.LEHB7
GAS LISTING /tmp/ccEjei2f.s 			page 26


 600 002f B705     		.uleb128 .L37-.LFB1965
 601 0031 00       		.uleb128 0
 602 0032 8404     		.uleb128 .LEHB8-.LFB1965
 603 0034 40       		.uleb128 .LEHE8-.LEHB8
 604 0035 DC05     		.uleb128 .L33-.LFB1965
 605 0037 00       		.uleb128 0
 606 0038 8006     		.uleb128 .LEHB9-.LFB1965
 607 003a 05       		.uleb128 .LEHE9-.LEHB9
 608 003b 00       		.uleb128 0
 609 003c 00       		.uleb128 0
 610              	.LLSDACSE1965:
 611              		.text
 613              		.section	.text._ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorIN7De
 614              		.align 2
 615              		.weak	_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev
 617              	_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev:
 618              	.LFB2039:
 619              		.file 4 "/usr/include/c++/5/bits/stl_vector.h"
   1:/usr/include/c++/5/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_vector.h **** 
   3:/usr/include/c++/5/bits/stl_vector.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_vector.h **** //
   5:/usr/include/c++/5/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_vector.h **** 
  11:/usr/include/c++/5/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_vector.h **** 
  16:/usr/include/c++/5/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_vector.h **** 
  20:/usr/include/c++/5/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_vector.h **** 
  25:/usr/include/c++/5/bits/stl_vector.h **** /*
  26:/usr/include/c++/5/bits/stl_vector.h ****  *
  27:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_vector.h ****  *
  30:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_vector.h ****  *
  38:/usr/include/c++/5/bits/stl_vector.h ****  *
  39:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1996
GAS LISTING /tmp/ccEjei2f.s 			page 27


  40:/usr/include/c++/5/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_vector.h ****  *
  42:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_vector.h ****  */
  50:/usr/include/c++/5/bits/stl_vector.h **** 
  51:/usr/include/c++/5/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/5/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/stl_vector.h ****  */
  55:/usr/include/c++/5/bits/stl_vector.h **** 
  56:/usr/include/c++/5/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/5/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/5/bits/stl_vector.h **** 
  59:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/5/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/5/bits/stl_vector.h **** #endif
  65:/usr/include/c++/5/bits/stl_vector.h **** 
  66:/usr/include/c++/5/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/5/bits/stl_vector.h **** {
  68:/usr/include/c++/5/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/5/bits/stl_vector.h **** 
  70:/usr/include/c++/5/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/5/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/5/bits/stl_vector.h ****     {
  74:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/5/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/5/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/5/bits/stl_vector.h **** 
  79:/usr/include/c++/5/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/5/bits/stl_vector.h ****       {
  82:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/5/bits/stl_vector.h **** 
  86:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  88:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/5/bits/stl_vector.h **** 
  90:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  92:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/5/bits/stl_vector.h **** 
  94:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
GAS LISTING /tmp/ccEjei2f.s 			page 28


  97:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
  98:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/5/bits/stl_vector.h **** #endif
 100:/usr/include/c++/5/bits/stl_vector.h **** 
 101:/usr/include/c++/5/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/5/bits/stl_vector.h **** 	{
 103:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/5/bits/stl_vector.h **** 	}
 107:/usr/include/c++/5/bits/stl_vector.h ****       };
 108:/usr/include/c++/5/bits/stl_vector.h ****       
 109:/usr/include/c++/5/bits/stl_vector.h ****     public:
 110:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/5/bits/stl_vector.h **** 
 112:/usr/include/c++/5/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/5/bits/stl_vector.h **** 
 116:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/5/bits/stl_vector.h **** 
 120:/usr/include/c++/5/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/5/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/5/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/5/bits/stl_vector.h **** 
 124:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/5/bits/stl_vector.h **** 
 127:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/5/bits/stl_vector.h **** 
 130:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/5/bits/stl_vector.h **** 
 134:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/5/bits/stl_vector.h **** 
 138:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/5/bits/stl_vector.h **** 
 142:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/5/bits/stl_vector.h **** 
 146:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/5/bits/stl_vector.h ****       {
 149:/usr/include/c++/5/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/5/bits/stl_vector.h **** 	else
 152:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/5/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
GAS LISTING /tmp/ccEjei2f.s 			page 29


 154:/usr/include/c++/5/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/5/bits/stl_vector.h ****       }
 157:/usr/include/c++/5/bits/stl_vector.h **** #endif
 158:/usr/include/c++/5/bits/stl_vector.h **** 
 159:/usr/include/c++/5/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/5/bits/stl_vector.h **** 
 163:/usr/include/c++/5/bits/stl_vector.h ****     public:
 164:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/5/bits/stl_vector.h **** 
 166:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/5/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/5/bits/stl_vector.h ****       {
 169:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/5/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 171:/usr/include/c++/5/bits/stl_vector.h ****       }
 172:/usr/include/c++/5/bits/stl_vector.h **** 
 173:/usr/include/c++/5/bits/stl_vector.h ****       void
 174:/usr/include/c++/5/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/5/bits/stl_vector.h ****       {
 176:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/5/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/5/bits/stl_vector.h ****       }
 180:/usr/include/c++/5/bits/stl_vector.h **** 
 181:/usr/include/c++/5/bits/stl_vector.h ****     private:
 182:/usr/include/c++/5/bits/stl_vector.h ****       void
 183:/usr/include/c++/5/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/5/bits/stl_vector.h ****       {
 185:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/5/bits/stl_vector.h ****       }
 189:/usr/include/c++/5/bits/stl_vector.h ****     };
 190:/usr/include/c++/5/bits/stl_vector.h **** 
 191:/usr/include/c++/5/bits/stl_vector.h **** 
 192:/usr/include/c++/5/bits/stl_vector.h ****   /**
 193:/usr/include/c++/5/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/5/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/5/bits/stl_vector.h ****    *
 196:/usr/include/c++/5/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/5/bits/stl_vector.h ****    *
 198:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/5/bits/stl_vector.h ****    *
 201:/usr/include/c++/5/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/5/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/5/bits/stl_vector.h ****    *
 207:/usr/include/c++/5/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/5/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/5/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/5/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
GAS LISTING /tmp/ccEjei2f.s 			page 30


 211:/usr/include/c++/5/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/5/bits/stl_vector.h ****   */
 213:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/5/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/5/bits/stl_vector.h ****     {
 216:/usr/include/c++/5/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/5/bits/stl_vector.h ****       
 221:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/5/bits/stl_vector.h **** 
 225:/usr/include/c++/5/bits/stl_vector.h ****     public:
 226:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/5/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/5/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/5/bits/stl_vector.h **** 
 240:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/5/bits/stl_vector.h **** 
 246:/usr/include/c++/5/bits/stl_vector.h ****     public:
 247:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/5/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/5/bits/stl_vector.h **** 
 250:/usr/include/c++/5/bits/stl_vector.h ****       /**
 251:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/5/bits/stl_vector.h ****        */
 253:/usr/include/c++/5/bits/stl_vector.h ****       vector()
 254:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/5/bits/stl_vector.h **** #endif
 257:/usr/include/c++/5/bits/stl_vector.h ****       : _Base() { }
 258:/usr/include/c++/5/bits/stl_vector.h **** 
 259:/usr/include/c++/5/bits/stl_vector.h ****       /**
 260:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/5/bits/stl_vector.h ****        */
 263:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 264:/usr/include/c++/5/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/5/bits/stl_vector.h **** 
 267:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccEjei2f.s 			page 31


 268:/usr/include/c++/5/bits/stl_vector.h ****       /**
 269:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/5/bits/stl_vector.h ****        *
 273:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/5/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/5/bits/stl_vector.h ****        */
 276:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/5/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/5/bits/stl_vector.h **** 
 281:/usr/include/c++/5/bits/stl_vector.h ****       /**
 282:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/5/bits/stl_vector.h ****        *
 287:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/5/bits/stl_vector.h ****        */
 289:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/5/bits/stl_vector.h **** #else
 294:/usr/include/c++/5/bits/stl_vector.h ****       /**
 295:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/5/bits/stl_vector.h ****        *
 300:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/5/bits/stl_vector.h ****        */
 302:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/5/bits/stl_vector.h **** #endif
 308:/usr/include/c++/5/bits/stl_vector.h **** 
 309:/usr/include/c++/5/bits/stl_vector.h ****       /**
 310:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/5/bits/stl_vector.h ****        *
 313:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/5/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/5/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/5/bits/stl_vector.h ****        */
 318:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/5/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
GAS LISTING /tmp/ccEjei2f.s 			page 32


 325:/usr/include/c++/5/bits/stl_vector.h ****       }
 326:/usr/include/c++/5/bits/stl_vector.h **** 
 327:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/5/bits/stl_vector.h ****       /**
 329:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/5/bits/stl_vector.h ****        *
 332:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/5/bits/stl_vector.h ****        */
 335:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/5/bits/stl_vector.h **** 
 338:/usr/include/c++/5/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/5/bits/stl_vector.h ****       }
 346:/usr/include/c++/5/bits/stl_vector.h **** 
 347:/usr/include/c++/5/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/5/bits/stl_vector.h ****       {
 352:/usr/include/c++/5/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/5/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/5/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/5/bits/stl_vector.h ****       }
 361:/usr/include/c++/5/bits/stl_vector.h **** 
 362:/usr/include/c++/5/bits/stl_vector.h ****       /**
 363:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/5/bits/stl_vector.h ****        *
 367:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/5/bits/stl_vector.h ****        *
 370:/usr/include/c++/5/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/5/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/5/bits/stl_vector.h ****        */
 373:/usr/include/c++/5/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/5/bits/stl_vector.h ****       {
 377:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:/usr/include/c++/5/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/5/bits/stl_vector.h ****       }
 380:/usr/include/c++/5/bits/stl_vector.h **** #endif
 381:/usr/include/c++/5/bits/stl_vector.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 33


 382:/usr/include/c++/5/bits/stl_vector.h ****       /**
 383:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/5/bits/stl_vector.h ****        *
 388:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/5/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/5/bits/stl_vector.h ****        *
 391:/usr/include/c++/5/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/5/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/5/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/5/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/5/bits/stl_vector.h ****        */
 398:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/5/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/5/bits/stl_vector.h **** #else
 406:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/5/bits/stl_vector.h ****         {
 411:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/5/bits/stl_vector.h **** 	}
 415:/usr/include/c++/5/bits/stl_vector.h **** #endif
 416:/usr/include/c++/5/bits/stl_vector.h **** 
 417:/usr/include/c++/5/bits/stl_vector.h ****       /**
 418:/usr/include/c++/5/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/5/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/5/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/5/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/5/bits/stl_vector.h ****        */
 423:/usr/include/c++/5/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 620              		.loc 4 423 0
 621              		.cfi_startproc
 622              		.cfi_personality 0x3,__gxx_personality_v0
 623              		.cfi_lsda 0x3,.LLSDA2039
 624 0000 55       		pushq	%rbp
 625              		.cfi_def_cfa_offset 16
 626              		.cfi_offset 6, -16
 627 0001 4889E5   		movq	%rsp, %rbp
 628              		.cfi_def_cfa_register 6
 629 0004 4883EC10 		subq	$16, %rsp
 630 0008 48897DF8 		movq	%rdi, -8(%rbp)
 631              	.LBB4:
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/5/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 632              		.loc 4 425 0
GAS LISTING /tmp/ccEjei2f.s 			page 34


 633 000c 488B45F8 		movq	-8(%rbp), %rax
 634 0010 4889C7   		movq	%rax, %rdi
 635 0013 E8000000 		call	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv
 635      00
 636 0018 4889C2   		movq	%rax, %rdx
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 637              		.loc 4 424 0
 638 001b 488B45F8 		movq	-8(%rbp), %rax
 639 001f 488B4808 		movq	8(%rax), %rcx
 640 0023 488B45F8 		movq	-8(%rbp), %rax
 641 0027 488B00   		movq	(%rax), %rax
 642 002a 4889CE   		movq	%rcx, %rsi
 643 002d 4889C7   		movq	%rax, %rdi
 644 0030 E8000000 		call	_ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E
 644      00
 645              		.loc 4 425 0
 646 0035 488B45F8 		movq	-8(%rbp), %rax
 647 0039 4889C7   		movq	%rax, %rdi
 648 003c E8000000 		call	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev
 648      00
 649              	.LBE4:
 650 0041 90       		nop
 651 0042 C9       		leave
 652              		.cfi_def_cfa 7, 8
 653 0043 C3       		ret
 654              		.cfi_endproc
 655              	.LFE2039:
 656              		.section	.gcc_except_table
 657              	.LLSDA2039:
 658 003d FF       		.byte	0xff
 659 003e FF       		.byte	0xff
 660 003f 01       		.byte	0x1
 661 0040 00       		.uleb128 .LLSDACSE2039-.LLSDACSB2039
 662              	.LLSDACSB2039:
 663              	.LLSDACSE2039:
 664              		.section	.text._ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorIN7De
 666              		.weak	_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED1Ev
 667              		.set	_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED1Ev,_ZNSt6vectorIN7Decoder12morse_symbolESaIS1_
 668              		.section	.text._ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_,"axG",
 669              		.weak	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_
 671              	_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_:
 672              	.LFB2054:
 673              		.file 5 "/usr/include/c++/5/bits/basic_string.h"
   1:/usr/include/c++/5/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/5/bits/basic_string.h **** 
   3:/usr/include/c++/5/bits/basic_string.h **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/basic_string.h **** //
   5:/usr/include/c++/5/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/5/bits/basic_string.h **** 
  11:/usr/include/c++/5/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/basic_string.h **** // GNU General Public License for more details.
GAS LISTING /tmp/ccEjei2f.s 			page 35


  15:/usr/include/c++/5/bits/basic_string.h **** 
  16:/usr/include/c++/5/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/basic_string.h **** 
  20:/usr/include/c++/5/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/basic_string.h **** 
  25:/usr/include/c++/5/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/5/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/5/bits/basic_string.h ****  */
  29:/usr/include/c++/5/bits/basic_string.h **** 
  30:/usr/include/c++/5/bits/basic_string.h **** //
  31:/usr/include/c++/5/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/5/bits/basic_string.h **** //
  33:/usr/include/c++/5/bits/basic_string.h **** 
  34:/usr/include/c++/5/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/5/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/5/bits/basic_string.h **** 
  37:/usr/include/c++/5/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/5/bits/basic_string.h **** 
  39:/usr/include/c++/5/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/5/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/5/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
  43:/usr/include/c++/5/bits/basic_string.h **** #include <initializer_list>
  44:/usr/include/c++/5/bits/basic_string.h **** #endif
  45:/usr/include/c++/5/bits/basic_string.h **** 
  46:/usr/include/c++/5/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/5/bits/basic_string.h **** {
  48:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/5/bits/basic_string.h **** 
  50:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  52:/usr/include/c++/5/bits/basic_string.h ****   /**
  53:/usr/include/c++/5/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  54:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  55:/usr/include/c++/5/bits/basic_string.h ****    *
  56:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup strings
  57:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup sequences
  58:/usr/include/c++/5/bits/basic_string.h ****    *
  59:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  60:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/5/bits/basic_string.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  63:/usr/include/c++/5/bits/basic_string.h ****    *
  64:/usr/include/c++/5/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  65:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  66:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  67:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  68:/usr/include/c++/5/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  69:/usr/include/c++/5/bits/basic_string.h ****    */
  70:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  71:/usr/include/c++/5/bits/basic_string.h ****     class basic_string
GAS LISTING /tmp/ccEjei2f.s 			page 36


  72:/usr/include/c++/5/bits/basic_string.h ****     {
  73:/usr/include/c++/5/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  74:/usr/include/c++/5/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  75:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  76:/usr/include/c++/5/bits/basic_string.h **** 
  77:/usr/include/c++/5/bits/basic_string.h ****       // Types:
  78:/usr/include/c++/5/bits/basic_string.h ****     public:
  79:/usr/include/c++/5/bits/basic_string.h ****       typedef _Traits					traits_type;
  80:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  81:/usr/include/c++/5/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  82:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  83:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  84:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  85:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  86:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  87:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  88:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  89:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  90:/usr/include/c++/5/bits/basic_string.h **** 							const_iterator;
  91:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  92:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  93:/usr/include/c++/5/bits/basic_string.h **** 
  94:/usr/include/c++/5/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
  95:/usr/include/c++/5/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
  96:/usr/include/c++/5/bits/basic_string.h **** 
  97:/usr/include/c++/5/bits/basic_string.h ****     private:
  98:/usr/include/c++/5/bits/basic_string.h ****       // type used for positions in insert, erase etc.
  99:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus < 201103L
 100:/usr/include/c++/5/bits/basic_string.h ****       typedef iterator __const_iterator;
 101:/usr/include/c++/5/bits/basic_string.h **** #else
 102:/usr/include/c++/5/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 103:/usr/include/c++/5/bits/basic_string.h **** #endif
 104:/usr/include/c++/5/bits/basic_string.h **** 
 105:/usr/include/c++/5/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 106:/usr/include/c++/5/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 107:/usr/include/c++/5/bits/basic_string.h ****       {
 108:/usr/include/c++/5/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 109:/usr/include/c++/5/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 110:/usr/include/c++/5/bits/basic_string.h **** 
 111:/usr/include/c++/5/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 112:/usr/include/c++/5/bits/basic_string.h ****       };
 113:/usr/include/c++/5/bits/basic_string.h **** 
 114:/usr/include/c++/5/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 115:/usr/include/c++/5/bits/basic_string.h ****       size_type		_M_string_length;
 116:/usr/include/c++/5/bits/basic_string.h **** 
 117:/usr/include/c++/5/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 118:/usr/include/c++/5/bits/basic_string.h **** 
 119:/usr/include/c++/5/bits/basic_string.h ****       union
 120:/usr/include/c++/5/bits/basic_string.h ****       {
 121:/usr/include/c++/5/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 122:/usr/include/c++/5/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 123:/usr/include/c++/5/bits/basic_string.h ****       };
 124:/usr/include/c++/5/bits/basic_string.h **** 
 125:/usr/include/c++/5/bits/basic_string.h ****       void
 126:/usr/include/c++/5/bits/basic_string.h ****       _M_data(pointer __p)
 127:/usr/include/c++/5/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 128:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 37


 129:/usr/include/c++/5/bits/basic_string.h ****       void
 130:/usr/include/c++/5/bits/basic_string.h ****       _M_length(size_type __length)
 131:/usr/include/c++/5/bits/basic_string.h ****       { _M_string_length = __length; }
 132:/usr/include/c++/5/bits/basic_string.h **** 
 133:/usr/include/c++/5/bits/basic_string.h ****       pointer
 134:/usr/include/c++/5/bits/basic_string.h ****       _M_data() const
 135:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 136:/usr/include/c++/5/bits/basic_string.h **** 
 137:/usr/include/c++/5/bits/basic_string.h ****       pointer
 138:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data()
 139:/usr/include/c++/5/bits/basic_string.h ****       {
 140:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 142:/usr/include/c++/5/bits/basic_string.h **** #else
 143:/usr/include/c++/5/bits/basic_string.h **** 	return pointer(_M_local_buf);
 144:/usr/include/c++/5/bits/basic_string.h **** #endif
 145:/usr/include/c++/5/bits/basic_string.h ****       }
 146:/usr/include/c++/5/bits/basic_string.h **** 
 147:/usr/include/c++/5/bits/basic_string.h ****       const_pointer
 148:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data() const
 149:/usr/include/c++/5/bits/basic_string.h ****       {
 150:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 151:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 152:/usr/include/c++/5/bits/basic_string.h **** #else
 153:/usr/include/c++/5/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 154:/usr/include/c++/5/bits/basic_string.h **** #endif
 155:/usr/include/c++/5/bits/basic_string.h ****       }
 156:/usr/include/c++/5/bits/basic_string.h **** 
 157:/usr/include/c++/5/bits/basic_string.h ****       void
 158:/usr/include/c++/5/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 159:/usr/include/c++/5/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 160:/usr/include/c++/5/bits/basic_string.h **** 
 161:/usr/include/c++/5/bits/basic_string.h ****       void
 162:/usr/include/c++/5/bits/basic_string.h ****       _M_set_length(size_type __n)
 163:/usr/include/c++/5/bits/basic_string.h ****       {
 164:/usr/include/c++/5/bits/basic_string.h **** 	_M_length(__n);
 165:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 166:/usr/include/c++/5/bits/basic_string.h ****       }
 167:/usr/include/c++/5/bits/basic_string.h **** 
 168:/usr/include/c++/5/bits/basic_string.h ****       bool
 169:/usr/include/c++/5/bits/basic_string.h ****       _M_is_local() const
 170:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 171:/usr/include/c++/5/bits/basic_string.h **** 
 172:/usr/include/c++/5/bits/basic_string.h ****       // Create & Destroy
 173:/usr/include/c++/5/bits/basic_string.h ****       pointer
 174:/usr/include/c++/5/bits/basic_string.h ****       _M_create(size_type&, size_type);
 175:/usr/include/c++/5/bits/basic_string.h **** 
 176:/usr/include/c++/5/bits/basic_string.h ****       void
 177:/usr/include/c++/5/bits/basic_string.h ****       _M_dispose()
 178:/usr/include/c++/5/bits/basic_string.h ****       {
 179:/usr/include/c++/5/bits/basic_string.h **** 	if (!_M_is_local())
 180:/usr/include/c++/5/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 181:/usr/include/c++/5/bits/basic_string.h ****       }
 182:/usr/include/c++/5/bits/basic_string.h **** 
 183:/usr/include/c++/5/bits/basic_string.h ****       void
 184:/usr/include/c++/5/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 185:/usr/include/c++/5/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
GAS LISTING /tmp/ccEjei2f.s 			page 38


 186:/usr/include/c++/5/bits/basic_string.h **** 
 187:/usr/include/c++/5/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 188:/usr/include/c++/5/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 189:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 190:/usr/include/c++/5/bits/basic_string.h ****         void
 191:/usr/include/c++/5/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 192:/usr/include/c++/5/bits/basic_string.h **** 			 std::__false_type)
 193:/usr/include/c++/5/bits/basic_string.h **** 	{
 194:/usr/include/c++/5/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 195:/usr/include/c++/5/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 196:/usr/include/c++/5/bits/basic_string.h **** 	}
 197:/usr/include/c++/5/bits/basic_string.h **** 
 198:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 199:/usr/include/c++/5/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 200:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Integer>
 201:/usr/include/c++/5/bits/basic_string.h ****         void
 202:/usr/include/c++/5/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 203:/usr/include/c++/5/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 204:/usr/include/c++/5/bits/basic_string.h **** 
 205:/usr/include/c++/5/bits/basic_string.h ****       void
 206:/usr/include/c++/5/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 207:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__req, __c); }
 208:/usr/include/c++/5/bits/basic_string.h **** 
 209:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 210:/usr/include/c++/5/bits/basic_string.h ****         void
 211:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 212:/usr/include/c++/5/bits/basic_string.h **** 	{
 213:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 214:/usr/include/c++/5/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 215:/usr/include/c++/5/bits/basic_string.h ****         }
 216:/usr/include/c++/5/bits/basic_string.h **** 
 217:/usr/include/c++/5/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 218:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 219:/usr/include/c++/5/bits/basic_string.h ****         void
 220:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 221:/usr/include/c++/5/bits/basic_string.h **** 		     std::input_iterator_tag);
 222:/usr/include/c++/5/bits/basic_string.h **** 
 223:/usr/include/c++/5/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 224:/usr/include/c++/5/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 225:/usr/include/c++/5/bits/basic_string.h ****       template<typename _FwdIterator>
 226:/usr/include/c++/5/bits/basic_string.h ****         void
 227:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 228:/usr/include/c++/5/bits/basic_string.h **** 		     std::forward_iterator_tag);
 229:/usr/include/c++/5/bits/basic_string.h **** 
 230:/usr/include/c++/5/bits/basic_string.h ****       void
 231:/usr/include/c++/5/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 232:/usr/include/c++/5/bits/basic_string.h **** 
 233:/usr/include/c++/5/bits/basic_string.h ****       allocator_type&
 234:/usr/include/c++/5/bits/basic_string.h ****       _M_get_allocator()
 235:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
 236:/usr/include/c++/5/bits/basic_string.h **** 
 237:/usr/include/c++/5/bits/basic_string.h ****       const allocator_type&
 238:/usr/include/c++/5/bits/basic_string.h ****       _M_get_allocator() const
 239:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
 240:/usr/include/c++/5/bits/basic_string.h **** 
 241:/usr/include/c++/5/bits/basic_string.h ****     private:
 242:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 39


 243:/usr/include/c++/5/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 244:/usr/include/c++/5/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 245:/usr/include/c++/5/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 246:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 247:/usr/include/c++/5/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 248:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 249:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 250:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 251:/usr/include/c++/5/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 252:/usr/include/c++/5/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 253:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Tp>
 254:/usr/include/c++/5/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 255:/usr/include/c++/5/bits/basic_string.h **** #endif
 256:/usr/include/c++/5/bits/basic_string.h **** 
 257:/usr/include/c++/5/bits/basic_string.h ****       size_type
 258:/usr/include/c++/5/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 259:/usr/include/c++/5/bits/basic_string.h ****       {
 260:/usr/include/c++/5/bits/basic_string.h **** 	if (__pos > this->size())
 261:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 262:/usr/include/c++/5/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 263:/usr/include/c++/5/bits/basic_string.h **** 				   __s, __pos, this->size());
 264:/usr/include/c++/5/bits/basic_string.h **** 	return __pos;
 265:/usr/include/c++/5/bits/basic_string.h ****       }
 266:/usr/include/c++/5/bits/basic_string.h **** 
 267:/usr/include/c++/5/bits/basic_string.h ****       void
 268:/usr/include/c++/5/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 269:/usr/include/c++/5/bits/basic_string.h ****       {
 270:/usr/include/c++/5/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 271:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 272:/usr/include/c++/5/bits/basic_string.h ****       }
 273:/usr/include/c++/5/bits/basic_string.h **** 
 274:/usr/include/c++/5/bits/basic_string.h **** 
 275:/usr/include/c++/5/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 276:/usr/include/c++/5/bits/basic_string.h ****       size_type
 277:/usr/include/c++/5/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 278:/usr/include/c++/5/bits/basic_string.h ****       {
 279:/usr/include/c++/5/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 280:/usr/include/c++/5/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 281:/usr/include/c++/5/bits/basic_string.h ****       }
 282:/usr/include/c++/5/bits/basic_string.h **** 
 283:/usr/include/c++/5/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 284:/usr/include/c++/5/bits/basic_string.h ****       bool
 285:/usr/include/c++/5/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 286:/usr/include/c++/5/bits/basic_string.h ****       {
 287:/usr/include/c++/5/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 288:/usr/include/c++/5/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 289:/usr/include/c++/5/bits/basic_string.h ****       }
 290:/usr/include/c++/5/bits/basic_string.h **** 
 291:/usr/include/c++/5/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 292:/usr/include/c++/5/bits/basic_string.h ****       // traits_type::copy/move/assign.
 293:/usr/include/c++/5/bits/basic_string.h ****       static void
 294:/usr/include/c++/5/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 295:/usr/include/c++/5/bits/basic_string.h ****       {
 296:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 297:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 298:/usr/include/c++/5/bits/basic_string.h **** 	else
 299:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
GAS LISTING /tmp/ccEjei2f.s 			page 40


 300:/usr/include/c++/5/bits/basic_string.h ****       }
 301:/usr/include/c++/5/bits/basic_string.h **** 
 302:/usr/include/c++/5/bits/basic_string.h ****       static void
 303:/usr/include/c++/5/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 304:/usr/include/c++/5/bits/basic_string.h ****       {
 305:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 306:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 307:/usr/include/c++/5/bits/basic_string.h **** 	else
 308:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 309:/usr/include/c++/5/bits/basic_string.h ****       }
 310:/usr/include/c++/5/bits/basic_string.h **** 
 311:/usr/include/c++/5/bits/basic_string.h ****       static void
 312:/usr/include/c++/5/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 313:/usr/include/c++/5/bits/basic_string.h ****       {
 314:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 315:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 316:/usr/include/c++/5/bits/basic_string.h **** 	else
 317:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 318:/usr/include/c++/5/bits/basic_string.h ****       }
 319:/usr/include/c++/5/bits/basic_string.h **** 
 320:/usr/include/c++/5/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 321:/usr/include/c++/5/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 322:/usr/include/c++/5/bits/basic_string.h ****       template<class _Iterator>
 323:/usr/include/c++/5/bits/basic_string.h ****         static void
 324:/usr/include/c++/5/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 325:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
 326:/usr/include/c++/5/bits/basic_string.h ****         {
 327:/usr/include/c++/5/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, ++__p)
 328:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 329:/usr/include/c++/5/bits/basic_string.h **** 	}
 330:/usr/include/c++/5/bits/basic_string.h **** 
 331:/usr/include/c++/5/bits/basic_string.h ****       static void
 332:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 333:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 334:/usr/include/c++/5/bits/basic_string.h **** 
 335:/usr/include/c++/5/bits/basic_string.h ****       static void
 336:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 337:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 338:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 339:/usr/include/c++/5/bits/basic_string.h **** 
 340:/usr/include/c++/5/bits/basic_string.h ****       static void
 341:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 342:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 343:/usr/include/c++/5/bits/basic_string.h **** 
 344:/usr/include/c++/5/bits/basic_string.h ****       static void
 345:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 346:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 347:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 348:/usr/include/c++/5/bits/basic_string.h **** 
 349:/usr/include/c++/5/bits/basic_string.h ****       static int
 350:/usr/include/c++/5/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 351:/usr/include/c++/5/bits/basic_string.h ****       {
 352:/usr/include/c++/5/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 353:/usr/include/c++/5/bits/basic_string.h **** 
 354:/usr/include/c++/5/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 355:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 356:/usr/include/c++/5/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
GAS LISTING /tmp/ccEjei2f.s 			page 41


 357:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 358:/usr/include/c++/5/bits/basic_string.h **** 	else
 359:/usr/include/c++/5/bits/basic_string.h **** 	  return int(__d);
 360:/usr/include/c++/5/bits/basic_string.h ****       }
 361:/usr/include/c++/5/bits/basic_string.h **** 
 362:/usr/include/c++/5/bits/basic_string.h ****       void
 363:/usr/include/c++/5/bits/basic_string.h ****       _M_assign(const basic_string& __rcs);
 364:/usr/include/c++/5/bits/basic_string.h **** 
 365:/usr/include/c++/5/bits/basic_string.h ****       void
 366:/usr/include/c++/5/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 367:/usr/include/c++/5/bits/basic_string.h **** 		size_type __len2);
 368:/usr/include/c++/5/bits/basic_string.h **** 
 369:/usr/include/c++/5/bits/basic_string.h ****       void
 370:/usr/include/c++/5/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 371:/usr/include/c++/5/bits/basic_string.h **** 
 372:/usr/include/c++/5/bits/basic_string.h ****     public:
 373:/usr/include/c++/5/bits/basic_string.h ****       // Construct/copy/destroy:
 374:/usr/include/c++/5/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 375:/usr/include/c++/5/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 376:/usr/include/c++/5/bits/basic_string.h **** 
 377:/usr/include/c++/5/bits/basic_string.h ****       /**
 378:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 379:/usr/include/c++/5/bits/basic_string.h ****        */
 380:/usr/include/c++/5/bits/basic_string.h ****       basic_string()
 381:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 382:/usr/include/c++/5/bits/basic_string.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 383:/usr/include/c++/5/bits/basic_string.h **** #endif
 384:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 385:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 386:/usr/include/c++/5/bits/basic_string.h **** 
 387:/usr/include/c++/5/bits/basic_string.h ****       /**
 388:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 389:/usr/include/c++/5/bits/basic_string.h ****        */
 390:/usr/include/c++/5/bits/basic_string.h ****       explicit
 391:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _Alloc& __a)
 392:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 393:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 394:/usr/include/c++/5/bits/basic_string.h **** 
 395:/usr/include/c++/5/bits/basic_string.h ****       /**
 396:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 397:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 398:/usr/include/c++/5/bits/basic_string.h ****        */
 399:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str)
 400:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __str._M_get_allocator()) // TODO A traits
 401:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 402:/usr/include/c++/5/bits/basic_string.h **** 
 403:/usr/include/c++/5/bits/basic_string.h ****       /**
 404:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 405:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 406:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 407:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 408:/usr/include/c++/5/bits/basic_string.h ****        */
 409:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 410:/usr/include/c++/5/bits/basic_string.h ****       // 2402. [this constructor] shouldn't use Allocator()
 411:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 412:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n = npos)
 413:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
GAS LISTING /tmp/ccEjei2f.s 			page 42


 414:/usr/include/c++/5/bits/basic_string.h ****       {
 415:/usr/include/c++/5/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 416:/usr/include/c++/5/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 417:/usr/include/c++/5/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 418:/usr/include/c++/5/bits/basic_string.h ****       }
 419:/usr/include/c++/5/bits/basic_string.h **** 
 420:/usr/include/c++/5/bits/basic_string.h ****       /**
 421:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 422:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 423:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 424:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 425:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 426:/usr/include/c++/5/bits/basic_string.h ****        */
 427:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 428:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 429:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 430:/usr/include/c++/5/bits/basic_string.h ****       {
 431:/usr/include/c++/5/bits/basic_string.h **** 	const _CharT* __start
 432:/usr/include/c++/5/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 433:/usr/include/c++/5/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 434:/usr/include/c++/5/bits/basic_string.h ****       }
 435:/usr/include/c++/5/bits/basic_string.h **** 
 436:/usr/include/c++/5/bits/basic_string.h ****       /**
 437:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 438:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source character %array.
 439:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 440:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 441:/usr/include/c++/5/bits/basic_string.h ****        *
 442:/usr/include/c++/5/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 443:/usr/include/c++/5/bits/basic_string.h ****        *  has no special meaning.
 444:/usr/include/c++/5/bits/basic_string.h ****        */
 445:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 446:/usr/include/c++/5/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 447:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 448:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 449:/usr/include/c++/5/bits/basic_string.h **** 
 450:/usr/include/c++/5/bits/basic_string.h ****       /**
 451:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 452:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source C string.
 453:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 454:/usr/include/c++/5/bits/basic_string.h ****        */
 455:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 456:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 457:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 458:/usr/include/c++/5/bits/basic_string.h **** 
 459:/usr/include/c++/5/bits/basic_string.h ****       /**
 460:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 461:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters.
 462:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to use.
 463:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 464:/usr/include/c++/5/bits/basic_string.h ****        */
 465:/usr/include/c++/5/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 466:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 467:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__n, __c); }
 468:/usr/include/c++/5/bits/basic_string.h **** 
 469:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 470:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccEjei2f.s 			page 43


 471:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move construct string.
 472:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 473:/usr/include/c++/5/bits/basic_string.h ****        *
 474:/usr/include/c++/5/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 475:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 476:/usr/include/c++/5/bits/basic_string.h ****        **/
 477:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 478:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 479:/usr/include/c++/5/bits/basic_string.h ****       {
 480:/usr/include/c++/5/bits/basic_string.h **** 	if (__str._M_is_local())
 481:/usr/include/c++/5/bits/basic_string.h **** 	  {
 482:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 483:/usr/include/c++/5/bits/basic_string.h **** 			      _S_local_capacity + 1);
 484:/usr/include/c++/5/bits/basic_string.h **** 	  }
 485:/usr/include/c++/5/bits/basic_string.h **** 	else
 486:/usr/include/c++/5/bits/basic_string.h **** 	  {
 487:/usr/include/c++/5/bits/basic_string.h **** 	    _M_data(__str._M_data());
 488:/usr/include/c++/5/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 489:/usr/include/c++/5/bits/basic_string.h **** 	  }
 490:/usr/include/c++/5/bits/basic_string.h **** 
 491:/usr/include/c++/5/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 492:/usr/include/c++/5/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 493:/usr/include/c++/5/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 494:/usr/include/c++/5/bits/basic_string.h **** 	_M_length(__str.length());
 495:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 496:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_set_length(0);
 497:/usr/include/c++/5/bits/basic_string.h ****       }
 498:/usr/include/c++/5/bits/basic_string.h **** 
 499:/usr/include/c++/5/bits/basic_string.h ****       /**
 500:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 501:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 502:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 503:/usr/include/c++/5/bits/basic_string.h ****        */
 504:/usr/include/c++/5/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 505:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 506:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 507:/usr/include/c++/5/bits/basic_string.h **** 
 508:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 509:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 510:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 511:/usr/include/c++/5/bits/basic_string.h **** 
 512:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 513:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 514:/usr/include/c++/5/bits/basic_string.h ****       {
 515:/usr/include/c++/5/bits/basic_string.h **** 	if (__str.get_allocator() == __a)
 516:/usr/include/c++/5/bits/basic_string.h **** 	  *this = std::move(__str);
 517:/usr/include/c++/5/bits/basic_string.h **** 	else
 518:/usr/include/c++/5/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 519:/usr/include/c++/5/bits/basic_string.h ****       }
 520:/usr/include/c++/5/bits/basic_string.h **** 
 521:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 522:/usr/include/c++/5/bits/basic_string.h **** 
 523:/usr/include/c++/5/bits/basic_string.h ****       /**
 524:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 525:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __beg  Start of range.
 526:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __end  End of range.
 527:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
GAS LISTING /tmp/ccEjei2f.s 			page 44


 528:/usr/include/c++/5/bits/basic_string.h ****        */
 529:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 530:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InputIterator,
 531:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 532:/usr/include/c++/5/bits/basic_string.h **** #else
 533:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InputIterator>
 534:/usr/include/c++/5/bits/basic_string.h **** #endif
 535:/usr/include/c++/5/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 536:/usr/include/c++/5/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 537:/usr/include/c++/5/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 538:/usr/include/c++/5/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 539:/usr/include/c++/5/bits/basic_string.h **** 
 540:/usr/include/c++/5/bits/basic_string.h ****       /**
 541:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 542:/usr/include/c++/5/bits/basic_string.h ****        */
 543:/usr/include/c++/5/bits/basic_string.h ****       ~basic_string()
 544:/usr/include/c++/5/bits/basic_string.h ****       { _M_dispose(); }
 545:/usr/include/c++/5/bits/basic_string.h **** 
 546:/usr/include/c++/5/bits/basic_string.h ****       /**
 547:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 548:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 549:/usr/include/c++/5/bits/basic_string.h ****        */
 550:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 551:/usr/include/c++/5/bits/basic_string.h ****       operator=(const basic_string& __str)
 552:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str); }
 553:/usr/include/c++/5/bits/basic_string.h **** 
 554:/usr/include/c++/5/bits/basic_string.h ****       /**
 555:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 556:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 557:/usr/include/c++/5/bits/basic_string.h ****        */
 558:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 559:/usr/include/c++/5/bits/basic_string.h ****       operator=(const _CharT* __s)
 560:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__s); }
 561:/usr/include/c++/5/bits/basic_string.h **** 
 562:/usr/include/c++/5/bits/basic_string.h ****       /**
 563:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 564:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Source character.
 565:/usr/include/c++/5/bits/basic_string.h ****        *
 566:/usr/include/c++/5/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 567:/usr/include/c++/5/bits/basic_string.h ****        *  (*this)[0] == @a c.
 568:/usr/include/c++/5/bits/basic_string.h ****        */
 569:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 570:/usr/include/c++/5/bits/basic_string.h ****       operator=(_CharT __c)
 571:/usr/include/c++/5/bits/basic_string.h ****       {
 572:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(1, __c);
 573:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 574:/usr/include/c++/5/bits/basic_string.h ****       }
 575:/usr/include/c++/5/bits/basic_string.h **** 
 576:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 577:/usr/include/c++/5/bits/basic_string.h ****       /**
 578:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 579:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 580:/usr/include/c++/5/bits/basic_string.h ****        *
 581:/usr/include/c++/5/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 582:/usr/include/c++/5/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 583:/usr/include/c++/5/bits/basic_string.h ****        **/
 584:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
GAS LISTING /tmp/ccEjei2f.s 			page 45


 585:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 586:/usr/include/c++/5/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 587:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 588:/usr/include/c++/5/bits/basic_string.h ****       operator=(basic_string&& __str)
 589:/usr/include/c++/5/bits/basic_string.h ****       {
 590:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
 591:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 592:/usr/include/c++/5/bits/basic_string.h ****       }
 593:/usr/include/c++/5/bits/basic_string.h **** 
 594:/usr/include/c++/5/bits/basic_string.h ****       /**
 595:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 596:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 597:/usr/include/c++/5/bits/basic_string.h ****        */
 598:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 599:/usr/include/c++/5/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 600:/usr/include/c++/5/bits/basic_string.h ****       {
 601:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 602:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 603:/usr/include/c++/5/bits/basic_string.h ****       }
 604:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 605:/usr/include/c++/5/bits/basic_string.h **** 
 606:/usr/include/c++/5/bits/basic_string.h ****       // Iterators:
 607:/usr/include/c++/5/bits/basic_string.h ****       /**
 608:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 609:/usr/include/c++/5/bits/basic_string.h ****        *  the %string.
 610:/usr/include/c++/5/bits/basic_string.h ****        */
 611:/usr/include/c++/5/bits/basic_string.h ****       iterator
 612:/usr/include/c++/5/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 613:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data()); }
 614:/usr/include/c++/5/bits/basic_string.h **** 
 615:/usr/include/c++/5/bits/basic_string.h ****       /**
 616:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 617:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 618:/usr/include/c++/5/bits/basic_string.h ****        */
 619:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 620:/usr/include/c++/5/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 621:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 622:/usr/include/c++/5/bits/basic_string.h **** 
 623:/usr/include/c++/5/bits/basic_string.h ****       /**
 624:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 625:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 626:/usr/include/c++/5/bits/basic_string.h ****        */
 627:/usr/include/c++/5/bits/basic_string.h ****       iterator
 628:/usr/include/c++/5/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 629:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 630:/usr/include/c++/5/bits/basic_string.h **** 
 631:/usr/include/c++/5/bits/basic_string.h ****       /**
 632:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 633:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
 634:/usr/include/c++/5/bits/basic_string.h ****        */
 635:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 636:/usr/include/c++/5/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 637:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 638:/usr/include/c++/5/bits/basic_string.h **** 
 639:/usr/include/c++/5/bits/basic_string.h ****       /**
 640:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 641:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
GAS LISTING /tmp/ccEjei2f.s 			page 46


 642:/usr/include/c++/5/bits/basic_string.h ****        *  order.
 643:/usr/include/c++/5/bits/basic_string.h ****        */
 644:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
 645:/usr/include/c++/5/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 646:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 647:/usr/include/c++/5/bits/basic_string.h **** 
 648:/usr/include/c++/5/bits/basic_string.h ****       /**
 649:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 650:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 651:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
 652:/usr/include/c++/5/bits/basic_string.h ****        */
 653:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 654:/usr/include/c++/5/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 655:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 656:/usr/include/c++/5/bits/basic_string.h **** 
 657:/usr/include/c++/5/bits/basic_string.h ****       /**
 658:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 659:/usr/include/c++/5/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 660:/usr/include/c++/5/bits/basic_string.h ****        *  element order.
 661:/usr/include/c++/5/bits/basic_string.h ****        */
 662:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
 663:/usr/include/c++/5/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 664:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 665:/usr/include/c++/5/bits/basic_string.h **** 
 666:/usr/include/c++/5/bits/basic_string.h ****       /**
 667:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 668:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 669:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
 670:/usr/include/c++/5/bits/basic_string.h ****        */
 671:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 672:/usr/include/c++/5/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 673:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 674:/usr/include/c++/5/bits/basic_string.h **** 
 675:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 676:/usr/include/c++/5/bits/basic_string.h ****       /**
 677:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 678:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 679:/usr/include/c++/5/bits/basic_string.h ****        */
 680:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 681:/usr/include/c++/5/bits/basic_string.h ****       cbegin() const noexcept
 682:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 683:/usr/include/c++/5/bits/basic_string.h **** 
 684:/usr/include/c++/5/bits/basic_string.h ****       /**
 685:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 686:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
 687:/usr/include/c++/5/bits/basic_string.h ****        */
 688:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 689:/usr/include/c++/5/bits/basic_string.h ****       cend() const noexcept
 690:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 691:/usr/include/c++/5/bits/basic_string.h **** 
 692:/usr/include/c++/5/bits/basic_string.h ****       /**
 693:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 694:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 695:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
 696:/usr/include/c++/5/bits/basic_string.h ****        */
 697:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 698:/usr/include/c++/5/bits/basic_string.h ****       crbegin() const noexcept
GAS LISTING /tmp/ccEjei2f.s 			page 47


 699:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 700:/usr/include/c++/5/bits/basic_string.h **** 
 701:/usr/include/c++/5/bits/basic_string.h ****       /**
 702:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 703:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 704:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
 705:/usr/include/c++/5/bits/basic_string.h ****        */
 706:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 707:/usr/include/c++/5/bits/basic_string.h ****       crend() const noexcept
 708:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 709:/usr/include/c++/5/bits/basic_string.h **** #endif
 710:/usr/include/c++/5/bits/basic_string.h **** 
 711:/usr/include/c++/5/bits/basic_string.h ****     public:
 712:/usr/include/c++/5/bits/basic_string.h ****       // Capacity:
 713:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 714:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
 715:/usr/include/c++/5/bits/basic_string.h ****       size_type
 716:/usr/include/c++/5/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 717:/usr/include/c++/5/bits/basic_string.h ****       { return _M_string_length; }
 718:/usr/include/c++/5/bits/basic_string.h **** 
 719:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 720:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
 721:/usr/include/c++/5/bits/basic_string.h ****       size_type
 722:/usr/include/c++/5/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 723:/usr/include/c++/5/bits/basic_string.h ****       { return _M_string_length; }
 724:/usr/include/c++/5/bits/basic_string.h **** 
 725:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 726:/usr/include/c++/5/bits/basic_string.h ****       size_type
 727:/usr/include/c++/5/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 728:/usr/include/c++/5/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 729:/usr/include/c++/5/bits/basic_string.h **** 
 730:/usr/include/c++/5/bits/basic_string.h ****       /**
 731:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 732:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 733:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 734:/usr/include/c++/5/bits/basic_string.h ****        *
 735:/usr/include/c++/5/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 736:/usr/include/c++/5/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 737:/usr/include/c++/5/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 738:/usr/include/c++/5/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 739:/usr/include/c++/5/bits/basic_string.h ****        */
 740:/usr/include/c++/5/bits/basic_string.h ****       void
 741:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 742:/usr/include/c++/5/bits/basic_string.h **** 
 743:/usr/include/c++/5/bits/basic_string.h ****       /**
 744:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 745:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 746:/usr/include/c++/5/bits/basic_string.h ****        *
 747:/usr/include/c++/5/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 748:/usr/include/c++/5/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 749:/usr/include/c++/5/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 750:/usr/include/c++/5/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 751:/usr/include/c++/5/bits/basic_string.h ****        *  setting them to 0.
 752:/usr/include/c++/5/bits/basic_string.h ****        */
 753:/usr/include/c++/5/bits/basic_string.h ****       void
 754:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n)
 755:/usr/include/c++/5/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
GAS LISTING /tmp/ccEjei2f.s 			page 48


 756:/usr/include/c++/5/bits/basic_string.h **** 
 757:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 758:/usr/include/c++/5/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 759:/usr/include/c++/5/bits/basic_string.h ****       void
 760:/usr/include/c++/5/bits/basic_string.h ****       shrink_to_fit() noexcept
 761:/usr/include/c++/5/bits/basic_string.h ****       {
 762:/usr/include/c++/5/bits/basic_string.h **** 	if (capacity() > size())
 763:/usr/include/c++/5/bits/basic_string.h **** 	  {
 764:/usr/include/c++/5/bits/basic_string.h **** 	    __try
 765:/usr/include/c++/5/bits/basic_string.h **** 	      { reserve(0); }
 766:/usr/include/c++/5/bits/basic_string.h **** 	    __catch(...)
 767:/usr/include/c++/5/bits/basic_string.h **** 	      { }
 768:/usr/include/c++/5/bits/basic_string.h **** 	  }
 769:/usr/include/c++/5/bits/basic_string.h ****       }
 770:/usr/include/c++/5/bits/basic_string.h **** #endif
 771:/usr/include/c++/5/bits/basic_string.h **** 
 772:/usr/include/c++/5/bits/basic_string.h ****       /**
 773:/usr/include/c++/5/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 774:/usr/include/c++/5/bits/basic_string.h ****        *  before needing to allocate more memory.
 775:/usr/include/c++/5/bits/basic_string.h ****        */
 776:/usr/include/c++/5/bits/basic_string.h ****       size_type
 777:/usr/include/c++/5/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 778:/usr/include/c++/5/bits/basic_string.h ****       {
 779:/usr/include/c++/5/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 780:/usr/include/c++/5/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 781:/usr/include/c++/5/bits/basic_string.h ****       }
 782:/usr/include/c++/5/bits/basic_string.h **** 
 783:/usr/include/c++/5/bits/basic_string.h ****       /**
 784:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 785:/usr/include/c++/5/bits/basic_string.h ****        *          characters.
 786:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 787:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 788:/usr/include/c++/5/bits/basic_string.h ****        *
 789:/usr/include/c++/5/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 790:/usr/include/c++/5/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 791:/usr/include/c++/5/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 792:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
 793:/usr/include/c++/5/bits/basic_string.h ****        *
 794:/usr/include/c++/5/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 795:/usr/include/c++/5/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 796:/usr/include/c++/5/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 797:/usr/include/c++/5/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 798:/usr/include/c++/5/bits/basic_string.h ****        *  data.
 799:/usr/include/c++/5/bits/basic_string.h ****        */
 800:/usr/include/c++/5/bits/basic_string.h ****       void
 801:/usr/include/c++/5/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
 802:/usr/include/c++/5/bits/basic_string.h **** 
 803:/usr/include/c++/5/bits/basic_string.h ****       /**
 804:/usr/include/c++/5/bits/basic_string.h ****        *  Erases the string, making it empty.
 805:/usr/include/c++/5/bits/basic_string.h ****        */
 806:/usr/include/c++/5/bits/basic_string.h ****       void
 807:/usr/include/c++/5/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
 808:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 809:/usr/include/c++/5/bits/basic_string.h **** 
 810:/usr/include/c++/5/bits/basic_string.h ****       /**
 811:/usr/include/c++/5/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
 812:/usr/include/c++/5/bits/basic_string.h ****        *  <code>*this == ""</code>.
GAS LISTING /tmp/ccEjei2f.s 			page 49


 813:/usr/include/c++/5/bits/basic_string.h ****        */
 814:/usr/include/c++/5/bits/basic_string.h ****       bool
 815:/usr/include/c++/5/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
 816:/usr/include/c++/5/bits/basic_string.h ****       { return this->size() == 0; }
 817:/usr/include/c++/5/bits/basic_string.h **** 
 818:/usr/include/c++/5/bits/basic_string.h ****       // Element access:
 819:/usr/include/c++/5/bits/basic_string.h ****       /**
 820:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 821:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 822:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
 823:/usr/include/c++/5/bits/basic_string.h ****        *
 824:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 825:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 826:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 827:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
 828:/usr/include/c++/5/bits/basic_string.h ****        */
 829:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 830:/usr/include/c++/5/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
 831:/usr/include/c++/5/bits/basic_string.h ****       {
 832:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 833:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
 834:/usr/include/c++/5/bits/basic_string.h ****       }
 835:/usr/include/c++/5/bits/basic_string.h **** 
 836:/usr/include/c++/5/bits/basic_string.h ****       /**
 837:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 838:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 839:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 840:/usr/include/c++/5/bits/basic_string.h ****        *
 841:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 842:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 843:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 844:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
 845:/usr/include/c++/5/bits/basic_string.h ****        */
 846:/usr/include/c++/5/bits/basic_string.h ****       reference
 847:/usr/include/c++/5/bits/basic_string.h ****       operator[](size_type __pos)
 848:/usr/include/c++/5/bits/basic_string.h ****       {
 849:/usr/include/c++/5/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
 850:/usr/include/c++/5/bits/basic_string.h **** 	// and in C++11 mode.
 851:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 852:/usr/include/c++/5/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
 853:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
 854:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
 855:/usr/include/c++/5/bits/basic_string.h ****       }
 856:/usr/include/c++/5/bits/basic_string.h **** 
 857:/usr/include/c++/5/bits/basic_string.h ****       /**
 858:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 859:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
 860:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
 861:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 862:/usr/include/c++/5/bits/basic_string.h ****        *
 863:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 864:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 865:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 866:/usr/include/c++/5/bits/basic_string.h ****        */
 867:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 868:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n) const
 869:/usr/include/c++/5/bits/basic_string.h ****       {
GAS LISTING /tmp/ccEjei2f.s 			page 50


 870:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= this->size())
 871:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 872:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 873:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
 874:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
 875:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
 876:/usr/include/c++/5/bits/basic_string.h ****       }
 877:/usr/include/c++/5/bits/basic_string.h **** 
 878:/usr/include/c++/5/bits/basic_string.h ****       /**
 879:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 880:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
 881:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 882:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 883:/usr/include/c++/5/bits/basic_string.h ****        *
 884:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 885:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 886:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 887:/usr/include/c++/5/bits/basic_string.h ****        */
 888:/usr/include/c++/5/bits/basic_string.h ****       reference
 889:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n)
 890:/usr/include/c++/5/bits/basic_string.h ****       {
 891:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= size())
 892:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 893:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 894:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
 895:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
 896:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
 897:/usr/include/c++/5/bits/basic_string.h ****       }
 898:/usr/include/c++/5/bits/basic_string.h **** 
 899:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 900:/usr/include/c++/5/bits/basic_string.h ****       /**
 901:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
 902:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 903:/usr/include/c++/5/bits/basic_string.h ****        */
 904:/usr/include/c++/5/bits/basic_string.h ****       reference
 905:/usr/include/c++/5/bits/basic_string.h ****       front() noexcept
 906:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
 907:/usr/include/c++/5/bits/basic_string.h **** 
 908:/usr/include/c++/5/bits/basic_string.h ****       /**
 909:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
 910:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 911:/usr/include/c++/5/bits/basic_string.h ****        */
 912:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 913:/usr/include/c++/5/bits/basic_string.h ****       front() const noexcept
 914:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
 915:/usr/include/c++/5/bits/basic_string.h **** 
 916:/usr/include/c++/5/bits/basic_string.h ****       /**
 917:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
 918:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 919:/usr/include/c++/5/bits/basic_string.h ****        */
 920:/usr/include/c++/5/bits/basic_string.h ****       reference
 921:/usr/include/c++/5/bits/basic_string.h ****       back() noexcept
 922:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 923:/usr/include/c++/5/bits/basic_string.h **** 
 924:/usr/include/c++/5/bits/basic_string.h ****       /**
 925:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
 926:/usr/include/c++/5/bits/basic_string.h ****        *  last element of the %string.
GAS LISTING /tmp/ccEjei2f.s 			page 51


 927:/usr/include/c++/5/bits/basic_string.h ****        */
 928:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 929:/usr/include/c++/5/bits/basic_string.h ****       back() const noexcept
 930:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 931:/usr/include/c++/5/bits/basic_string.h **** #endif
 932:/usr/include/c++/5/bits/basic_string.h **** 
 933:/usr/include/c++/5/bits/basic_string.h ****       // Modifiers:
 934:/usr/include/c++/5/bits/basic_string.h ****       /**
 935:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
 936:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 937:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 938:/usr/include/c++/5/bits/basic_string.h ****        */
 939:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 940:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const basic_string& __str)
 941:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__str); }
 942:/usr/include/c++/5/bits/basic_string.h **** 
 943:/usr/include/c++/5/bits/basic_string.h ****       /**
 944:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
 945:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
 946:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 947:/usr/include/c++/5/bits/basic_string.h ****        */
 948:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 949:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const _CharT* __s)
 950:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__s); }
 951:/usr/include/c++/5/bits/basic_string.h **** 
 952:/usr/include/c++/5/bits/basic_string.h ****       /**
 953:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a character.
 954:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to append.
 955:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 956:/usr/include/c++/5/bits/basic_string.h ****        */
 957:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 958:/usr/include/c++/5/bits/basic_string.h ****       operator+=(_CharT __c)
 959:/usr/include/c++/5/bits/basic_string.h ****       {
 960:/usr/include/c++/5/bits/basic_string.h **** 	this->push_back(__c);
 961:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 962:/usr/include/c++/5/bits/basic_string.h ****       }
 963:/usr/include/c++/5/bits/basic_string.h **** 
 964:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 965:/usr/include/c++/5/bits/basic_string.h ****       /**
 966:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
 967:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
 968:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 969:/usr/include/c++/5/bits/basic_string.h ****        */
 970:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 971:/usr/include/c++/5/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
 972:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
 973:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 974:/usr/include/c++/5/bits/basic_string.h **** 
 975:/usr/include/c++/5/bits/basic_string.h ****       /**
 976:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
 977:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 978:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 979:/usr/include/c++/5/bits/basic_string.h ****        */
 980:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 981:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str)
 982:/usr/include/c++/5/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 983:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 52


 984:/usr/include/c++/5/bits/basic_string.h ****       /**
 985:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a substring.
 986:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 987:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
 988:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
 989:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 990:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
 991:/usr/include/c++/5/bits/basic_string.h ****        *
 992:/usr/include/c++/5/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
 993:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
 994:/usr/include/c++/5/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
 995:/usr/include/c++/5/bits/basic_string.h ****        *  remainder of @a __str is appended.
 996:/usr/include/c++/5/bits/basic_string.h ****        */
 997:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 998:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n)
 999:/usr/include/c++/5/bits/basic_string.h ****       { return _M_append(__str._M_data()
1000:/usr/include/c++/5/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1001:/usr/include/c++/5/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1002:/usr/include/c++/5/bits/basic_string.h **** 
1003:/usr/include/c++/5/bits/basic_string.h ****       /**
1004:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C substring.
1005:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
1006:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1007:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1008:/usr/include/c++/5/bits/basic_string.h ****        */
1009:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1010:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1011:/usr/include/c++/5/bits/basic_string.h ****       {
1012:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1013:/usr/include/c++/5/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1014:/usr/include/c++/5/bits/basic_string.h **** 	return _M_append(__s, __n);
1015:/usr/include/c++/5/bits/basic_string.h ****       }
1016:/usr/include/c++/5/bits/basic_string.h **** 
1017:/usr/include/c++/5/bits/basic_string.h ****       /**
1018:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
1019:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
1020:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1021:/usr/include/c++/5/bits/basic_string.h ****        */
1022:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1023:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s)
1024:/usr/include/c++/5/bits/basic_string.h ****       {
1025:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1026:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1027:/usr/include/c++/5/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1028:/usr/include/c++/5/bits/basic_string.h **** 	return _M_append(__s, __n);
1029:/usr/include/c++/5/bits/basic_string.h ****       }
1030:/usr/include/c++/5/bits/basic_string.h **** 
1031:/usr/include/c++/5/bits/basic_string.h ****       /**
1032:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append multiple characters.
1033:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1034:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
1035:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1036:/usr/include/c++/5/bits/basic_string.h ****        *
1037:/usr/include/c++/5/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1038:/usr/include/c++/5/bits/basic_string.h ****        */
1039:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1040:/usr/include/c++/5/bits/basic_string.h ****       append(size_type __n, _CharT __c)
GAS LISTING /tmp/ccEjei2f.s 			page 53


1041:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1042:/usr/include/c++/5/bits/basic_string.h **** 
1043:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1044:/usr/include/c++/5/bits/basic_string.h ****       /**
1045:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1046:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1047:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1048:/usr/include/c++/5/bits/basic_string.h ****        */
1049:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1050:/usr/include/c++/5/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1051:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1052:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1053:/usr/include/c++/5/bits/basic_string.h **** 
1054:/usr/include/c++/5/bits/basic_string.h ****       /**
1055:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a range of characters.
1056:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1057:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1058:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1059:/usr/include/c++/5/bits/basic_string.h ****        *
1060:/usr/include/c++/5/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1061:/usr/include/c++/5/bits/basic_string.h ****        */
1062:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1063:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1064:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1065:/usr/include/c++/5/bits/basic_string.h **** #else
1066:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1067:/usr/include/c++/5/bits/basic_string.h **** #endif
1068:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1069:/usr/include/c++/5/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1070:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1071:/usr/include/c++/5/bits/basic_string.h **** 
1072:/usr/include/c++/5/bits/basic_string.h ****       /**
1073:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a single character.
1074:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to append.
1075:/usr/include/c++/5/bits/basic_string.h ****        */
1076:/usr/include/c++/5/bits/basic_string.h ****       void
1077:/usr/include/c++/5/bits/basic_string.h ****       push_back(_CharT __c)
1078:/usr/include/c++/5/bits/basic_string.h ****       {
1079:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
1080:/usr/include/c++/5/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1081:/usr/include/c++/5/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1082:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1083:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1084:/usr/include/c++/5/bits/basic_string.h ****       }
1085:/usr/include/c++/5/bits/basic_string.h **** 
1086:/usr/include/c++/5/bits/basic_string.h ****       /**
1087:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1088:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
1089:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1090:/usr/include/c++/5/bits/basic_string.h ****        */
1091:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1092:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str)
1093:/usr/include/c++/5/bits/basic_string.h ****       {
1094:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_assign(__str);
1095:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
1096:/usr/include/c++/5/bits/basic_string.h ****       }
1097:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 54


1098:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1099:/usr/include/c++/5/bits/basic_string.h ****       /**
1100:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1101:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
1102:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1103:/usr/include/c++/5/bits/basic_string.h ****        *
1104:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1105:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1106:/usr/include/c++/5/bits/basic_string.h ****        */
1107:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1108:/usr/include/c++/5/bits/basic_string.h ****       assign(basic_string&& __str)
1109:/usr/include/c++/5/bits/basic_string.h ****       {
1110:/usr/include/c++/5/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1111:/usr/include/c++/5/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1112:/usr/include/c++/5/bits/basic_string.h **** 	return *this = std::move(__str);
1113:/usr/include/c++/5/bits/basic_string.h ****       }
1114:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1115:/usr/include/c++/5/bits/basic_string.h **** 
1116:/usr/include/c++/5/bits/basic_string.h ****       /**
1117:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1118:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to use.
1119:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1120:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1121:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1122:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1123:/usr/include/c++/5/bits/basic_string.h ****        *
1124:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1125:/usr/include/c++/5/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1126:/usr/include/c++/5/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1127:/usr/include/c++/5/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1128:/usr/include/c++/5/bits/basic_string.h ****        */
1129:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1130:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
1131:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1132:/usr/include/c++/5/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1133:/usr/include/c++/5/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1134:/usr/include/c++/5/bits/basic_string.h **** 
1135:/usr/include/c++/5/bits/basic_string.h ****       /**
1136:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1137:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
1138:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1139:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1140:/usr/include/c++/5/bits/basic_string.h ****        *
1141:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1142:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1143:/usr/include/c++/5/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1144:/usr/include/c++/5/bits/basic_string.h ****        */
1145:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1146:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1147:/usr/include/c++/5/bits/basic_string.h ****       {
1148:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1149:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1150:/usr/include/c++/5/bits/basic_string.h ****       }
1151:/usr/include/c++/5/bits/basic_string.h **** 
1152:/usr/include/c++/5/bits/basic_string.h ****       /**
1153:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1154:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
GAS LISTING /tmp/ccEjei2f.s 			page 55


1155:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1156:/usr/include/c++/5/bits/basic_string.h ****        *
1157:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1158:/usr/include/c++/5/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1159:/usr/include/c++/5/bits/basic_string.h ****        *  function returns.
1160:/usr/include/c++/5/bits/basic_string.h ****        */
1161:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1162:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s)
1163:/usr/include/c++/5/bits/basic_string.h ****       {
1164:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1165:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1166:/usr/include/c++/5/bits/basic_string.h **** 			  traits_type::length(__s));
1167:/usr/include/c++/5/bits/basic_string.h ****       }
1168:/usr/include/c++/5/bits/basic_string.h **** 
1169:/usr/include/c++/5/bits/basic_string.h ****       /**
1170:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1171:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1172:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
1173:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1174:/usr/include/c++/5/bits/basic_string.h ****        *
1175:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1176:/usr/include/c++/5/bits/basic_string.h ****        *  character @a __c.
1177:/usr/include/c++/5/bits/basic_string.h ****        */
1178:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1179:/usr/include/c++/5/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1180:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1181:/usr/include/c++/5/bits/basic_string.h **** 
1182:/usr/include/c++/5/bits/basic_string.h ****       /**
1183:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1184:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1185:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1186:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1187:/usr/include/c++/5/bits/basic_string.h ****        *
1188:/usr/include/c++/5/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1189:/usr/include/c++/5/bits/basic_string.h ****       */
1190:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1191:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1192:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1193:/usr/include/c++/5/bits/basic_string.h **** #else
1194:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1195:/usr/include/c++/5/bits/basic_string.h **** #endif
1196:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1197:/usr/include/c++/5/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1198:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1199:/usr/include/c++/5/bits/basic_string.h **** 
1200:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1201:/usr/include/c++/5/bits/basic_string.h ****       /**
1202:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1203:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1204:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1205:/usr/include/c++/5/bits/basic_string.h ****        */
1206:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1207:/usr/include/c++/5/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1208:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1209:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1210:/usr/include/c++/5/bits/basic_string.h **** 
1211:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/ccEjei2f.s 			page 56


1212:/usr/include/c++/5/bits/basic_string.h ****       /**
1213:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1214:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1215:/usr/include/c++/5/bits/basic_string.h ****        *              insert at.
1216:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1217:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1218:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1219:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1220:/usr/include/c++/5/bits/basic_string.h ****        *
1221:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1222:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1223:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1224:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1225:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1226:/usr/include/c++/5/bits/basic_string.h ****       */
1227:/usr/include/c++/5/bits/basic_string.h ****       iterator
1228:/usr/include/c++/5/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1229:/usr/include/c++/5/bits/basic_string.h ****       {
1230:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1231:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1232:/usr/include/c++/5/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1233:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1234:/usr/include/c++/5/bits/basic_string.h ****       }
1235:/usr/include/c++/5/bits/basic_string.h **** #else
1236:/usr/include/c++/5/bits/basic_string.h ****       /**
1237:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1238:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1239:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1240:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1241:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1242:/usr/include/c++/5/bits/basic_string.h ****        *
1243:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1244:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1245:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1246:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1247:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1248:/usr/include/c++/5/bits/basic_string.h ****       */
1249:/usr/include/c++/5/bits/basic_string.h ****       void
1250:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1251:/usr/include/c++/5/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1252:/usr/include/c++/5/bits/basic_string.h **** #endif
1253:/usr/include/c++/5/bits/basic_string.h **** 
1254:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1255:/usr/include/c++/5/bits/basic_string.h ****       /**
1256:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1257:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1258:/usr/include/c++/5/bits/basic_string.h ****        *              insert at.
1259:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
1260:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
1261:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1262:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1263:/usr/include/c++/5/bits/basic_string.h ****        *
1264:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1265:/usr/include/c++/5/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1266:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1267:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1268:/usr/include/c++/5/bits/basic_string.h ****       */
GAS LISTING /tmp/ccEjei2f.s 			page 57


1269:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1270:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1271:/usr/include/c++/5/bits/basic_string.h **** 	iterator
1272:/usr/include/c++/5/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1273:/usr/include/c++/5/bits/basic_string.h ****         {
1274:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1275:/usr/include/c++/5/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1276:/usr/include/c++/5/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1277:/usr/include/c++/5/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1278:/usr/include/c++/5/bits/basic_string.h **** 	}
1279:/usr/include/c++/5/bits/basic_string.h **** #else
1280:/usr/include/c++/5/bits/basic_string.h ****       /**
1281:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1282:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1283:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
1284:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
1285:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1286:/usr/include/c++/5/bits/basic_string.h ****        *
1287:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1288:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1289:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1290:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1291:/usr/include/c++/5/bits/basic_string.h ****       */
1292:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1293:/usr/include/c++/5/bits/basic_string.h ****         void
1294:/usr/include/c++/5/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1295:/usr/include/c++/5/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1296:/usr/include/c++/5/bits/basic_string.h **** #endif
1297:/usr/include/c++/5/bits/basic_string.h **** 
1298:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1299:/usr/include/c++/5/bits/basic_string.h ****       /**
1300:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1301:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1302:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1303:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1304:/usr/include/c++/5/bits/basic_string.h ****        */
1305:/usr/include/c++/5/bits/basic_string.h ****       void
1306:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1307:/usr/include/c++/5/bits/basic_string.h ****       {
1308:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1309:/usr/include/c++/5/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1310:/usr/include/c++/5/bits/basic_string.h ****       }
1311:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1312:/usr/include/c++/5/bits/basic_string.h **** 
1313:/usr/include/c++/5/bits/basic_string.h ****       /**
1314:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert value of a string.
1315:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1316:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
1317:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1318:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1319:/usr/include/c++/5/bits/basic_string.h ****        *
1320:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1321:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1322:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1323:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1324:/usr/include/c++/5/bits/basic_string.h ****       */
1325:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
GAS LISTING /tmp/ccEjei2f.s 			page 58


1326:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1327:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1328:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1329:/usr/include/c++/5/bits/basic_string.h **** 
1330:/usr/include/c++/5/bits/basic_string.h ****       /**
1331:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a substring.
1332:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1333:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
1334:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1335:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1336:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1337:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1338:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1339:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1340:/usr/include/c++/5/bits/basic_string.h ****        *
1341:/usr/include/c++/5/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1342:/usr/include/c++/5/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1343:/usr/include/c++/5/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1344:/usr/include/c++/5/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1345:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1346:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1347:/usr/include/c++/5/bits/basic_string.h ****       */
1348:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1349:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1350:/usr/include/c++/5/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
1351:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1352:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1353:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1354:/usr/include/c++/5/bits/basic_string.h **** 
1355:/usr/include/c++/5/bits/basic_string.h ****       /**
1356:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C substring.
1357:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1358:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
1359:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1360:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1361:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1362:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1363:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1364:/usr/include/c++/5/bits/basic_string.h ****        *
1365:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1366:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1367:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1368:/usr/include/c++/5/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1369:/usr/include/c++/5/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1370:/usr/include/c++/5/bits/basic_string.h ****       */
1371:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1372:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1373:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1374:/usr/include/c++/5/bits/basic_string.h **** 
1375:/usr/include/c++/5/bits/basic_string.h ****       /**
1376:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C string.
1377:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1378:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
1379:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1380:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1381:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1382:/usr/include/c++/5/bits/basic_string.h ****        *  string.
GAS LISTING /tmp/ccEjei2f.s 			page 59


1383:/usr/include/c++/5/bits/basic_string.h ****        *
1384:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1385:/usr/include/c++/5/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1386:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1387:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1388:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1389:/usr/include/c++/5/bits/basic_string.h ****       */
1390:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1391:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1392:/usr/include/c++/5/bits/basic_string.h ****       {
1393:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1394:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1395:/usr/include/c++/5/bits/basic_string.h **** 			     traits_type::length(__s));
1396:/usr/include/c++/5/bits/basic_string.h ****       }
1397:/usr/include/c++/5/bits/basic_string.h **** 
1398:/usr/include/c++/5/bits/basic_string.h ****       /**
1399:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1400:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1401:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1402:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1403:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1404:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1405:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1406:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1407:/usr/include/c++/5/bits/basic_string.h ****        *
1408:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1409:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1410:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1411:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1412:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1413:/usr/include/c++/5/bits/basic_string.h ****       */
1414:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1415:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1416:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1417:/usr/include/c++/5/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1418:/usr/include/c++/5/bits/basic_string.h **** 
1419:/usr/include/c++/5/bits/basic_string.h ****       /**
1420:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert one character.
1421:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1422:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1423:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1424:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1425:/usr/include/c++/5/bits/basic_string.h ****        *
1426:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1427:/usr/include/c++/5/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1428:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1429:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1430:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1431:/usr/include/c++/5/bits/basic_string.h ****       */
1432:/usr/include/c++/5/bits/basic_string.h ****       iterator
1433:/usr/include/c++/5/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1434:/usr/include/c++/5/bits/basic_string.h ****       {
1435:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1436:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1437:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1438:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1439:/usr/include/c++/5/bits/basic_string.h ****       }
GAS LISTING /tmp/ccEjei2f.s 			page 60


1440:/usr/include/c++/5/bits/basic_string.h **** 
1441:/usr/include/c++/5/bits/basic_string.h ****       /**
1442:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove characters.
1443:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1444:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1445:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1446:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1447:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1448:/usr/include/c++/5/bits/basic_string.h ****        *
1449:/usr/include/c++/5/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1450:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1451:/usr/include/c++/5/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1452:/usr/include/c++/5/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1453:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1454:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1455:/usr/include/c++/5/bits/basic_string.h ****       */
1456:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1457:/usr/include/c++/5/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1458:/usr/include/c++/5/bits/basic_string.h ****       {
1459:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(_M_check(__pos, "basic_string::erase"),
1460:/usr/include/c++/5/bits/basic_string.h **** 		       _M_limit(__pos, __n));
1461:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
1462:/usr/include/c++/5/bits/basic_string.h ****       }
1463:/usr/include/c++/5/bits/basic_string.h **** 
1464:/usr/include/c++/5/bits/basic_string.h ****       /**
1465:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove one character.
1466:/usr/include/c++/5/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1467:/usr/include/c++/5/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1468:/usr/include/c++/5/bits/basic_string.h ****        *
1469:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1470:/usr/include/c++/5/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1471:/usr/include/c++/5/bits/basic_string.h ****       */
1472:/usr/include/c++/5/bits/basic_string.h ****       iterator
1473:/usr/include/c++/5/bits/basic_string.h ****       erase(__const_iterator __position)
1474:/usr/include/c++/5/bits/basic_string.h ****       {
1475:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1476:/usr/include/c++/5/bits/basic_string.h **** 				 && __position < end());
1477:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1478:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1479:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1480:/usr/include/c++/5/bits/basic_string.h ****       }
1481:/usr/include/c++/5/bits/basic_string.h **** 
1482:/usr/include/c++/5/bits/basic_string.h ****       /**
1483:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1484:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1485:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1486:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1487:/usr/include/c++/5/bits/basic_string.h ****        *
1488:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1489:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1490:/usr/include/c++/5/bits/basic_string.h ****       */
1491:/usr/include/c++/5/bits/basic_string.h ****       iterator
1492:/usr/include/c++/5/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1493:/usr/include/c++/5/bits/basic_string.h ****       {
1494:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1495:/usr/include/c++/5/bits/basic_string.h **** 				 && __last <= end());
1496:/usr/include/c++/5/bits/basic_string.h ****         const size_type __pos = __first - begin();
GAS LISTING /tmp/ccEjei2f.s 			page 61


1497:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(__pos, __last - __first);
1498:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1499:/usr/include/c++/5/bits/basic_string.h ****       }
1500:/usr/include/c++/5/bits/basic_string.h **** 
1501:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1502:/usr/include/c++/5/bits/basic_string.h ****       /**
1503:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove the last character.
1504:/usr/include/c++/5/bits/basic_string.h ****        *
1505:/usr/include/c++/5/bits/basic_string.h ****        *  The string must be non-empty.
1506:/usr/include/c++/5/bits/basic_string.h ****        */
1507:/usr/include/c++/5/bits/basic_string.h ****       void
1508:/usr/include/c++/5/bits/basic_string.h ****       pop_back() noexcept
1509:/usr/include/c++/5/bits/basic_string.h ****       { _M_erase(size()-1, 1); }
1510:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1511:/usr/include/c++/5/bits/basic_string.h **** 
1512:/usr/include/c++/5/bits/basic_string.h ****       /**
1513:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1514:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1515:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1516:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
1517:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1518:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1519:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1520:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1521:/usr/include/c++/5/bits/basic_string.h ****        *
1522:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1523:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1524:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1525:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1526:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1527:/usr/include/c++/5/bits/basic_string.h ****        *  error is thrown.
1528:/usr/include/c++/5/bits/basic_string.h ****       */
1529:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1530:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1531:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1532:/usr/include/c++/5/bits/basic_string.h **** 
1533:/usr/include/c++/5/bits/basic_string.h ****       /**
1534:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1535:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1536:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1537:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
1538:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1539:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1540:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1541:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1542:/usr/include/c++/5/bits/basic_string.h ****        *  __str.size().
1543:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1544:/usr/include/c++/5/bits/basic_string.h ****        *
1545:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1546:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1547:/usr/include/c++/5/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1548:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1549:/usr/include/c++/5/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1550:/usr/include/c++/5/bits/basic_string.h ****       */
1551:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1552:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1553:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
GAS LISTING /tmp/ccEjei2f.s 			page 62


1554:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1555:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1556:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1557:/usr/include/c++/5/bits/basic_string.h **** 
1558:/usr/include/c++/5/bits/basic_string.h ****       /**
1559:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1560:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1561:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1562:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
1563:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1564:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1565:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1566:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1567:/usr/include/c++/5/bits/basic_string.h ****        *
1568:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1569:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1570:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1571:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1572:/usr/include/c++/5/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1573:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1574:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1575:/usr/include/c++/5/bits/basic_string.h ****       */
1576:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1577:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1578:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2)
1579:/usr/include/c++/5/bits/basic_string.h ****       {
1580:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1581:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1582:/usr/include/c++/5/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1583:/usr/include/c++/5/bits/basic_string.h ****       }
1584:/usr/include/c++/5/bits/basic_string.h **** 
1585:/usr/include/c++/5/bits/basic_string.h ****       /**
1586:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1587:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1588:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1589:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
1590:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1591:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1592:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1593:/usr/include/c++/5/bits/basic_string.h ****        *
1594:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1595:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1596:/usr/include/c++/5/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1597:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1598:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1599:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1600:/usr/include/c++/5/bits/basic_string.h ****       */
1601:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1602:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1603:/usr/include/c++/5/bits/basic_string.h ****       {
1604:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1605:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1606:/usr/include/c++/5/bits/basic_string.h ****       }
1607:/usr/include/c++/5/bits/basic_string.h **** 
1608:/usr/include/c++/5/bits/basic_string.h ****       /**
1609:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1610:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
GAS LISTING /tmp/ccEjei2f.s 			page 63


1611:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1612:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1613:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
1614:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1615:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1616:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1617:/usr/include/c++/5/bits/basic_string.h ****        *
1618:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1619:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1620:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1621:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1622:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1623:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1624:/usr/include/c++/5/bits/basic_string.h ****       */
1625:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1626:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1627:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1628:/usr/include/c++/5/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1629:/usr/include/c++/5/bits/basic_string.h **** 
1630:/usr/include/c++/5/bits/basic_string.h ****       /**
1631:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1632:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1633:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1634:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String value to insert.
1635:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1636:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1637:/usr/include/c++/5/bits/basic_string.h ****        *
1638:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1639:/usr/include/c++/5/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1640:/usr/include/c++/5/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1641:/usr/include/c++/5/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1642:/usr/include/c++/5/bits/basic_string.h ****       */
1643:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1644:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1645:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string& __str)
1646:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1647:/usr/include/c++/5/bits/basic_string.h **** 
1648:/usr/include/c++/5/bits/basic_string.h ****       /**
1649:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
1650:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1651:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1652:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
1653:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
1654:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1655:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1656:/usr/include/c++/5/bits/basic_string.h ****        *
1657:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1658:/usr/include/c++/5/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
1659:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1660:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1661:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1662:/usr/include/c++/5/bits/basic_string.h ****       */
1663:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1664:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1665:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
1666:/usr/include/c++/5/bits/basic_string.h ****       {
1667:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
GAS LISTING /tmp/ccEjei2f.s 			page 64


1668:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1669:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
1670:/usr/include/c++/5/bits/basic_string.h ****       }
1671:/usr/include/c++/5/bits/basic_string.h **** 
1672:/usr/include/c++/5/bits/basic_string.h ****       /**
1673:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
1674:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1675:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1676:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
1677:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1678:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1679:/usr/include/c++/5/bits/basic_string.h ****        *
1680:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1681:/usr/include/c++/5/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
1682:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1683:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1684:/usr/include/c++/5/bits/basic_string.h ****       */
1685:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1686:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
1687:/usr/include/c++/5/bits/basic_string.h ****       {
1688:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1689:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
1690:/usr/include/c++/5/bits/basic_string.h ****       }
1691:/usr/include/c++/5/bits/basic_string.h **** 
1692:/usr/include/c++/5/bits/basic_string.h ****       /**
1693:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
1694:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1695:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1696:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1697:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
1698:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1699:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1700:/usr/include/c++/5/bits/basic_string.h ****        *
1701:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1702:/usr/include/c++/5/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
1703:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1704:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1705:/usr/include/c++/5/bits/basic_string.h ****       */
1706:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1707:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
1708:/usr/include/c++/5/bits/basic_string.h **** 	      _CharT __c)
1709:/usr/include/c++/5/bits/basic_string.h ****       {
1710:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1711:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1712:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
1713:/usr/include/c++/5/bits/basic_string.h ****       }
1714:/usr/include/c++/5/bits/basic_string.h **** 
1715:/usr/include/c++/5/bits/basic_string.h ****       /**
1716:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
1717:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1718:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1719:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
1720:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
1721:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1722:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1723:/usr/include/c++/5/bits/basic_string.h ****        *
1724:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
GAS LISTING /tmp/ccEjei2f.s 			page 65


1725:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1726:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1727:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1728:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1729:/usr/include/c++/5/bits/basic_string.h ****       */
1730:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1731:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1732:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1733:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1734:/usr/include/c++/5/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
1735:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1736:/usr/include/c++/5/bits/basic_string.h ****         {
1737:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1738:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= end());
1739:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1740:/usr/include/c++/5/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
1741:/usr/include/c++/5/bits/basic_string.h **** 					   std::__false_type());
1742:/usr/include/c++/5/bits/basic_string.h **** 	}
1743:/usr/include/c++/5/bits/basic_string.h **** #else
1744:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1745:/usr/include/c++/5/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
1746:/usr/include/c++/5/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
1747:/usr/include/c++/5/bits/basic_string.h **** #else
1748:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1749:/usr/include/c++/5/bits/basic_string.h **** #endif
1750:/usr/include/c++/5/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
1751:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1752:/usr/include/c++/5/bits/basic_string.h ****         {
1753:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1754:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= end());
1755:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1756:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1757:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
1758:/usr/include/c++/5/bits/basic_string.h **** 	}
1759:/usr/include/c++/5/bits/basic_string.h **** #endif
1760:/usr/include/c++/5/bits/basic_string.h **** 
1761:/usr/include/c++/5/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
1762:/usr/include/c++/5/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
1763:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1764:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1765:/usr/include/c++/5/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
1766:/usr/include/c++/5/bits/basic_string.h ****       {
1767:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1768:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1769:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1770:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1771:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1772:/usr/include/c++/5/bits/basic_string.h ****       }
1773:/usr/include/c++/5/bits/basic_string.h **** 
1774:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1775:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1776:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
1777:/usr/include/c++/5/bits/basic_string.h ****       {
1778:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1779:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1780:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1781:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
GAS LISTING /tmp/ccEjei2f.s 			page 66


1782:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1783:/usr/include/c++/5/bits/basic_string.h ****       }
1784:/usr/include/c++/5/bits/basic_string.h **** 
1785:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1786:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1787:/usr/include/c++/5/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
1788:/usr/include/c++/5/bits/basic_string.h ****       {
1789:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1790:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1791:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1792:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1793:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1794:/usr/include/c++/5/bits/basic_string.h ****       }
1795:/usr/include/c++/5/bits/basic_string.h **** 
1796:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1797:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1798:/usr/include/c++/5/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
1799:/usr/include/c++/5/bits/basic_string.h ****       {
1800:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1801:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1802:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1803:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1804:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1805:/usr/include/c++/5/bits/basic_string.h ****       }
1806:/usr/include/c++/5/bits/basic_string.h **** 
1807:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1808:/usr/include/c++/5/bits/basic_string.h ****       /**
1809:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
1810:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1811:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1812:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1813:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1814:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1815:/usr/include/c++/5/bits/basic_string.h ****        *
1816:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1817:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1818:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1819:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1820:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1821:/usr/include/c++/5/bits/basic_string.h ****       */
1822:/usr/include/c++/5/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
1823:/usr/include/c++/5/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
1824:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
1825:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1826:/usr/include/c++/5/bits/basic_string.h **** 
1827:/usr/include/c++/5/bits/basic_string.h ****     private:
1828:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
1829:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
1830:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1831:/usr/include/c++/5/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
1832:/usr/include/c++/5/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
1833:/usr/include/c++/5/bits/basic_string.h **** 
1834:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1835:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
1836:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1837:/usr/include/c++/5/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
1838:/usr/include/c++/5/bits/basic_string.h **** 			    __false_type);
GAS LISTING /tmp/ccEjei2f.s 			page 67


1839:/usr/include/c++/5/bits/basic_string.h **** 
1840:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1841:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
1842:/usr/include/c++/5/bits/basic_string.h **** 		     _CharT __c);
1843:/usr/include/c++/5/bits/basic_string.h **** 
1844:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1845:/usr/include/c++/5/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
1846:/usr/include/c++/5/bits/basic_string.h **** 		 const size_type __len2);
1847:/usr/include/c++/5/bits/basic_string.h **** 
1848:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1849:/usr/include/c++/5/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
1850:/usr/include/c++/5/bits/basic_string.h **** 
1851:/usr/include/c++/5/bits/basic_string.h ****     public:
1852:/usr/include/c++/5/bits/basic_string.h **** 
1853:/usr/include/c++/5/bits/basic_string.h ****       /**
1854:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy substring into C string.
1855:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to copy value into.
1856:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
1857:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
1858:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Number of characters actually copied
1859:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
1860:/usr/include/c++/5/bits/basic_string.h ****        *
1861:/usr/include/c++/5/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
1862:/usr/include/c++/5/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
1863:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.
1864:/usr/include/c++/5/bits/basic_string.h ****       */
1865:/usr/include/c++/5/bits/basic_string.h ****       size_type
1866:/usr/include/c++/5/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
1867:/usr/include/c++/5/bits/basic_string.h **** 
1868:/usr/include/c++/5/bits/basic_string.h ****       /**
1869:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Swap contents with another string.
1870:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String to swap with.
1871:/usr/include/c++/5/bits/basic_string.h ****        *
1872:/usr/include/c++/5/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
1873:/usr/include/c++/5/bits/basic_string.h ****        *  time.
1874:/usr/include/c++/5/bits/basic_string.h ****       */
1875:/usr/include/c++/5/bits/basic_string.h ****       void
1876:/usr/include/c++/5/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
1877:/usr/include/c++/5/bits/basic_string.h **** 
1878:/usr/include/c++/5/bits/basic_string.h ****       // String operations:
1879:/usr/include/c++/5/bits/basic_string.h ****       /**
1880:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
1881:/usr/include/c++/5/bits/basic_string.h ****        *
1882:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1883:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
1884:/usr/include/c++/5/bits/basic_string.h ****       */
1885:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
1886:/usr/include/c++/5/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
1887:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
1888:/usr/include/c++/5/bits/basic_string.h **** 
1889:/usr/include/c++/5/bits/basic_string.h ****       /**
1890:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
1891:/usr/include/c++/5/bits/basic_string.h ****        *
1892:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1893:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
1894:/usr/include/c++/5/bits/basic_string.h ****       */
1895:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
GAS LISTING /tmp/ccEjei2f.s 			page 68


1896:/usr/include/c++/5/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
1897:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
1898:/usr/include/c++/5/bits/basic_string.h **** 
1899:/usr/include/c++/5/bits/basic_string.h ****       /**
1900:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
1901:/usr/include/c++/5/bits/basic_string.h ****       */
1902:/usr/include/c++/5/bits/basic_string.h ****       allocator_type
1903:/usr/include/c++/5/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
1904:/usr/include/c++/5/bits/basic_string.h ****       { return _M_get_allocator(); }
1905:/usr/include/c++/5/bits/basic_string.h **** 
1906:/usr/include/c++/5/bits/basic_string.h ****       /**
1907:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C substring.
1908:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1909:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
1910:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
1911:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1912:/usr/include/c++/5/bits/basic_string.h ****        *
1913:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
1914:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
1915:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
1916:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
1917:/usr/include/c++/5/bits/basic_string.h ****       */
1918:/usr/include/c++/5/bits/basic_string.h ****       size_type
1919:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
1920:/usr/include/c++/5/bits/basic_string.h **** 
1921:/usr/include/c++/5/bits/basic_string.h ****       /**
1922:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a string.
1923:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
1924:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1925:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1926:/usr/include/c++/5/bits/basic_string.h ****        *
1927:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
1928:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1929:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns npos.
1930:/usr/include/c++/5/bits/basic_string.h ****       */
1931:/usr/include/c++/5/bits/basic_string.h ****       size_type
1932:/usr/include/c++/5/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
1933:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
1934:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
1935:/usr/include/c++/5/bits/basic_string.h **** 
1936:/usr/include/c++/5/bits/basic_string.h ****       /**
1937:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C string.
1938:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1939:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1940:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1941:/usr/include/c++/5/bits/basic_string.h ****        *
1942:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
1943:/usr/include/c++/5/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
1944:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
1945:/usr/include/c++/5/bits/basic_string.h ****       */
1946:/usr/include/c++/5/bits/basic_string.h ****       size_type
1947:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
1948:/usr/include/c++/5/bits/basic_string.h ****       {
1949:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1950:/usr/include/c++/5/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
1951:/usr/include/c++/5/bits/basic_string.h ****       }
1952:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 69


1953:/usr/include/c++/5/bits/basic_string.h ****       /**
1954:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
1955:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
1956:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1957:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
1958:/usr/include/c++/5/bits/basic_string.h ****        *
1959:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
1960:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
1961:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
1962:/usr/include/c++/5/bits/basic_string.h ****       */
1963:/usr/include/c++/5/bits/basic_string.h ****       size_type
1964:/usr/include/c++/5/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
1965:/usr/include/c++/5/bits/basic_string.h **** 
1966:/usr/include/c++/5/bits/basic_string.h ****       /**
1967:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a string.
1968:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
1969:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
1970:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1971:/usr/include/c++/5/bits/basic_string.h ****        *
1972:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
1973:/usr/include/c++/5/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
1974:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
1975:/usr/include/c++/5/bits/basic_string.h ****       */
1976:/usr/include/c++/5/bits/basic_string.h ****       size_type
1977:/usr/include/c++/5/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
1978:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
1979:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
1980:/usr/include/c++/5/bits/basic_string.h **** 
1981:/usr/include/c++/5/bits/basic_string.h ****       /**
1982:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
1983:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1984:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
1985:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
1986:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1987:/usr/include/c++/5/bits/basic_string.h ****        *
1988:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
1989:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
1990:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
1991:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
1992:/usr/include/c++/5/bits/basic_string.h ****       */
1993:/usr/include/c++/5/bits/basic_string.h ****       size_type
1994:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
1995:/usr/include/c++/5/bits/basic_string.h **** 
1996:/usr/include/c++/5/bits/basic_string.h ****       /**
1997:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C string.
1998:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1999:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2000:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2001:/usr/include/c++/5/bits/basic_string.h ****        *
2002:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2003:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2004:/usr/include/c++/5/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2005:/usr/include/c++/5/bits/basic_string.h ****       */
2006:/usr/include/c++/5/bits/basic_string.h ****       size_type
2007:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2008:/usr/include/c++/5/bits/basic_string.h ****       {
2009:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
GAS LISTING /tmp/ccEjei2f.s 			page 70


2010:/usr/include/c++/5/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2011:/usr/include/c++/5/bits/basic_string.h ****       }
2012:/usr/include/c++/5/bits/basic_string.h **** 
2013:/usr/include/c++/5/bits/basic_string.h ****       /**
2014:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
2015:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2016:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2017:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2018:/usr/include/c++/5/bits/basic_string.h ****        *
2019:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2020:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2021:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2022:/usr/include/c++/5/bits/basic_string.h ****       */
2023:/usr/include/c++/5/bits/basic_string.h ****       size_type
2024:/usr/include/c++/5/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2025:/usr/include/c++/5/bits/basic_string.h **** 
2026:/usr/include/c++/5/bits/basic_string.h ****       /**
2027:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2028:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2029:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2030:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2031:/usr/include/c++/5/bits/basic_string.h ****        *
2032:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2033:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2034:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2035:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2036:/usr/include/c++/5/bits/basic_string.h ****       */
2037:/usr/include/c++/5/bits/basic_string.h ****       size_type
2038:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2039:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2040:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2041:/usr/include/c++/5/bits/basic_string.h **** 
2042:/usr/include/c++/5/bits/basic_string.h ****       /**
2043:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2044:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2045:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2046:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2047:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2048:/usr/include/c++/5/bits/basic_string.h ****        *
2049:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2050:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2051:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2052:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2053:/usr/include/c++/5/bits/basic_string.h ****       */
2054:/usr/include/c++/5/bits/basic_string.h ****       size_type
2055:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
2056:/usr/include/c++/5/bits/basic_string.h **** 
2057:/usr/include/c++/5/bits/basic_string.h ****       /**
2058:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2059:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2060:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2061:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2062:/usr/include/c++/5/bits/basic_string.h ****        *
2063:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2064:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2065:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2066:/usr/include/c++/5/bits/basic_string.h ****       */
GAS LISTING /tmp/ccEjei2f.s 			page 71


2067:/usr/include/c++/5/bits/basic_string.h ****       size_type
2068:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2069:/usr/include/c++/5/bits/basic_string.h ****       {
2070:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2071:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2072:/usr/include/c++/5/bits/basic_string.h ****       }
2073:/usr/include/c++/5/bits/basic_string.h **** 
2074:/usr/include/c++/5/bits/basic_string.h ****       /**
2075:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
2076:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2077:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2078:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2079:/usr/include/c++/5/bits/basic_string.h ****        *
2080:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2081:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2082:/usr/include/c++/5/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2083:/usr/include/c++/5/bits/basic_string.h ****        *
2084:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2085:/usr/include/c++/5/bits/basic_string.h ****       */
2086:/usr/include/c++/5/bits/basic_string.h ****       size_type
2087:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2088:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__c, __pos); }
2089:/usr/include/c++/5/bits/basic_string.h **** 
2090:/usr/include/c++/5/bits/basic_string.h ****       /**
2091:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2092:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2093:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2094:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2095:/usr/include/c++/5/bits/basic_string.h ****        *
2096:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2097:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2098:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2099:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2100:/usr/include/c++/5/bits/basic_string.h ****       */
2101:/usr/include/c++/5/bits/basic_string.h ****       size_type
2102:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2103:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2104:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2105:/usr/include/c++/5/bits/basic_string.h **** 
2106:/usr/include/c++/5/bits/basic_string.h ****       /**
2107:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2108:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2109:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2110:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2111:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2112:/usr/include/c++/5/bits/basic_string.h ****        *
2113:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2114:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2115:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2116:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2117:/usr/include/c++/5/bits/basic_string.h ****       */
2118:/usr/include/c++/5/bits/basic_string.h ****       size_type
2119:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
2120:/usr/include/c++/5/bits/basic_string.h **** 
2121:/usr/include/c++/5/bits/basic_string.h ****       /**
2122:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2123:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
GAS LISTING /tmp/ccEjei2f.s 			page 72


2124:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2125:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2126:/usr/include/c++/5/bits/basic_string.h ****        *
2127:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2128:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2129:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2130:/usr/include/c++/5/bits/basic_string.h ****       */
2131:/usr/include/c++/5/bits/basic_string.h ****       size_type
2132:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2133:/usr/include/c++/5/bits/basic_string.h ****       {
2134:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2135:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2136:/usr/include/c++/5/bits/basic_string.h ****       }
2137:/usr/include/c++/5/bits/basic_string.h **** 
2138:/usr/include/c++/5/bits/basic_string.h ****       /**
2139:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
2140:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2141:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2142:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2143:/usr/include/c++/5/bits/basic_string.h ****        *
2144:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2145:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2146:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2147:/usr/include/c++/5/bits/basic_string.h ****        *
2148:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2149:/usr/include/c++/5/bits/basic_string.h ****       */
2150:/usr/include/c++/5/bits/basic_string.h ****       size_type
2151:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2152:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2153:/usr/include/c++/5/bits/basic_string.h **** 
2154:/usr/include/c++/5/bits/basic_string.h ****       /**
2155:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2156:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2157:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2158:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2159:/usr/include/c++/5/bits/basic_string.h ****        *
2160:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2161:/usr/include/c++/5/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2162:/usr/include/c++/5/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2163:/usr/include/c++/5/bits/basic_string.h ****       */
2164:/usr/include/c++/5/bits/basic_string.h ****       size_type
2165:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2166:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2167:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2168:/usr/include/c++/5/bits/basic_string.h **** 
2169:/usr/include/c++/5/bits/basic_string.h ****       /**
2170:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2171:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2172:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2173:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2174:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2175:/usr/include/c++/5/bits/basic_string.h ****        *
2176:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2177:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2178:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2179:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2180:/usr/include/c++/5/bits/basic_string.h ****       */
GAS LISTING /tmp/ccEjei2f.s 			page 73


2181:/usr/include/c++/5/bits/basic_string.h ****       size_type
2182:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2183:/usr/include/c++/5/bits/basic_string.h **** 			size_type __n) const;
2184:/usr/include/c++/5/bits/basic_string.h **** 
2185:/usr/include/c++/5/bits/basic_string.h ****       /**
2186:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2187:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2188:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2189:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2190:/usr/include/c++/5/bits/basic_string.h ****        *
2191:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2192:/usr/include/c++/5/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2193:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2194:/usr/include/c++/5/bits/basic_string.h ****       */
2195:/usr/include/c++/5/bits/basic_string.h ****       size_type
2196:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2197:/usr/include/c++/5/bits/basic_string.h ****       {
2198:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2199:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2200:/usr/include/c++/5/bits/basic_string.h ****       }
2201:/usr/include/c++/5/bits/basic_string.h **** 
2202:/usr/include/c++/5/bits/basic_string.h ****       /**
2203:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a different character.
2204:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
2205:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2206:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2207:/usr/include/c++/5/bits/basic_string.h ****        *
2208:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2209:/usr/include/c++/5/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2210:/usr/include/c++/5/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2211:/usr/include/c++/5/bits/basic_string.h ****       */
2212:/usr/include/c++/5/bits/basic_string.h ****       size_type
2213:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2214:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2215:/usr/include/c++/5/bits/basic_string.h **** 
2216:/usr/include/c++/5/bits/basic_string.h ****       /**
2217:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2218:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2219:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2220:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2221:/usr/include/c++/5/bits/basic_string.h ****        *
2222:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2223:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2224:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2225:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2226:/usr/include/c++/5/bits/basic_string.h ****       */
2227:/usr/include/c++/5/bits/basic_string.h ****       size_type
2228:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2229:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2230:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2231:/usr/include/c++/5/bits/basic_string.h **** 
2232:/usr/include/c++/5/bits/basic_string.h ****       /**
2233:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2234:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2235:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2236:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2237:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
GAS LISTING /tmp/ccEjei2f.s 			page 74


2238:/usr/include/c++/5/bits/basic_string.h ****        *
2239:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2240:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2241:/usr/include/c++/5/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2242:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2243:/usr/include/c++/5/bits/basic_string.h ****       */
2244:/usr/include/c++/5/bits/basic_string.h ****       size_type
2245:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2246:/usr/include/c++/5/bits/basic_string.h **** 		       size_type __n) const;
2247:/usr/include/c++/5/bits/basic_string.h ****       /**
2248:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2249:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2250:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2251:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2252:/usr/include/c++/5/bits/basic_string.h ****        *
2253:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2254:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2255:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2256:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2257:/usr/include/c++/5/bits/basic_string.h ****       */
2258:/usr/include/c++/5/bits/basic_string.h ****       size_type
2259:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2260:/usr/include/c++/5/bits/basic_string.h ****       {
2261:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2262:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2263:/usr/include/c++/5/bits/basic_string.h ****       }
2264:/usr/include/c++/5/bits/basic_string.h **** 
2265:/usr/include/c++/5/bits/basic_string.h ****       /**
2266:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2267:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
2268:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2269:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2270:/usr/include/c++/5/bits/basic_string.h ****        *
2271:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2272:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2273:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2274:/usr/include/c++/5/bits/basic_string.h ****       */
2275:/usr/include/c++/5/bits/basic_string.h ****       size_type
2276:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2277:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2278:/usr/include/c++/5/bits/basic_string.h **** 
2279:/usr/include/c++/5/bits/basic_string.h ****       /**
2280:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Get a substring.
2281:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2282:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2283:/usr/include/c++/5/bits/basic_string.h ****        *  @return  The new string.
2284:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2285:/usr/include/c++/5/bits/basic_string.h ****        *
2286:/usr/include/c++/5/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2287:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2288:/usr/include/c++/5/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2289:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2290:/usr/include/c++/5/bits/basic_string.h ****       */
2291:/usr/include/c++/5/bits/basic_string.h ****       basic_string
2292:/usr/include/c++/5/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2293:/usr/include/c++/5/bits/basic_string.h ****       { return basic_string(*this,
2294:/usr/include/c++/5/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
GAS LISTING /tmp/ccEjei2f.s 			page 75


2295:/usr/include/c++/5/bits/basic_string.h **** 
2296:/usr/include/c++/5/bits/basic_string.h ****       /**
2297:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a string.
2298:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2299:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2300:/usr/include/c++/5/bits/basic_string.h ****        *
2301:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2302:/usr/include/c++/5/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2303:/usr/include/c++/5/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2304:/usr/include/c++/5/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2305:/usr/include/c++/5/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2306:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2307:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2308:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2309:/usr/include/c++/5/bits/basic_string.h ****       */
2310:/usr/include/c++/5/bits/basic_string.h ****       int
2311:/usr/include/c++/5/bits/basic_string.h ****       compare(const basic_string& __str) const
2312:/usr/include/c++/5/bits/basic_string.h ****       {
2313:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
2314:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __osize = __str.size();
2315:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2316:/usr/include/c++/5/bits/basic_string.h **** 
2317:/usr/include/c++/5/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2318:/usr/include/c++/5/bits/basic_string.h **** 	if (!__r)
2319:/usr/include/c++/5/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2320:/usr/include/c++/5/bits/basic_string.h **** 	return __r;
2321:/usr/include/c++/5/bits/basic_string.h ****       }
2322:/usr/include/c++/5/bits/basic_string.h **** 
2323:/usr/include/c++/5/bits/basic_string.h ****       /**
2324:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2325:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2326:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2327:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2328:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2329:/usr/include/c++/5/bits/basic_string.h ****        *
2330:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2331:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2332:/usr/include/c++/5/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2333:/usr/include/c++/5/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2334:/usr/include/c++/5/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2335:/usr/include/c++/5/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2336:/usr/include/c++/5/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2337:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling
2338:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2339:/usr/include/c++/5/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2340:/usr/include/c++/5/bits/basic_string.h ****        *  the shorter one is ordered first.
2341:/usr/include/c++/5/bits/basic_string.h ****       */
2342:/usr/include/c++/5/bits/basic_string.h ****       int
2343:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2344:/usr/include/c++/5/bits/basic_string.h **** 
2345:/usr/include/c++/5/bits/basic_string.h ****       /**
2346:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2347:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2348:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2349:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2350:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2351:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
GAS LISTING /tmp/ccEjei2f.s 			page 76


2352:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2353:/usr/include/c++/5/bits/basic_string.h ****        *
2354:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2355:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2356:/usr/include/c++/5/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2357:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2358:/usr/include/c++/5/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2359:/usr/include/c++/5/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2360:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2361:/usr/include/c++/5/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2362:/usr/include/c++/5/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2363:/usr/include/c++/5/bits/basic_string.h ****        *  calling
2364:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2365:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2366:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2367:/usr/include/c++/5/bits/basic_string.h ****       */
2368:/usr/include/c++/5/bits/basic_string.h ****       int
2369:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2370:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
2371:/usr/include/c++/5/bits/basic_string.h **** 
2372:/usr/include/c++/5/bits/basic_string.h ****       /**
2373:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a C string.
2374:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
2375:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2376:/usr/include/c++/5/bits/basic_string.h ****        *
2377:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2378:/usr/include/c++/5/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2379:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2380:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2381:/usr/include/c++/5/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2382:/usr/include/c++/5/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2383:/usr/include/c++/5/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2384:/usr/include/c++/5/bits/basic_string.h ****        *  ordered first.
2385:/usr/include/c++/5/bits/basic_string.h ****       */
2386:/usr/include/c++/5/bits/basic_string.h ****       int
2387:/usr/include/c++/5/bits/basic_string.h ****       compare(const _CharT* __s) const;
2388:/usr/include/c++/5/bits/basic_string.h **** 
2389:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2390:/usr/include/c++/5/bits/basic_string.h ****       // 5 String::compare specification questionable
2391:/usr/include/c++/5/bits/basic_string.h ****       /**
2392:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2393:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2394:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2395:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
2396:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2397:/usr/include/c++/5/bits/basic_string.h ****        *
2398:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2399:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
2400:/usr/include/c++/5/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
2401:/usr/include/c++/5/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
2402:/usr/include/c++/5/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
2403:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
2404:/usr/include/c++/5/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
2405:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two string by calling
2406:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
2407:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2408:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
GAS LISTING /tmp/ccEjei2f.s 			page 77


2409:/usr/include/c++/5/bits/basic_string.h ****       */
2410:/usr/include/c++/5/bits/basic_string.h ****       int
2411:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
2412:/usr/include/c++/5/bits/basic_string.h **** 
2413:/usr/include/c++/5/bits/basic_string.h ****       /**
2414:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
2415:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2416:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2417:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  character %array to compare against.
2418:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
2419:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2420:/usr/include/c++/5/bits/basic_string.h ****        *
2421:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2422:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
2423:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
2424:/usr/include/c++/5/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
2425:/usr/include/c++/5/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
2426:/usr/include/c++/5/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
2427:/usr/include/c++/5/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
2428:/usr/include/c++/5/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
2429:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two strings by calling
2430:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
2431:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2432:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
2433:/usr/include/c++/5/bits/basic_string.h ****        *
2434:/usr/include/c++/5/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
2435:/usr/include/c++/5/bits/basic_string.h ****        *  no special meaning.
2436:/usr/include/c++/5/bits/basic_string.h ****       */
2437:/usr/include/c++/5/bits/basic_string.h ****       int
2438:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
2439:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2) const;
2440:/usr/include/c++/5/bits/basic_string.h ****   };
2441:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
2442:/usr/include/c++/5/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
2443:/usr/include/c++/5/bits/basic_string.h ****   // Reference-counted COW string implentation
2444:/usr/include/c++/5/bits/basic_string.h **** 
2445:/usr/include/c++/5/bits/basic_string.h ****   /**
2446:/usr/include/c++/5/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
2447:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
2448:/usr/include/c++/5/bits/basic_string.h ****    *
2449:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup strings
2450:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup sequences
2451:/usr/include/c++/5/bits/basic_string.h ****    *
2452:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _CharT  Type of character
2453:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
2454:/usr/include/c++/5/bits/basic_string.h ****    *                   char_traits<_CharT>.
2455:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
2456:/usr/include/c++/5/bits/basic_string.h ****    *
2457:/usr/include/c++/5/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
2458:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
2459:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
2460:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
2461:/usr/include/c++/5/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
2462:/usr/include/c++/5/bits/basic_string.h ****    *
2463:/usr/include/c++/5/bits/basic_string.h ****    *  @doctodo
2464:/usr/include/c++/5/bits/basic_string.h ****    *
2465:/usr/include/c++/5/bits/basic_string.h ****    *
GAS LISTING /tmp/ccEjei2f.s 			page 78


2466:/usr/include/c++/5/bits/basic_string.h ****    *  Documentation?  What's that?
2467:/usr/include/c++/5/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
2468:/usr/include/c++/5/bits/basic_string.h ****    *
2469:/usr/include/c++/5/bits/basic_string.h ****    *  A string looks like this:
2470:/usr/include/c++/5/bits/basic_string.h ****    *
2471:/usr/include/c++/5/bits/basic_string.h ****    *  @code
2472:/usr/include/c++/5/bits/basic_string.h ****    *                                        [_Rep]
2473:/usr/include/c++/5/bits/basic_string.h ****    *                                        _M_length
2474:/usr/include/c++/5/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
2475:/usr/include/c++/5/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
2476:/usr/include/c++/5/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
2477:/usr/include/c++/5/bits/basic_string.h ****    *  @endcode
2478:/usr/include/c++/5/bits/basic_string.h ****    *
2479:/usr/include/c++/5/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
2480:/usr/include/c++/5/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
2481:/usr/include/c++/5/bits/basic_string.h ****    *  pointer to the header.
2482:/usr/include/c++/5/bits/basic_string.h ****    *
2483:/usr/include/c++/5/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
2484:/usr/include/c++/5/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
2485:/usr/include/c++/5/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
2486:/usr/include/c++/5/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
2487:/usr/include/c++/5/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
2488:/usr/include/c++/5/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
2489:/usr/include/c++/5/bits/basic_string.h ****    *  object at the front.
2490:/usr/include/c++/5/bits/basic_string.h ****    *
2491:/usr/include/c++/5/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
2492:/usr/include/c++/5/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
2493:/usr/include/c++/5/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
2494:/usr/include/c++/5/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
2495:/usr/include/c++/5/bits/basic_string.h ****    *  string length.)
2496:/usr/include/c++/5/bits/basic_string.h ****    *
2497:/usr/include/c++/5/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
2498:/usr/include/c++/5/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
2499:/usr/include/c++/5/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
2500:/usr/include/c++/5/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
2501:/usr/include/c++/5/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
2502:/usr/include/c++/5/bits/basic_string.h ****    *
2503:/usr/include/c++/5/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
2504:/usr/include/c++/5/bits/basic_string.h ****    *  for a C++ string implementation.
2505:/usr/include/c++/5/bits/basic_string.h ****   */
2506:/usr/include/c++/5/bits/basic_string.h ****   // 21.3  Template class basic_string
2507:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2508:/usr/include/c++/5/bits/basic_string.h ****     class basic_string
2509:/usr/include/c++/5/bits/basic_string.h ****     {
2510:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
2511:/usr/include/c++/5/bits/basic_string.h **** 
2512:/usr/include/c++/5/bits/basic_string.h ****       // Types:
2513:/usr/include/c++/5/bits/basic_string.h ****     public:
2514:/usr/include/c++/5/bits/basic_string.h ****       typedef _Traits					    traits_type;
2515:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
2516:/usr/include/c++/5/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
2517:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
2518:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
2519:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
2520:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
2521:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
2522:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
GAS LISTING /tmp/ccEjei2f.s 			page 79


2523:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
2524:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
2525:/usr/include/c++/5/bits/basic_string.h ****                                                             const_iterator;
2526:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
2527:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
2528:/usr/include/c++/5/bits/basic_string.h **** 
2529:/usr/include/c++/5/bits/basic_string.h ****     private:
2530:/usr/include/c++/5/bits/basic_string.h ****       // _Rep: string representation
2531:/usr/include/c++/5/bits/basic_string.h ****       //   Invariants:
2532:/usr/include/c++/5/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
2533:/usr/include/c++/5/bits/basic_string.h ****       //      must be kept null-terminated.
2534:/usr/include/c++/5/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
2535:/usr/include/c++/5/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
2536:/usr/include/c++/5/bits/basic_string.h ****       //   3. _M_refcount has three states:
2537:/usr/include/c++/5/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
2538:/usr/include/c++/5/bits/basic_string.h ****       //       0: one reference, non-const.
2539:/usr/include/c++/5/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
2540:/usr/include/c++/5/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
2541:/usr/include/c++/5/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
2542:/usr/include/c++/5/bits/basic_string.h ****       //      empty string representation needs no constructor.
2543:/usr/include/c++/5/bits/basic_string.h **** 
2544:/usr/include/c++/5/bits/basic_string.h ****       struct _Rep_base
2545:/usr/include/c++/5/bits/basic_string.h ****       {
2546:/usr/include/c++/5/bits/basic_string.h **** 	size_type		_M_length;
2547:/usr/include/c++/5/bits/basic_string.h **** 	size_type		_M_capacity;
2548:/usr/include/c++/5/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
2549:/usr/include/c++/5/bits/basic_string.h ****       };
2550:/usr/include/c++/5/bits/basic_string.h **** 
2551:/usr/include/c++/5/bits/basic_string.h ****       struct _Rep : _Rep_base
2552:/usr/include/c++/5/bits/basic_string.h ****       {
2553:/usr/include/c++/5/bits/basic_string.h **** 	// Types:
2554:/usr/include/c++/5/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
2555:/usr/include/c++/5/bits/basic_string.h **** 
2556:/usr/include/c++/5/bits/basic_string.h **** 	// (Public) Data members:
2557:/usr/include/c++/5/bits/basic_string.h **** 
2558:/usr/include/c++/5/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
2559:/usr/include/c++/5/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
2560:/usr/include/c++/5/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
2561:/usr/include/c++/5/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
2562:/usr/include/c++/5/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
2563:/usr/include/c++/5/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
2564:/usr/include/c++/5/bits/basic_string.h **** 	// look like this:
2565:/usr/include/c++/5/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
2566:/usr/include/c++/5/bits/basic_string.h **** 	// Solving for m:
2567:/usr/include/c++/5/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
2568:/usr/include/c++/5/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
2569:/usr/include/c++/5/bits/basic_string.h **** 	static const size_type	_S_max_size;
2570:/usr/include/c++/5/bits/basic_string.h **** 	static const _CharT	_S_terminal;
2571:/usr/include/c++/5/bits/basic_string.h **** 
2572:/usr/include/c++/5/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
2573:/usr/include/c++/5/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
2574:/usr/include/c++/5/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
2575:/usr/include/c++/5/bits/basic_string.h **** 
2576:/usr/include/c++/5/bits/basic_string.h ****         static _Rep&
2577:/usr/include/c++/5/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
2578:/usr/include/c++/5/bits/basic_string.h ****         { 
2579:/usr/include/c++/5/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
GAS LISTING /tmp/ccEjei2f.s 			page 80


2580:/usr/include/c++/5/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
2581:/usr/include/c++/5/bits/basic_string.h **** 	  // be reasonably safe in this case.
2582:/usr/include/c++/5/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
2583:/usr/include/c++/5/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
2584:/usr/include/c++/5/bits/basic_string.h **** 	}
2585:/usr/include/c++/5/bits/basic_string.h **** 
2586:/usr/include/c++/5/bits/basic_string.h ****         bool
2587:/usr/include/c++/5/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
2588:/usr/include/c++/5/bits/basic_string.h ****         { return this->_M_refcount < 0; }
2589:/usr/include/c++/5/bits/basic_string.h **** 
2590:/usr/include/c++/5/bits/basic_string.h ****         bool
2591:/usr/include/c++/5/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
2592:/usr/include/c++/5/bits/basic_string.h ****         { return this->_M_refcount > 0; }
2593:/usr/include/c++/5/bits/basic_string.h **** 
2594:/usr/include/c++/5/bits/basic_string.h ****         void
2595:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
2596:/usr/include/c++/5/bits/basic_string.h ****         { this->_M_refcount = -1; }
2597:/usr/include/c++/5/bits/basic_string.h **** 
2598:/usr/include/c++/5/bits/basic_string.h ****         void
2599:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
2600:/usr/include/c++/5/bits/basic_string.h ****         { this->_M_refcount = 0; }
2601:/usr/include/c++/5/bits/basic_string.h **** 
2602:/usr/include/c++/5/bits/basic_string.h **** 	void
2603:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
2604:/usr/include/c++/5/bits/basic_string.h **** 	{
2605:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2606:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2607:/usr/include/c++/5/bits/basic_string.h **** #endif
2608:/usr/include/c++/5/bits/basic_string.h **** 	    {
2609:/usr/include/c++/5/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
2610:/usr/include/c++/5/bits/basic_string.h **** 	      this->_M_length = __n;
2611:/usr/include/c++/5/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
2612:/usr/include/c++/5/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
2613:/usr/include/c++/5/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
2614:/usr/include/c++/5/bits/basic_string.h **** 	    }
2615:/usr/include/c++/5/bits/basic_string.h **** 	}
2616:/usr/include/c++/5/bits/basic_string.h **** 
2617:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2618:/usr/include/c++/5/bits/basic_string.h **** 	_M_refdata() throw()
2619:/usr/include/c++/5/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
2620:/usr/include/c++/5/bits/basic_string.h **** 
2621:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2622:/usr/include/c++/5/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
2623:/usr/include/c++/5/bits/basic_string.h **** 	{
2624:/usr/include/c++/5/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
2625:/usr/include/c++/5/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
2626:/usr/include/c++/5/bits/basic_string.h **** 	}
2627:/usr/include/c++/5/bits/basic_string.h **** 
2628:/usr/include/c++/5/bits/basic_string.h **** 	// Create & Destroy
2629:/usr/include/c++/5/bits/basic_string.h **** 	static _Rep*
2630:/usr/include/c++/5/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
2631:/usr/include/c++/5/bits/basic_string.h **** 
2632:/usr/include/c++/5/bits/basic_string.h **** 	void
2633:/usr/include/c++/5/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
2634:/usr/include/c++/5/bits/basic_string.h **** 	{
2635:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2636:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
GAS LISTING /tmp/ccEjei2f.s 			page 81


2637:/usr/include/c++/5/bits/basic_string.h **** #endif
2638:/usr/include/c++/5/bits/basic_string.h **** 	    {
2639:/usr/include/c++/5/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
2640:/usr/include/c++/5/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
2641:/usr/include/c++/5/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
2642:/usr/include/c++/5/bits/basic_string.h **** 							 -1) <= 0)
2643:/usr/include/c++/5/bits/basic_string.h **** 		{
2644:/usr/include/c++/5/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
2645:/usr/include/c++/5/bits/basic_string.h **** 		  _M_destroy(__a);
2646:/usr/include/c++/5/bits/basic_string.h **** 		}
2647:/usr/include/c++/5/bits/basic_string.h **** 	    }
2648:/usr/include/c++/5/bits/basic_string.h **** 	}  // XXX MT
2649:/usr/include/c++/5/bits/basic_string.h **** 
2650:/usr/include/c++/5/bits/basic_string.h **** 	void
2651:/usr/include/c++/5/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
2652:/usr/include/c++/5/bits/basic_string.h **** 
2653:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2654:/usr/include/c++/5/bits/basic_string.h **** 	_M_refcopy() throw()
2655:/usr/include/c++/5/bits/basic_string.h **** 	{
2656:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2657:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2658:/usr/include/c++/5/bits/basic_string.h **** #endif
2659:/usr/include/c++/5/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
2660:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_refdata();
2661:/usr/include/c++/5/bits/basic_string.h **** 	}  // XXX MT
2662:/usr/include/c++/5/bits/basic_string.h **** 
2663:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2664:/usr/include/c++/5/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
2665:/usr/include/c++/5/bits/basic_string.h ****       };
2666:/usr/include/c++/5/bits/basic_string.h **** 
2667:/usr/include/c++/5/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
2668:/usr/include/c++/5/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
2669:/usr/include/c++/5/bits/basic_string.h ****       {
2670:/usr/include/c++/5/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
2671:/usr/include/c++/5/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
2672:/usr/include/c++/5/bits/basic_string.h **** 
2673:/usr/include/c++/5/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
2674:/usr/include/c++/5/bits/basic_string.h ****       };
2675:/usr/include/c++/5/bits/basic_string.h **** 
2676:/usr/include/c++/5/bits/basic_string.h ****     public:
2677:/usr/include/c++/5/bits/basic_string.h ****       // Data Members (public):
2678:/usr/include/c++/5/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
2679:/usr/include/c++/5/bits/basic_string.h ****       // size that the allocator can hold.
2680:/usr/include/c++/5/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
2681:/usr/include/c++/5/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
2682:/usr/include/c++/5/bits/basic_string.h **** 
2683:/usr/include/c++/5/bits/basic_string.h ****     private:
2684:/usr/include/c++/5/bits/basic_string.h ****       // Data Members (private):
2685:/usr/include/c++/5/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
2686:/usr/include/c++/5/bits/basic_string.h **** 
2687:/usr/include/c++/5/bits/basic_string.h ****       _CharT*
2688:/usr/include/c++/5/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
2689:/usr/include/c++/5/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
2690:/usr/include/c++/5/bits/basic_string.h **** 
2691:/usr/include/c++/5/bits/basic_string.h ****       _CharT*
2692:/usr/include/c++/5/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
2693:/usr/include/c++/5/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
GAS LISTING /tmp/ccEjei2f.s 			page 82


2694:/usr/include/c++/5/bits/basic_string.h **** 
2695:/usr/include/c++/5/bits/basic_string.h ****       _Rep*
2696:/usr/include/c++/5/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
2697:/usr/include/c++/5/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
2698:/usr/include/c++/5/bits/basic_string.h **** 
2699:/usr/include/c++/5/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
2700:/usr/include/c++/5/bits/basic_string.h ****       // but they do not call _M_leak.
2701:/usr/include/c++/5/bits/basic_string.h ****       iterator
2702:/usr/include/c++/5/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
2703:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data()); }
2704:/usr/include/c++/5/bits/basic_string.h **** 
2705:/usr/include/c++/5/bits/basic_string.h ****       iterator
2706:/usr/include/c++/5/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
2707:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
2708:/usr/include/c++/5/bits/basic_string.h **** 
2709:/usr/include/c++/5/bits/basic_string.h ****       void
2710:/usr/include/c++/5/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
2711:/usr/include/c++/5/bits/basic_string.h ****       {
2712:/usr/include/c++/5/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
2713:/usr/include/c++/5/bits/basic_string.h **** 	  _M_leak_hard();
2714:/usr/include/c++/5/bits/basic_string.h ****       }
2715:/usr/include/c++/5/bits/basic_string.h **** 
2716:/usr/include/c++/5/bits/basic_string.h ****       size_type
2717:/usr/include/c++/5/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
2718:/usr/include/c++/5/bits/basic_string.h ****       {
2719:/usr/include/c++/5/bits/basic_string.h **** 	if (__pos > this->size())
2720:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
2721:/usr/include/c++/5/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
2722:/usr/include/c++/5/bits/basic_string.h **** 				   __s, __pos, this->size());
2723:/usr/include/c++/5/bits/basic_string.h **** 	return __pos;
2724:/usr/include/c++/5/bits/basic_string.h ****       }
2725:/usr/include/c++/5/bits/basic_string.h **** 
2726:/usr/include/c++/5/bits/basic_string.h ****       void
2727:/usr/include/c++/5/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
2728:/usr/include/c++/5/bits/basic_string.h ****       {
2729:/usr/include/c++/5/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
2730:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
2731:/usr/include/c++/5/bits/basic_string.h ****       }
2732:/usr/include/c++/5/bits/basic_string.h **** 
2733:/usr/include/c++/5/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
2734:/usr/include/c++/5/bits/basic_string.h ****       size_type
2735:/usr/include/c++/5/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
2736:/usr/include/c++/5/bits/basic_string.h ****       {
2737:/usr/include/c++/5/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
2738:/usr/include/c++/5/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
2739:/usr/include/c++/5/bits/basic_string.h ****       }
2740:/usr/include/c++/5/bits/basic_string.h **** 
2741:/usr/include/c++/5/bits/basic_string.h ****       // True if _Rep and source do not overlap.
2742:/usr/include/c++/5/bits/basic_string.h ****       bool
2743:/usr/include/c++/5/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
2744:/usr/include/c++/5/bits/basic_string.h ****       {
2745:/usr/include/c++/5/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
2746:/usr/include/c++/5/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
2747:/usr/include/c++/5/bits/basic_string.h ****       }
2748:/usr/include/c++/5/bits/basic_string.h **** 
2749:/usr/include/c++/5/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
2750:/usr/include/c++/5/bits/basic_string.h ****       // traits_type::copy/move/assign.
GAS LISTING /tmp/ccEjei2f.s 			page 83


2751:/usr/include/c++/5/bits/basic_string.h ****       static void
2752:/usr/include/c++/5/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2753:/usr/include/c++/5/bits/basic_string.h ****       {
2754:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2755:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2756:/usr/include/c++/5/bits/basic_string.h **** 	else
2757:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
2758:/usr/include/c++/5/bits/basic_string.h ****       }
2759:/usr/include/c++/5/bits/basic_string.h **** 
2760:/usr/include/c++/5/bits/basic_string.h ****       static void
2761:/usr/include/c++/5/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2762:/usr/include/c++/5/bits/basic_string.h ****       {
2763:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2764:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2765:/usr/include/c++/5/bits/basic_string.h **** 	else
2766:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
2767:/usr/include/c++/5/bits/basic_string.h ****       }
2768:/usr/include/c++/5/bits/basic_string.h **** 
2769:/usr/include/c++/5/bits/basic_string.h ****       static void
2770:/usr/include/c++/5/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
2771:/usr/include/c++/5/bits/basic_string.h ****       {
2772:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2773:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
2774:/usr/include/c++/5/bits/basic_string.h **** 	else
2775:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
2776:/usr/include/c++/5/bits/basic_string.h ****       }
2777:/usr/include/c++/5/bits/basic_string.h **** 
2778:/usr/include/c++/5/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
2779:/usr/include/c++/5/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
2780:/usr/include/c++/5/bits/basic_string.h ****       template<class _Iterator>
2781:/usr/include/c++/5/bits/basic_string.h ****         static void
2782:/usr/include/c++/5/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
2783:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2784:/usr/include/c++/5/bits/basic_string.h ****         {
2785:/usr/include/c++/5/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, ++__p)
2786:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
2787:/usr/include/c++/5/bits/basic_string.h **** 	}
2788:/usr/include/c++/5/bits/basic_string.h **** 
2789:/usr/include/c++/5/bits/basic_string.h ****       static void
2790:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
2791:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2792:/usr/include/c++/5/bits/basic_string.h **** 
2793:/usr/include/c++/5/bits/basic_string.h ****       static void
2794:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
2795:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2796:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2797:/usr/include/c++/5/bits/basic_string.h **** 
2798:/usr/include/c++/5/bits/basic_string.h ****       static void
2799:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
2800:/usr/include/c++/5/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2801:/usr/include/c++/5/bits/basic_string.h **** 
2802:/usr/include/c++/5/bits/basic_string.h ****       static void
2803:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
2804:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2805:/usr/include/c++/5/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2806:/usr/include/c++/5/bits/basic_string.h **** 
2807:/usr/include/c++/5/bits/basic_string.h ****       static int
GAS LISTING /tmp/ccEjei2f.s 			page 84


2808:/usr/include/c++/5/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
2809:/usr/include/c++/5/bits/basic_string.h ****       {
2810:/usr/include/c++/5/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
2811:/usr/include/c++/5/bits/basic_string.h **** 
2812:/usr/include/c++/5/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
2813:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
2814:/usr/include/c++/5/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
2815:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
2816:/usr/include/c++/5/bits/basic_string.h **** 	else
2817:/usr/include/c++/5/bits/basic_string.h **** 	  return int(__d);
2818:/usr/include/c++/5/bits/basic_string.h ****       }
2819:/usr/include/c++/5/bits/basic_string.h **** 
2820:/usr/include/c++/5/bits/basic_string.h ****       void
2821:/usr/include/c++/5/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
2822:/usr/include/c++/5/bits/basic_string.h **** 
2823:/usr/include/c++/5/bits/basic_string.h ****       void
2824:/usr/include/c++/5/bits/basic_string.h ****       _M_leak_hard();
2825:/usr/include/c++/5/bits/basic_string.h **** 
2826:/usr/include/c++/5/bits/basic_string.h ****       static _Rep&
2827:/usr/include/c++/5/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
2828:/usr/include/c++/5/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
2829:/usr/include/c++/5/bits/basic_string.h **** 
2830:/usr/include/c++/5/bits/basic_string.h ****     public:
2831:/usr/include/c++/5/bits/basic_string.h ****       // Construct/copy/destroy:
2832:/usr/include/c++/5/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
2833:/usr/include/c++/5/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
2834:/usr/include/c++/5/bits/basic_string.h **** 
2835:/usr/include/c++/5/bits/basic_string.h ****       /**
2836:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
2837:/usr/include/c++/5/bits/basic_string.h ****        */
2838:/usr/include/c++/5/bits/basic_string.h ****       basic_string()
2839:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2840:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
2841:/usr/include/c++/5/bits/basic_string.h **** #else
2842:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
2843:/usr/include/c++/5/bits/basic_string.h **** #endif
2844:/usr/include/c++/5/bits/basic_string.h **** 
2845:/usr/include/c++/5/bits/basic_string.h ****       /**
2846:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
2847:/usr/include/c++/5/bits/basic_string.h ****        */
2848:/usr/include/c++/5/bits/basic_string.h ****       explicit
2849:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _Alloc& __a);
2850:/usr/include/c++/5/bits/basic_string.h **** 
2851:/usr/include/c++/5/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
2852:/usr/include/c++/5/bits/basic_string.h ****       /**
2853:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
2854:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2855:/usr/include/c++/5/bits/basic_string.h ****        */
2856:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str);
2857:/usr/include/c++/5/bits/basic_string.h ****       /**
2858:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
2859:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2860:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
2861:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
2862:/usr/include/c++/5/bits/basic_string.h ****        */
2863:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
2864:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n = npos);
GAS LISTING /tmp/ccEjei2f.s 			page 85


2865:/usr/include/c++/5/bits/basic_string.h ****       /**
2866:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
2867:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2868:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
2869:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
2870:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use.
2871:/usr/include/c++/5/bits/basic_string.h ****        */
2872:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
2873:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
2874:/usr/include/c++/5/bits/basic_string.h **** 
2875:/usr/include/c++/5/bits/basic_string.h ****       /**
2876:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
2877:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source character %array.
2878:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
2879:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2880:/usr/include/c++/5/bits/basic_string.h ****        *
2881:/usr/include/c++/5/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
2882:/usr/include/c++/5/bits/basic_string.h ****        *  has no special meaning.
2883:/usr/include/c++/5/bits/basic_string.h ****        */
2884:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
2885:/usr/include/c++/5/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
2886:/usr/include/c++/5/bits/basic_string.h ****       /**
2887:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
2888:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source C string.
2889:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2890:/usr/include/c++/5/bits/basic_string.h ****        */
2891:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
2892:/usr/include/c++/5/bits/basic_string.h ****       /**
2893:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
2894:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters.
2895:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to use.
2896:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2897:/usr/include/c++/5/bits/basic_string.h ****        */
2898:/usr/include/c++/5/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
2899:/usr/include/c++/5/bits/basic_string.h **** 
2900:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
2901:/usr/include/c++/5/bits/basic_string.h ****       /**
2902:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move construct string.
2903:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2904:/usr/include/c++/5/bits/basic_string.h ****        *
2905:/usr/include/c++/5/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
2906:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
2907:/usr/include/c++/5/bits/basic_string.h ****        **/
2908:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str)
2909:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2910:/usr/include/c++/5/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
2911:/usr/include/c++/5/bits/basic_string.h **** #endif
2912:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
2913:/usr/include/c++/5/bits/basic_string.h ****       {
2914:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2915:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
2916:/usr/include/c++/5/bits/basic_string.h **** #else
2917:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
2918:/usr/include/c++/5/bits/basic_string.h **** #endif
2919:/usr/include/c++/5/bits/basic_string.h ****       }
2920:/usr/include/c++/5/bits/basic_string.h **** 
2921:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccEjei2f.s 			page 86


2922:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
2923:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
2924:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2925:/usr/include/c++/5/bits/basic_string.h ****        */
2926:/usr/include/c++/5/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
2927:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
2928:/usr/include/c++/5/bits/basic_string.h **** 
2929:/usr/include/c++/5/bits/basic_string.h ****       /**
2930:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
2931:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __beg  Start of range.
2932:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __end  End of range.
2933:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2934:/usr/include/c++/5/bits/basic_string.h ****        */
2935:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
2936:/usr/include/c++/5/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
2937:/usr/include/c++/5/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
2938:/usr/include/c++/5/bits/basic_string.h **** 
2939:/usr/include/c++/5/bits/basic_string.h ****       /**
2940:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Destroy the string instance.
2941:/usr/include/c++/5/bits/basic_string.h ****        */
2942:/usr/include/c++/5/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
2943:/usr/include/c++/5/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
2944:/usr/include/c++/5/bits/basic_string.h **** 
2945:/usr/include/c++/5/bits/basic_string.h ****       /**
2946:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
2947:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2948:/usr/include/c++/5/bits/basic_string.h ****        */
2949:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2950:/usr/include/c++/5/bits/basic_string.h ****       operator=(const basic_string& __str) 
2951:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str); }
2952:/usr/include/c++/5/bits/basic_string.h **** 
2953:/usr/include/c++/5/bits/basic_string.h ****       /**
2954:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
2955:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
2956:/usr/include/c++/5/bits/basic_string.h ****        */
2957:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2958:/usr/include/c++/5/bits/basic_string.h ****       operator=(const _CharT* __s) 
2959:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__s); }
2960:/usr/include/c++/5/bits/basic_string.h **** 
2961:/usr/include/c++/5/bits/basic_string.h ****       /**
2962:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
2963:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Source character.
2964:/usr/include/c++/5/bits/basic_string.h ****        *
2965:/usr/include/c++/5/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
2966:/usr/include/c++/5/bits/basic_string.h ****        *  (*this)[0] == @a c.
2967:/usr/include/c++/5/bits/basic_string.h ****        */
2968:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2969:/usr/include/c++/5/bits/basic_string.h ****       operator=(_CharT __c) 
2970:/usr/include/c++/5/bits/basic_string.h ****       { 
2971:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(1, __c); 
2972:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
2973:/usr/include/c++/5/bits/basic_string.h ****       }
2974:/usr/include/c++/5/bits/basic_string.h **** 
2975:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
2976:/usr/include/c++/5/bits/basic_string.h ****       /**
2977:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
2978:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
GAS LISTING /tmp/ccEjei2f.s 			page 87


2979:/usr/include/c++/5/bits/basic_string.h ****        *
2980:/usr/include/c++/5/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
2981:/usr/include/c++/5/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
2982:/usr/include/c++/5/bits/basic_string.h ****        **/
2983:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
2984:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2985:/usr/include/c++/5/bits/basic_string.h ****       operator=(basic_string&& __str)
2986:/usr/include/c++/5/bits/basic_string.h ****       {
2987:/usr/include/c++/5/bits/basic_string.h **** 	// NB: DR 1204.
2988:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
2989:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
2990:/usr/include/c++/5/bits/basic_string.h ****       }
2991:/usr/include/c++/5/bits/basic_string.h **** 
2992:/usr/include/c++/5/bits/basic_string.h ****       /**
2993:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
2994:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
2995:/usr/include/c++/5/bits/basic_string.h ****        */
2996:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2997:/usr/include/c++/5/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
2998:/usr/include/c++/5/bits/basic_string.h ****       {
2999:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3000:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3001:/usr/include/c++/5/bits/basic_string.h ****       }
3002:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3003:/usr/include/c++/5/bits/basic_string.h **** 
3004:/usr/include/c++/5/bits/basic_string.h ****       // Iterators:
3005:/usr/include/c++/5/bits/basic_string.h ****       /**
3006:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3007:/usr/include/c++/5/bits/basic_string.h ****        *  the %string.  Unshares the string.
3008:/usr/include/c++/5/bits/basic_string.h ****        */
3009:/usr/include/c++/5/bits/basic_string.h ****       iterator
3010:/usr/include/c++/5/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3011:/usr/include/c++/5/bits/basic_string.h ****       {
3012:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3013:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data());
3014:/usr/include/c++/5/bits/basic_string.h ****       }
3015:/usr/include/c++/5/bits/basic_string.h **** 
3016:/usr/include/c++/5/bits/basic_string.h ****       /**
3017:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3018:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
3019:/usr/include/c++/5/bits/basic_string.h ****        */
3020:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3021:/usr/include/c++/5/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3022:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3023:/usr/include/c++/5/bits/basic_string.h **** 
3024:/usr/include/c++/5/bits/basic_string.h ****       /**
3025:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3026:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3027:/usr/include/c++/5/bits/basic_string.h ****        */
3028:/usr/include/c++/5/bits/basic_string.h ****       iterator
3029:/usr/include/c++/5/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3030:/usr/include/c++/5/bits/basic_string.h ****       {
3031:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3032:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3033:/usr/include/c++/5/bits/basic_string.h ****       }
3034:/usr/include/c++/5/bits/basic_string.h **** 
3035:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccEjei2f.s 			page 88


3036:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3037:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
3038:/usr/include/c++/5/bits/basic_string.h ****        */
3039:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3040:/usr/include/c++/5/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3041:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3042:/usr/include/c++/5/bits/basic_string.h **** 
3043:/usr/include/c++/5/bits/basic_string.h ****       /**
3044:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3045:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3046:/usr/include/c++/5/bits/basic_string.h ****        *  order.  Unshares the string.
3047:/usr/include/c++/5/bits/basic_string.h ****        */
3048:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
3049:/usr/include/c++/5/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3050:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3051:/usr/include/c++/5/bits/basic_string.h **** 
3052:/usr/include/c++/5/bits/basic_string.h ****       /**
3053:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3054:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3055:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
3056:/usr/include/c++/5/bits/basic_string.h ****        */
3057:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3058:/usr/include/c++/5/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3059:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3060:/usr/include/c++/5/bits/basic_string.h **** 
3061:/usr/include/c++/5/bits/basic_string.h ****       /**
3062:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3063:/usr/include/c++/5/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3064:/usr/include/c++/5/bits/basic_string.h ****        *  element order.  Unshares the string.
3065:/usr/include/c++/5/bits/basic_string.h ****        */
3066:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
3067:/usr/include/c++/5/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3068:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3069:/usr/include/c++/5/bits/basic_string.h **** 
3070:/usr/include/c++/5/bits/basic_string.h ****       /**
3071:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3072:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3073:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
3074:/usr/include/c++/5/bits/basic_string.h ****        */
3075:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3076:/usr/include/c++/5/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3077:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3078:/usr/include/c++/5/bits/basic_string.h **** 
3079:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3080:/usr/include/c++/5/bits/basic_string.h ****       /**
3081:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3082:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
3083:/usr/include/c++/5/bits/basic_string.h ****        */
3084:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3085:/usr/include/c++/5/bits/basic_string.h ****       cbegin() const noexcept
3086:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3087:/usr/include/c++/5/bits/basic_string.h **** 
3088:/usr/include/c++/5/bits/basic_string.h ****       /**
3089:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3090:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
3091:/usr/include/c++/5/bits/basic_string.h ****        */
3092:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
GAS LISTING /tmp/ccEjei2f.s 			page 89


3093:/usr/include/c++/5/bits/basic_string.h ****       cend() const noexcept
3094:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3095:/usr/include/c++/5/bits/basic_string.h **** 
3096:/usr/include/c++/5/bits/basic_string.h ****       /**
3097:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3098:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3099:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
3100:/usr/include/c++/5/bits/basic_string.h ****        */
3101:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3102:/usr/include/c++/5/bits/basic_string.h ****       crbegin() const noexcept
3103:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3104:/usr/include/c++/5/bits/basic_string.h **** 
3105:/usr/include/c++/5/bits/basic_string.h ****       /**
3106:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3107:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3108:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
3109:/usr/include/c++/5/bits/basic_string.h ****        */
3110:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3111:/usr/include/c++/5/bits/basic_string.h ****       crend() const noexcept
3112:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3113:/usr/include/c++/5/bits/basic_string.h **** #endif
3114:/usr/include/c++/5/bits/basic_string.h **** 
3115:/usr/include/c++/5/bits/basic_string.h ****     public:
3116:/usr/include/c++/5/bits/basic_string.h ****       // Capacity:
3117:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3118:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
3119:/usr/include/c++/5/bits/basic_string.h ****       size_type
3120:/usr/include/c++/5/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3121:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3122:/usr/include/c++/5/bits/basic_string.h **** 
3123:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3124:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
3125:/usr/include/c++/5/bits/basic_string.h ****       size_type
3126:/usr/include/c++/5/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3127:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3128:/usr/include/c++/5/bits/basic_string.h **** 
3129:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3130:/usr/include/c++/5/bits/basic_string.h ****       size_type
3131:/usr/include/c++/5/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3132:/usr/include/c++/5/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3133:/usr/include/c++/5/bits/basic_string.h **** 
3134:/usr/include/c++/5/bits/basic_string.h ****       /**
3135:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3136:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3137:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3138:/usr/include/c++/5/bits/basic_string.h ****        *
3139:/usr/include/c++/5/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3140:/usr/include/c++/5/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3141:/usr/include/c++/5/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3142:/usr/include/c++/5/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3143:/usr/include/c++/5/bits/basic_string.h ****        */
3144:/usr/include/c++/5/bits/basic_string.h ****       void
3145:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3146:/usr/include/c++/5/bits/basic_string.h **** 
3147:/usr/include/c++/5/bits/basic_string.h ****       /**
3148:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3149:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
GAS LISTING /tmp/ccEjei2f.s 			page 90


3150:/usr/include/c++/5/bits/basic_string.h ****        *
3151:/usr/include/c++/5/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3152:/usr/include/c++/5/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3153:/usr/include/c++/5/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3154:/usr/include/c++/5/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3155:/usr/include/c++/5/bits/basic_string.h ****        *  setting them to 0.
3156:/usr/include/c++/5/bits/basic_string.h ****        */
3157:/usr/include/c++/5/bits/basic_string.h ****       void
3158:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n)
3159:/usr/include/c++/5/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3160:/usr/include/c++/5/bits/basic_string.h **** 
3161:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3162:/usr/include/c++/5/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3163:/usr/include/c++/5/bits/basic_string.h ****       void
3164:/usr/include/c++/5/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3165:/usr/include/c++/5/bits/basic_string.h ****       {
3166:/usr/include/c++/5/bits/basic_string.h **** 	if (capacity() > size())
3167:/usr/include/c++/5/bits/basic_string.h **** 	  {
3168:/usr/include/c++/5/bits/basic_string.h **** 	    __try
3169:/usr/include/c++/5/bits/basic_string.h **** 	      { reserve(0); }
3170:/usr/include/c++/5/bits/basic_string.h **** 	    __catch(...)
3171:/usr/include/c++/5/bits/basic_string.h **** 	      { }
3172:/usr/include/c++/5/bits/basic_string.h **** 	  }
3173:/usr/include/c++/5/bits/basic_string.h ****       }
3174:/usr/include/c++/5/bits/basic_string.h **** #endif
3175:/usr/include/c++/5/bits/basic_string.h **** 
3176:/usr/include/c++/5/bits/basic_string.h ****       /**
3177:/usr/include/c++/5/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3178:/usr/include/c++/5/bits/basic_string.h ****        *  before needing to allocate more memory.
3179:/usr/include/c++/5/bits/basic_string.h ****        */
3180:/usr/include/c++/5/bits/basic_string.h ****       size_type
3181:/usr/include/c++/5/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3182:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3183:/usr/include/c++/5/bits/basic_string.h **** 
3184:/usr/include/c++/5/bits/basic_string.h ****       /**
3185:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3186:/usr/include/c++/5/bits/basic_string.h ****        *          characters.
3187:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3188:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3189:/usr/include/c++/5/bits/basic_string.h ****        *
3190:/usr/include/c++/5/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3191:/usr/include/c++/5/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3192:/usr/include/c++/5/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3193:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3194:/usr/include/c++/5/bits/basic_string.h ****        *
3195:/usr/include/c++/5/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3196:/usr/include/c++/5/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3197:/usr/include/c++/5/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3198:/usr/include/c++/5/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3199:/usr/include/c++/5/bits/basic_string.h ****        *  data.
3200:/usr/include/c++/5/bits/basic_string.h ****        */
3201:/usr/include/c++/5/bits/basic_string.h ****       void
3202:/usr/include/c++/5/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3203:/usr/include/c++/5/bits/basic_string.h **** 
3204:/usr/include/c++/5/bits/basic_string.h ****       /**
3205:/usr/include/c++/5/bits/basic_string.h ****        *  Erases the string, making it empty.
3206:/usr/include/c++/5/bits/basic_string.h ****        */
GAS LISTING /tmp/ccEjei2f.s 			page 91


3207:/usr/include/c++/5/bits/basic_string.h ****       // PR 56166: this should not throw.
3208:/usr/include/c++/5/bits/basic_string.h ****       void
3209:/usr/include/c++/5/bits/basic_string.h ****       clear()
3210:/usr/include/c++/5/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
3211:/usr/include/c++/5/bits/basic_string.h **** 
3212:/usr/include/c++/5/bits/basic_string.h ****       /**
3213:/usr/include/c++/5/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
3214:/usr/include/c++/5/bits/basic_string.h ****        *  <code>*this == ""</code>.
3215:/usr/include/c++/5/bits/basic_string.h ****        */
3216:/usr/include/c++/5/bits/basic_string.h ****       bool
3217:/usr/include/c++/5/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
3218:/usr/include/c++/5/bits/basic_string.h ****       { return this->size() == 0; }
3219:/usr/include/c++/5/bits/basic_string.h **** 
3220:/usr/include/c++/5/bits/basic_string.h ****       // Element access:
3221:/usr/include/c++/5/bits/basic_string.h ****       /**
3222:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3223:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3224:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
3225:/usr/include/c++/5/bits/basic_string.h ****        *
3226:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3227:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3228:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3229:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
3230:/usr/include/c++/5/bits/basic_string.h ****        */
3231:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3232:/usr/include/c++/5/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
3233:/usr/include/c++/5/bits/basic_string.h ****       {
3234:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
3235:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
3236:/usr/include/c++/5/bits/basic_string.h ****       }
3237:/usr/include/c++/5/bits/basic_string.h **** 
3238:/usr/include/c++/5/bits/basic_string.h ****       /**
3239:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3240:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3241:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3242:/usr/include/c++/5/bits/basic_string.h ****        *
3243:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3244:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3245:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3246:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)  Unshares the string.
3247:/usr/include/c++/5/bits/basic_string.h ****        */
3248:/usr/include/c++/5/bits/basic_string.h ****       reference
3249:/usr/include/c++/5/bits/basic_string.h ****       operator[](size_type __pos)
3250:/usr/include/c++/5/bits/basic_string.h ****       {
3251:/usr/include/c++/5/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
3252:/usr/include/c++/5/bits/basic_string.h **** 	// and in C++11 mode.
3253:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
3254:/usr/include/c++/5/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
3255:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
3256:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3257:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
3258:/usr/include/c++/5/bits/basic_string.h ****       }
3259:/usr/include/c++/5/bits/basic_string.h **** 
3260:/usr/include/c++/5/bits/basic_string.h ****       /**
3261:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3262:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
3263:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
GAS LISTING /tmp/ccEjei2f.s 			page 92


3264:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3265:/usr/include/c++/5/bits/basic_string.h ****        *
3266:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3267:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3268:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
3269:/usr/include/c++/5/bits/basic_string.h ****        */
3270:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3271:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n) const
3272:/usr/include/c++/5/bits/basic_string.h ****       {
3273:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= this->size())
3274:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3275:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3276:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
3277:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
3278:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
3279:/usr/include/c++/5/bits/basic_string.h ****       }
3280:/usr/include/c++/5/bits/basic_string.h **** 
3281:/usr/include/c++/5/bits/basic_string.h ****       /**
3282:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3283:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
3284:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3285:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3286:/usr/include/c++/5/bits/basic_string.h ****        *
3287:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3288:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3289:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
3290:/usr/include/c++/5/bits/basic_string.h ****        *  unsharing the string.
3291:/usr/include/c++/5/bits/basic_string.h ****        */
3292:/usr/include/c++/5/bits/basic_string.h ****       reference
3293:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n)
3294:/usr/include/c++/5/bits/basic_string.h ****       {
3295:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= size())
3296:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3297:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3298:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
3299:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
3300:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3301:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
3302:/usr/include/c++/5/bits/basic_string.h ****       }
3303:/usr/include/c++/5/bits/basic_string.h **** 
3304:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3305:/usr/include/c++/5/bits/basic_string.h ****       /**
3306:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
3307:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3308:/usr/include/c++/5/bits/basic_string.h ****        */
3309:/usr/include/c++/5/bits/basic_string.h ****       reference
3310:/usr/include/c++/5/bits/basic_string.h ****       front()
3311:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
3312:/usr/include/c++/5/bits/basic_string.h **** 
3313:/usr/include/c++/5/bits/basic_string.h ****       /**
3314:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
3315:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3316:/usr/include/c++/5/bits/basic_string.h ****        */
3317:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3318:/usr/include/c++/5/bits/basic_string.h ****       front() const _GLIBCXX_NOEXCEPT
3319:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
3320:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 93


3321:/usr/include/c++/5/bits/basic_string.h ****       /**
3322:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
3323:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3324:/usr/include/c++/5/bits/basic_string.h ****        */
3325:/usr/include/c++/5/bits/basic_string.h ****       reference
3326:/usr/include/c++/5/bits/basic_string.h ****       back()
3327:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
3328:/usr/include/c++/5/bits/basic_string.h **** 
3329:/usr/include/c++/5/bits/basic_string.h ****       /**
3330:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
3331:/usr/include/c++/5/bits/basic_string.h ****        *  last element of the %string.
3332:/usr/include/c++/5/bits/basic_string.h ****        */
3333:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3334:/usr/include/c++/5/bits/basic_string.h ****       back() const _GLIBCXX_NOEXCEPT
3335:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
3336:/usr/include/c++/5/bits/basic_string.h **** #endif
3337:/usr/include/c++/5/bits/basic_string.h **** 
3338:/usr/include/c++/5/bits/basic_string.h ****       // Modifiers:
3339:/usr/include/c++/5/bits/basic_string.h ****       /**
3340:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
3341:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3342:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3343:/usr/include/c++/5/bits/basic_string.h ****        */
3344:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3345:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const basic_string& __str)
3346:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__str); }
3347:/usr/include/c++/5/bits/basic_string.h **** 
3348:/usr/include/c++/5/bits/basic_string.h ****       /**
3349:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
3350:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3351:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3352:/usr/include/c++/5/bits/basic_string.h ****        */
3353:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3354:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const _CharT* __s)
3355:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__s); }
3356:/usr/include/c++/5/bits/basic_string.h **** 
3357:/usr/include/c++/5/bits/basic_string.h ****       /**
3358:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a character.
3359:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to append.
3360:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3361:/usr/include/c++/5/bits/basic_string.h ****        */
3362:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3363:/usr/include/c++/5/bits/basic_string.h ****       operator+=(_CharT __c)
3364:/usr/include/c++/5/bits/basic_string.h ****       { 
3365:/usr/include/c++/5/bits/basic_string.h **** 	this->push_back(__c);
3366:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3367:/usr/include/c++/5/bits/basic_string.h ****       }
3368:/usr/include/c++/5/bits/basic_string.h **** 
3369:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3370:/usr/include/c++/5/bits/basic_string.h ****       /**
3371:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3372:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
3373:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3374:/usr/include/c++/5/bits/basic_string.h ****        */
3375:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3376:/usr/include/c++/5/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
3377:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
GAS LISTING /tmp/ccEjei2f.s 			page 94


3378:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3379:/usr/include/c++/5/bits/basic_string.h **** 
3380:/usr/include/c++/5/bits/basic_string.h ****       /**
3381:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
3382:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3383:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3384:/usr/include/c++/5/bits/basic_string.h ****        */
3385:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3386:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str);
3387:/usr/include/c++/5/bits/basic_string.h **** 
3388:/usr/include/c++/5/bits/basic_string.h ****       /**
3389:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a substring.
3390:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3391:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
3392:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3393:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3394:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
3395:/usr/include/c++/5/bits/basic_string.h ****        *
3396:/usr/include/c++/5/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
3397:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
3398:/usr/include/c++/5/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
3399:/usr/include/c++/5/bits/basic_string.h ****        *  remainder of @a __str is appended.
3400:/usr/include/c++/5/bits/basic_string.h ****        */
3401:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3402:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n);
3403:/usr/include/c++/5/bits/basic_string.h **** 
3404:/usr/include/c++/5/bits/basic_string.h ****       /**
3405:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C substring.
3406:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3407:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3408:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3409:/usr/include/c++/5/bits/basic_string.h ****        */
3410:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3411:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
3412:/usr/include/c++/5/bits/basic_string.h **** 
3413:/usr/include/c++/5/bits/basic_string.h ****       /**
3414:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
3415:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3416:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3417:/usr/include/c++/5/bits/basic_string.h ****        */
3418:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3419:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s)
3420:/usr/include/c++/5/bits/basic_string.h ****       {
3421:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3422:/usr/include/c++/5/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
3423:/usr/include/c++/5/bits/basic_string.h ****       }
3424:/usr/include/c++/5/bits/basic_string.h **** 
3425:/usr/include/c++/5/bits/basic_string.h ****       /**
3426:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append multiple characters.
3427:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3428:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
3429:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3430:/usr/include/c++/5/bits/basic_string.h ****        *
3431:/usr/include/c++/5/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
3432:/usr/include/c++/5/bits/basic_string.h ****        */
3433:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3434:/usr/include/c++/5/bits/basic_string.h ****       append(size_type __n, _CharT __c);
GAS LISTING /tmp/ccEjei2f.s 			page 95


3435:/usr/include/c++/5/bits/basic_string.h **** 
3436:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3437:/usr/include/c++/5/bits/basic_string.h ****       /**
3438:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3439:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
3440:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3441:/usr/include/c++/5/bits/basic_string.h ****        */
3442:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3443:/usr/include/c++/5/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
3444:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
3445:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3446:/usr/include/c++/5/bits/basic_string.h **** 
3447:/usr/include/c++/5/bits/basic_string.h ****       /**
3448:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a range of characters.
3449:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3450:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3451:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3452:/usr/include/c++/5/bits/basic_string.h ****        *
3453:/usr/include/c++/5/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
3454:/usr/include/c++/5/bits/basic_string.h ****        */
3455:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3456:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
3457:/usr/include/c++/5/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
3458:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
3459:/usr/include/c++/5/bits/basic_string.h **** 
3460:/usr/include/c++/5/bits/basic_string.h ****       /**
3461:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a single character.
3462:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to append.
3463:/usr/include/c++/5/bits/basic_string.h ****        */
3464:/usr/include/c++/5/bits/basic_string.h ****       void
3465:/usr/include/c++/5/bits/basic_string.h ****       push_back(_CharT __c)
3466:/usr/include/c++/5/bits/basic_string.h ****       { 
3467:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
3468:/usr/include/c++/5/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
3469:/usr/include/c++/5/bits/basic_string.h **** 	  this->reserve(__len);
3470:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
3471:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
3472:/usr/include/c++/5/bits/basic_string.h ****       }
3473:/usr/include/c++/5/bits/basic_string.h **** 
3474:/usr/include/c++/5/bits/basic_string.h ****       /**
3475:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3476:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
3477:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3478:/usr/include/c++/5/bits/basic_string.h ****        */
3479:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3480:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str);
3481:/usr/include/c++/5/bits/basic_string.h **** 
3482:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3483:/usr/include/c++/5/bits/basic_string.h ****       /**
3484:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3485:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
3486:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3487:/usr/include/c++/5/bits/basic_string.h ****        *
3488:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
3489:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3490:/usr/include/c++/5/bits/basic_string.h ****        */
3491:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
GAS LISTING /tmp/ccEjei2f.s 			page 96


3492:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3493:/usr/include/c++/5/bits/basic_string.h ****       assign(basic_string&& __str)
3494:/usr/include/c++/5/bits/basic_string.h ****       {
3495:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
3496:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3497:/usr/include/c++/5/bits/basic_string.h ****       }
3498:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3499:/usr/include/c++/5/bits/basic_string.h **** 
3500:/usr/include/c++/5/bits/basic_string.h ****       /**
3501:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
3502:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to use.
3503:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
3504:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3505:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3506:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
3507:/usr/include/c++/5/bits/basic_string.h ****        *
3508:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
3509:/usr/include/c++/5/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
3510:/usr/include/c++/5/bits/basic_string.h ****        *  is larger than the number of available characters in @a
3511:/usr/include/c++/5/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
3512:/usr/include/c++/5/bits/basic_string.h ****        */
3513:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3514:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
3515:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str._M_data()
3516:/usr/include/c++/5/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
3517:/usr/include/c++/5/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
3518:/usr/include/c++/5/bits/basic_string.h **** 
3519:/usr/include/c++/5/bits/basic_string.h ****       /**
3520:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a C substring.
3521:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
3522:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3523:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3524:/usr/include/c++/5/bits/basic_string.h ****        *
3525:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
3526:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
3527:/usr/include/c++/5/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
3528:/usr/include/c++/5/bits/basic_string.h ****        */
3529:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3530:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
3531:/usr/include/c++/5/bits/basic_string.h **** 
3532:/usr/include/c++/5/bits/basic_string.h ****       /**
3533:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
3534:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
3535:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3536:/usr/include/c++/5/bits/basic_string.h ****        *
3537:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
3538:/usr/include/c++/5/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
3539:/usr/include/c++/5/bits/basic_string.h ****        *  function returns.
3540:/usr/include/c++/5/bits/basic_string.h ****        */
3541:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3542:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s)
3543:/usr/include/c++/5/bits/basic_string.h ****       {
3544:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3545:/usr/include/c++/5/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
3546:/usr/include/c++/5/bits/basic_string.h ****       }
3547:/usr/include/c++/5/bits/basic_string.h **** 
3548:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccEjei2f.s 			page 97


3549:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
3550:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
3551:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
3552:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3553:/usr/include/c++/5/bits/basic_string.h ****        *
3554:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
3555:/usr/include/c++/5/bits/basic_string.h ****        *  character @a __c.
3556:/usr/include/c++/5/bits/basic_string.h ****        */
3557:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3558:/usr/include/c++/5/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
3559:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
3560:/usr/include/c++/5/bits/basic_string.h **** 
3561:/usr/include/c++/5/bits/basic_string.h ****       /**
3562:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
3563:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3564:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3565:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3566:/usr/include/c++/5/bits/basic_string.h ****        *
3567:/usr/include/c++/5/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
3568:/usr/include/c++/5/bits/basic_string.h ****       */
3569:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3570:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
3571:/usr/include/c++/5/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
3572:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
3573:/usr/include/c++/5/bits/basic_string.h **** 
3574:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3575:/usr/include/c++/5/bits/basic_string.h ****       /**
3576:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
3577:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
3578:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3579:/usr/include/c++/5/bits/basic_string.h ****        */
3580:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3581:/usr/include/c++/5/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
3582:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
3583:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3584:/usr/include/c++/5/bits/basic_string.h **** 
3585:/usr/include/c++/5/bits/basic_string.h ****       /**
3586:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3587:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3588:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
3589:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3590:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3591:/usr/include/c++/5/bits/basic_string.h ****        *
3592:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
3593:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
3594:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3595:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3596:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3597:/usr/include/c++/5/bits/basic_string.h ****       */
3598:/usr/include/c++/5/bits/basic_string.h ****       void
3599:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
3600:/usr/include/c++/5/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
3601:/usr/include/c++/5/bits/basic_string.h **** 
3602:/usr/include/c++/5/bits/basic_string.h ****       /**
3603:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
3604:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3605:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
GAS LISTING /tmp/ccEjei2f.s 			page 98


3606:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
3607:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3608:/usr/include/c++/5/bits/basic_string.h ****        *
3609:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
3610:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3611:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3612:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3613:/usr/include/c++/5/bits/basic_string.h ****       */
3614:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3615:/usr/include/c++/5/bits/basic_string.h ****         void
3616:/usr/include/c++/5/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
3617:/usr/include/c++/5/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
3618:/usr/include/c++/5/bits/basic_string.h **** 
3619:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3620:/usr/include/c++/5/bits/basic_string.h ****       /**
3621:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
3622:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3623:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
3624:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3625:/usr/include/c++/5/bits/basic_string.h ****        */
3626:/usr/include/c++/5/bits/basic_string.h ****       void
3627:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
3628:/usr/include/c++/5/bits/basic_string.h ****       {
3629:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
3630:/usr/include/c++/5/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
3631:/usr/include/c++/5/bits/basic_string.h ****       }
3632:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3633:/usr/include/c++/5/bits/basic_string.h **** 
3634:/usr/include/c++/5/bits/basic_string.h ****       /**
3635:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert value of a string.
3636:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3637:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
3638:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3639:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3640:/usr/include/c++/5/bits/basic_string.h ****        *
3641:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
3642:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3643:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3644:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3645:/usr/include/c++/5/bits/basic_string.h ****       */
3646:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3647:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
3648:/usr/include/c++/5/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
3649:/usr/include/c++/5/bits/basic_string.h **** 
3650:/usr/include/c++/5/bits/basic_string.h ****       /**
3651:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a substring.
3652:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3653:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
3654:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
3655:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
3656:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3657:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3658:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
3659:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
3660:/usr/include/c++/5/bits/basic_string.h ****        *
3661:/usr/include/c++/5/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
3662:/usr/include/c++/5/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
GAS LISTING /tmp/ccEjei2f.s 			page 99


3663:/usr/include/c++/5/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
3664:/usr/include/c++/5/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
3665:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
3666:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
3667:/usr/include/c++/5/bits/basic_string.h ****       */
3668:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3669:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
3670:/usr/include/c++/5/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
3671:/usr/include/c++/5/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
3672:/usr/include/c++/5/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
3673:/usr/include/c++/5/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
3674:/usr/include/c++/5/bits/basic_string.h **** 
3675:/usr/include/c++/5/bits/basic_string.h ****       /**
3676:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C substring.
3677:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3678:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
3679:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
3680:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3681:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3682:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3683:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3684:/usr/include/c++/5/bits/basic_string.h ****        *
3685:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
3686:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
3687:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
3688:/usr/include/c++/5/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
3689:/usr/include/c++/5/bits/basic_string.h ****        *  doesn't change if an error is thrown.
3690:/usr/include/c++/5/bits/basic_string.h ****       */
3691:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3692:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
3693:/usr/include/c++/5/bits/basic_string.h **** 
3694:/usr/include/c++/5/bits/basic_string.h ****       /**
3695:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C string.
3696:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3697:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
3698:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3699:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3700:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3701:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3702:/usr/include/c++/5/bits/basic_string.h ****        *
3703:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
3704:/usr/include/c++/5/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
3705:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
3706:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
3707:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3708:/usr/include/c++/5/bits/basic_string.h ****       */
3709:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3710:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
3711:/usr/include/c++/5/bits/basic_string.h ****       {
3712:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3713:/usr/include/c++/5/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
3714:/usr/include/c++/5/bits/basic_string.h ****       }
3715:/usr/include/c++/5/bits/basic_string.h **** 
3716:/usr/include/c++/5/bits/basic_string.h ****       /**
3717:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3718:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
3719:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
GAS LISTING /tmp/ccEjei2f.s 			page 100


3720:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3721:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3722:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3723:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3724:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3725:/usr/include/c++/5/bits/basic_string.h ****        *
3726:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
3727:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
3728:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
3729:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3730:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3731:/usr/include/c++/5/bits/basic_string.h ****       */
3732:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3733:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
3734:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
3735:/usr/include/c++/5/bits/basic_string.h **** 			      size_type(0), __n, __c); }
3736:/usr/include/c++/5/bits/basic_string.h **** 
3737:/usr/include/c++/5/bits/basic_string.h ****       /**
3738:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert one character.
3739:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
3740:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3741:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
3742:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3743:/usr/include/c++/5/bits/basic_string.h ****        *
3744:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
3745:/usr/include/c++/5/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
3746:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
3747:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3748:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3749:/usr/include/c++/5/bits/basic_string.h ****       */
3750:/usr/include/c++/5/bits/basic_string.h ****       iterator
3751:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
3752:/usr/include/c++/5/bits/basic_string.h ****       {
3753:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
3754:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
3755:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
3756:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3757:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3758:/usr/include/c++/5/bits/basic_string.h ****       }
3759:/usr/include/c++/5/bits/basic_string.h **** 
3760:/usr/include/c++/5/bits/basic_string.h ****       /**
3761:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove characters.
3762:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
3763:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
3764:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3765:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3766:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3767:/usr/include/c++/5/bits/basic_string.h ****        *
3768:/usr/include/c++/5/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
3769:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
3770:/usr/include/c++/5/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
3771:/usr/include/c++/5/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
3772:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3773:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3774:/usr/include/c++/5/bits/basic_string.h ****       */
3775:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3776:/usr/include/c++/5/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
GAS LISTING /tmp/ccEjei2f.s 			page 101


3777:/usr/include/c++/5/bits/basic_string.h ****       { 
3778:/usr/include/c++/5/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
3779:/usr/include/c++/5/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
3780:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3781:/usr/include/c++/5/bits/basic_string.h ****       }
3782:/usr/include/c++/5/bits/basic_string.h **** 
3783:/usr/include/c++/5/bits/basic_string.h ****       /**
3784:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove one character.
3785:/usr/include/c++/5/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
3786:/usr/include/c++/5/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
3787:/usr/include/c++/5/bits/basic_string.h ****        *
3788:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
3789:/usr/include/c++/5/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
3790:/usr/include/c++/5/bits/basic_string.h ****       */
3791:/usr/include/c++/5/bits/basic_string.h ****       iterator
3792:/usr/include/c++/5/bits/basic_string.h ****       erase(iterator __position)
3793:/usr/include/c++/5/bits/basic_string.h ****       {
3794:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
3795:/usr/include/c++/5/bits/basic_string.h **** 				 && __position < _M_iend());
3796:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
3797:/usr/include/c++/5/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
3798:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3799:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3800:/usr/include/c++/5/bits/basic_string.h ****       }
3801:/usr/include/c++/5/bits/basic_string.h **** 
3802:/usr/include/c++/5/bits/basic_string.h ****       /**
3803:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove a range of characters.
3804:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
3805:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
3806:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
3807:/usr/include/c++/5/bits/basic_string.h ****        *
3808:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
3809:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
3810:/usr/include/c++/5/bits/basic_string.h ****       */
3811:/usr/include/c++/5/bits/basic_string.h ****       iterator
3812:/usr/include/c++/5/bits/basic_string.h ****       erase(iterator __first, iterator __last);
3813:/usr/include/c++/5/bits/basic_string.h ****  
3814:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3815:/usr/include/c++/5/bits/basic_string.h ****       /**
3816:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove the last character.
3817:/usr/include/c++/5/bits/basic_string.h ****        *
3818:/usr/include/c++/5/bits/basic_string.h ****        *  The string must be non-empty.
3819:/usr/include/c++/5/bits/basic_string.h ****        */
3820:/usr/include/c++/5/bits/basic_string.h ****       void
3821:/usr/include/c++/5/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
3822:/usr/include/c++/5/bits/basic_string.h ****       { erase(size()-1, 1); }
3823:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3824:/usr/include/c++/5/bits/basic_string.h **** 
3825:/usr/include/c++/5/bits/basic_string.h ****       /**
3826:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3827:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3828:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
3829:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
3830:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3831:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3832:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3833:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
GAS LISTING /tmp/ccEjei2f.s 			page 102


3834:/usr/include/c++/5/bits/basic_string.h ****        *
3835:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
3836:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
3837:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
3838:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
3839:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
3840:/usr/include/c++/5/bits/basic_string.h ****        *  error is thrown.
3841:/usr/include/c++/5/bits/basic_string.h ****       */
3842:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3843:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
3844:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
3845:/usr/include/c++/5/bits/basic_string.h **** 
3846:/usr/include/c++/5/bits/basic_string.h ****       /**
3847:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3848:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
3849:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3850:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
3851:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
3852:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
3853:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3854:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
3855:/usr/include/c++/5/bits/basic_string.h ****        *  __str.size().
3856:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3857:/usr/include/c++/5/bits/basic_string.h ****        *
3858:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
3859:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
3860:/usr/include/c++/5/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
3861:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
3862:/usr/include/c++/5/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
3863:/usr/include/c++/5/bits/basic_string.h ****       */
3864:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3865:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
3866:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
3867:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
3868:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
3869:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
3870:/usr/include/c++/5/bits/basic_string.h **** 
3871:/usr/include/c++/5/bits/basic_string.h ****       /**
3872:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
3873:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3874:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3875:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
3876:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
3877:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3878:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
3879:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3880:/usr/include/c++/5/bits/basic_string.h ****        *
3881:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
3882:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
3883:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
3884:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
3885:/usr/include/c++/5/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
3886:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
3887:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
3888:/usr/include/c++/5/bits/basic_string.h ****       */
3889:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3890:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
GAS LISTING /tmp/ccEjei2f.s 			page 103


3891:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2);
3892:/usr/include/c++/5/bits/basic_string.h **** 
3893:/usr/include/c++/5/bits/basic_string.h ****       /**
3894:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
3895:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3896:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3897:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
3898:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3899:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
3900:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3901:/usr/include/c++/5/bits/basic_string.h ****        *
3902:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
3903:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
3904:/usr/include/c++/5/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
3905:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
3906:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3907:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3908:/usr/include/c++/5/bits/basic_string.h ****       */
3909:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3910:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
3911:/usr/include/c++/5/bits/basic_string.h ****       {
3912:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3913:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
3914:/usr/include/c++/5/bits/basic_string.h ****       }
3915:/usr/include/c++/5/bits/basic_string.h **** 
3916:/usr/include/c++/5/bits/basic_string.h ****       /**
3917:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
3918:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3919:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3920:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
3921:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
3922:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3923:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
3924:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3925:/usr/include/c++/5/bits/basic_string.h ****        *
3926:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
3927:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
3928:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
3929:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
3930:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
3931:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
3932:/usr/include/c++/5/bits/basic_string.h ****       */
3933:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3934:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
3935:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
3936:/usr/include/c++/5/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
3937:/usr/include/c++/5/bits/basic_string.h **** 
3938:/usr/include/c++/5/bits/basic_string.h ****       /**
3939:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
3940:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3941:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3942:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String value to insert.
3943:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3944:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3945:/usr/include/c++/5/bits/basic_string.h ****        *
3946:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3947:/usr/include/c++/5/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
GAS LISTING /tmp/ccEjei2f.s 			page 104


3948:/usr/include/c++/5/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
3949:/usr/include/c++/5/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
3950:/usr/include/c++/5/bits/basic_string.h ****       */
3951:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3952:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
3953:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
3954:/usr/include/c++/5/bits/basic_string.h **** 
3955:/usr/include/c++/5/bits/basic_string.h ****       /**
3956:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
3957:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3958:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3959:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
3960:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
3961:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3962:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3963:/usr/include/c++/5/bits/basic_string.h ****        *
3964:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3965:/usr/include/c++/5/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
3966:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
3967:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
3968:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3969:/usr/include/c++/5/bits/basic_string.h ****       */
3970:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3971:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
3972:/usr/include/c++/5/bits/basic_string.h ****       {
3973:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
3974:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
3975:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
3976:/usr/include/c++/5/bits/basic_string.h ****       }
3977:/usr/include/c++/5/bits/basic_string.h **** 
3978:/usr/include/c++/5/bits/basic_string.h ****       /**
3979:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
3980:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3981:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3982:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
3983:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3984:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3985:/usr/include/c++/5/bits/basic_string.h ****        *
3986:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3987:/usr/include/c++/5/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
3988:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
3989:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
3990:/usr/include/c++/5/bits/basic_string.h ****       */
3991:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3992:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
3993:/usr/include/c++/5/bits/basic_string.h ****       {
3994:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3995:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
3996:/usr/include/c++/5/bits/basic_string.h ****       }
3997:/usr/include/c++/5/bits/basic_string.h **** 
3998:/usr/include/c++/5/bits/basic_string.h ****       /**
3999:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4000:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4001:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4002:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4003:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
4004:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
GAS LISTING /tmp/ccEjei2f.s 			page 105


4005:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4006:/usr/include/c++/5/bits/basic_string.h ****        *
4007:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4008:/usr/include/c++/5/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4009:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4010:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4011:/usr/include/c++/5/bits/basic_string.h ****       */
4012:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4013:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4014:/usr/include/c++/5/bits/basic_string.h ****       {
4015:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4016:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4017:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4018:/usr/include/c++/5/bits/basic_string.h ****       }
4019:/usr/include/c++/5/bits/basic_string.h **** 
4020:/usr/include/c++/5/bits/basic_string.h ****       /**
4021:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4022:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4023:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4024:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4025:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4026:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
4027:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4028:/usr/include/c++/5/bits/basic_string.h ****        *
4029:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4030:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4031:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4032:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4033:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
4034:/usr/include/c++/5/bits/basic_string.h ****       */
4035:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
4036:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
4037:/usr/include/c++/5/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4038:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4039:/usr/include/c++/5/bits/basic_string.h ****         {
4040:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4041:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4042:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4043:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4044:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4045:/usr/include/c++/5/bits/basic_string.h **** 	}
4046:/usr/include/c++/5/bits/basic_string.h **** 
4047:/usr/include/c++/5/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4048:/usr/include/c++/5/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4049:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4050:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4051:/usr/include/c++/5/bits/basic_string.h ****       {
4052:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4053:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4054:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4055:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4056:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4057:/usr/include/c++/5/bits/basic_string.h ****       }
4058:/usr/include/c++/5/bits/basic_string.h **** 
4059:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4060:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4061:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
GAS LISTING /tmp/ccEjei2f.s 			page 106


4062:/usr/include/c++/5/bits/basic_string.h ****       {
4063:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4064:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4065:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4066:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4067:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4068:/usr/include/c++/5/bits/basic_string.h ****       }
4069:/usr/include/c++/5/bits/basic_string.h **** 
4070:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4071:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4072:/usr/include/c++/5/bits/basic_string.h ****       {
4073:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4074:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4075:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4076:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4077:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4078:/usr/include/c++/5/bits/basic_string.h ****       }
4079:/usr/include/c++/5/bits/basic_string.h **** 
4080:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4081:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4082:/usr/include/c++/5/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
4083:/usr/include/c++/5/bits/basic_string.h ****       {
4084:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4085:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4086:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4087:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4088:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4089:/usr/include/c++/5/bits/basic_string.h ****       }
4090:/usr/include/c++/5/bits/basic_string.h ****       
4091:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
4092:/usr/include/c++/5/bits/basic_string.h ****       /**
4093:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
4094:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4095:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4096:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4097:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
4098:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4099:/usr/include/c++/5/bits/basic_string.h ****        *
4100:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4101:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4102:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4103:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4104:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
4105:/usr/include/c++/5/bits/basic_string.h ****       */
4106:/usr/include/c++/5/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
4107:/usr/include/c++/5/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
4108:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
4109:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
4110:/usr/include/c++/5/bits/basic_string.h **** 
4111:/usr/include/c++/5/bits/basic_string.h ****     private:
4112:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
4113:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
4114:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
4115:/usr/include/c++/5/bits/basic_string.h **** 			    _Integer __val, __true_type)
4116:/usr/include/c++/5/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
4117:/usr/include/c++/5/bits/basic_string.h **** 
4118:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
GAS LISTING /tmp/ccEjei2f.s 			page 107


4119:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
4120:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
4121:/usr/include/c++/5/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
4122:/usr/include/c++/5/bits/basic_string.h **** 
4123:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4124:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
4125:/usr/include/c++/5/bits/basic_string.h **** 		     _CharT __c);
4126:/usr/include/c++/5/bits/basic_string.h **** 
4127:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4128:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
4129:/usr/include/c++/5/bits/basic_string.h **** 		      size_type __n2);
4130:/usr/include/c++/5/bits/basic_string.h **** 
4131:/usr/include/c++/5/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
4132:/usr/include/c++/5/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
4133:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4134:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4135:/usr/include/c++/5/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
4136:/usr/include/c++/5/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
4137:/usr/include/c++/5/bits/basic_string.h **** 	{
4138:/usr/include/c++/5/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
4139:/usr/include/c++/5/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
4140:/usr/include/c++/5/bits/basic_string.h **** 	}
4141:/usr/include/c++/5/bits/basic_string.h **** 
4142:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
4143:/usr/include/c++/5/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
4144:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
4145:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4146:/usr/include/c++/5/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
4147:/usr/include/c++/5/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
4148:/usr/include/c++/5/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
4149:/usr/include/c++/5/bits/basic_string.h **** 				    __end, __a); }
4150:/usr/include/c++/5/bits/basic_string.h **** 
4151:/usr/include/c++/5/bits/basic_string.h ****       static _CharT*
4152:/usr/include/c++/5/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
4153:/usr/include/c++/5/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
4154:/usr/include/c++/5/bits/basic_string.h **** 
4155:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4156:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4157:/usr/include/c++/5/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
4158:/usr/include/c++/5/bits/basic_string.h **** 	{
4159:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
4160:/usr/include/c++/5/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
4161:/usr/include/c++/5/bits/basic_string.h ****         }
4162:/usr/include/c++/5/bits/basic_string.h **** 
4163:/usr/include/c++/5/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
4164:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4165:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4166:/usr/include/c++/5/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
4167:/usr/include/c++/5/bits/basic_string.h **** 		      input_iterator_tag);
4168:/usr/include/c++/5/bits/basic_string.h **** 
4169:/usr/include/c++/5/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
4170:/usr/include/c++/5/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
4171:/usr/include/c++/5/bits/basic_string.h ****       template<class _FwdIterator>
4172:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4173:/usr/include/c++/5/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
4174:/usr/include/c++/5/bits/basic_string.h **** 		     forward_iterator_tag);
4175:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 108


4176:/usr/include/c++/5/bits/basic_string.h ****       static _CharT*
4177:/usr/include/c++/5/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
4178:/usr/include/c++/5/bits/basic_string.h **** 
4179:/usr/include/c++/5/bits/basic_string.h ****     public:
4180:/usr/include/c++/5/bits/basic_string.h **** 
4181:/usr/include/c++/5/bits/basic_string.h ****       /**
4182:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy substring into C string.
4183:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to copy value into.
4184:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
4185:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
4186:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Number of characters actually copied
4187:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4188:/usr/include/c++/5/bits/basic_string.h ****        *
4189:/usr/include/c++/5/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
4190:/usr/include/c++/5/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
4191:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.
4192:/usr/include/c++/5/bits/basic_string.h ****       */
4193:/usr/include/c++/5/bits/basic_string.h ****       size_type
4194:/usr/include/c++/5/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
4195:/usr/include/c++/5/bits/basic_string.h **** 
4196:/usr/include/c++/5/bits/basic_string.h ****       /**
4197:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Swap contents with another string.
4198:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String to swap with.
4199:/usr/include/c++/5/bits/basic_string.h ****        *
4200:/usr/include/c++/5/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
4201:/usr/include/c++/5/bits/basic_string.h ****        *  time.
4202:/usr/include/c++/5/bits/basic_string.h ****       */
4203:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
4204:/usr/include/c++/5/bits/basic_string.h ****       void
4205:/usr/include/c++/5/bits/basic_string.h ****       swap(basic_string& __s);
4206:/usr/include/c++/5/bits/basic_string.h **** 
4207:/usr/include/c++/5/bits/basic_string.h ****       // String operations:
4208:/usr/include/c++/5/bits/basic_string.h ****       /**
4209:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
4210:/usr/include/c++/5/bits/basic_string.h ****        *
4211:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4212:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
4213:/usr/include/c++/5/bits/basic_string.h ****       */
4214:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
4215:/usr/include/c++/5/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
4216:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
4217:/usr/include/c++/5/bits/basic_string.h **** 
4218:/usr/include/c++/5/bits/basic_string.h ****       /**
4219:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
4220:/usr/include/c++/5/bits/basic_string.h ****        *
4221:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4222:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
4223:/usr/include/c++/5/bits/basic_string.h ****       */
4224:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
4225:/usr/include/c++/5/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
4226:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
4227:/usr/include/c++/5/bits/basic_string.h **** 
4228:/usr/include/c++/5/bits/basic_string.h ****       /**
4229:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
4230:/usr/include/c++/5/bits/basic_string.h ****       */
4231:/usr/include/c++/5/bits/basic_string.h ****       allocator_type
4232:/usr/include/c++/5/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
GAS LISTING /tmp/ccEjei2f.s 			page 109


4233:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
4234:/usr/include/c++/5/bits/basic_string.h **** 
4235:/usr/include/c++/5/bits/basic_string.h ****       /**
4236:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C substring.
4237:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4238:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4239:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
4240:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4241:/usr/include/c++/5/bits/basic_string.h ****        *
4242:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
4243:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4244:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4245:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4246:/usr/include/c++/5/bits/basic_string.h ****       */
4247:/usr/include/c++/5/bits/basic_string.h ****       size_type
4248:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
4249:/usr/include/c++/5/bits/basic_string.h **** 
4250:/usr/include/c++/5/bits/basic_string.h ****       /**
4251:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a string.
4252:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
4253:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4254:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4255:/usr/include/c++/5/bits/basic_string.h ****        *
4256:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
4257:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
4258:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns npos.
4259:/usr/include/c++/5/bits/basic_string.h ****       */
4260:/usr/include/c++/5/bits/basic_string.h ****       size_type
4261:/usr/include/c++/5/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
4262:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4263:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
4264:/usr/include/c++/5/bits/basic_string.h **** 
4265:/usr/include/c++/5/bits/basic_string.h ****       /**
4266:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C string.
4267:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4268:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4269:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4270:/usr/include/c++/5/bits/basic_string.h ****        *
4271:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
4272:/usr/include/c++/5/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
4273:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4274:/usr/include/c++/5/bits/basic_string.h ****       */
4275:/usr/include/c++/5/bits/basic_string.h ****       size_type
4276:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
4277:/usr/include/c++/5/bits/basic_string.h ****       {
4278:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4279:/usr/include/c++/5/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
4280:/usr/include/c++/5/bits/basic_string.h ****       }
4281:/usr/include/c++/5/bits/basic_string.h **** 
4282:/usr/include/c++/5/bits/basic_string.h ****       /**
4283:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
4284:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4285:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4286:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4287:/usr/include/c++/5/bits/basic_string.h ****        *
4288:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
4289:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
GAS LISTING /tmp/ccEjei2f.s 			page 110


4290:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4291:/usr/include/c++/5/bits/basic_string.h ****       */
4292:/usr/include/c++/5/bits/basic_string.h ****       size_type
4293:/usr/include/c++/5/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
4294:/usr/include/c++/5/bits/basic_string.h **** 
4295:/usr/include/c++/5/bits/basic_string.h ****       /**
4296:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a string.
4297:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
4298:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4299:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4300:/usr/include/c++/5/bits/basic_string.h ****        *
4301:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
4302:/usr/include/c++/5/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
4303:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4304:/usr/include/c++/5/bits/basic_string.h ****       */
4305:/usr/include/c++/5/bits/basic_string.h ****       size_type
4306:/usr/include/c++/5/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
4307:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4308:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
4309:/usr/include/c++/5/bits/basic_string.h **** 
4310:/usr/include/c++/5/bits/basic_string.h ****       /**
4311:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
4312:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4313:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4314:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4315:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4316:/usr/include/c++/5/bits/basic_string.h ****        *
4317:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
4318:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4319:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4320:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4321:/usr/include/c++/5/bits/basic_string.h ****       */
4322:/usr/include/c++/5/bits/basic_string.h ****       size_type
4323:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
4324:/usr/include/c++/5/bits/basic_string.h **** 
4325:/usr/include/c++/5/bits/basic_string.h ****       /**
4326:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C string.
4327:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4328:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
4329:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
4330:/usr/include/c++/5/bits/basic_string.h ****        *
4331:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
4332:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
4333:/usr/include/c++/5/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
4334:/usr/include/c++/5/bits/basic_string.h ****       */
4335:/usr/include/c++/5/bits/basic_string.h ****       size_type
4336:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
4337:/usr/include/c++/5/bits/basic_string.h ****       {
4338:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4339:/usr/include/c++/5/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
4340:/usr/include/c++/5/bits/basic_string.h ****       }
4341:/usr/include/c++/5/bits/basic_string.h **** 
4342:/usr/include/c++/5/bits/basic_string.h ****       /**
4343:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
4344:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4345:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4346:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
GAS LISTING /tmp/ccEjei2f.s 			page 111


4347:/usr/include/c++/5/bits/basic_string.h ****        *
4348:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4349:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4350:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4351:/usr/include/c++/5/bits/basic_string.h ****       */
4352:/usr/include/c++/5/bits/basic_string.h ****       size_type
4353:/usr/include/c++/5/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
4354:/usr/include/c++/5/bits/basic_string.h **** 
4355:/usr/include/c++/5/bits/basic_string.h ****       /**
4356:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of string.
4357:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
4358:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4359:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4360:/usr/include/c++/5/bits/basic_string.h ****        *
4361:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4362:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4363:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4364:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4365:/usr/include/c++/5/bits/basic_string.h ****       */
4366:/usr/include/c++/5/bits/basic_string.h ****       size_type
4367:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
4368:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4369:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
4370:/usr/include/c++/5/bits/basic_string.h **** 
4371:/usr/include/c++/5/bits/basic_string.h ****       /**
4372:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
4373:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4374:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4375:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4376:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4377:/usr/include/c++/5/bits/basic_string.h ****        *
4378:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4379:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4380:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4381:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4382:/usr/include/c++/5/bits/basic_string.h ****       */
4383:/usr/include/c++/5/bits/basic_string.h ****       size_type
4384:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
4385:/usr/include/c++/5/bits/basic_string.h **** 
4386:/usr/include/c++/5/bits/basic_string.h ****       /**
4387:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
4388:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4389:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4390:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4391:/usr/include/c++/5/bits/basic_string.h ****        *
4392:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4393:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4394:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4395:/usr/include/c++/5/bits/basic_string.h ****       */
4396:/usr/include/c++/5/bits/basic_string.h ****       size_type
4397:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
4398:/usr/include/c++/5/bits/basic_string.h ****       {
4399:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4400:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
4401:/usr/include/c++/5/bits/basic_string.h ****       }
4402:/usr/include/c++/5/bits/basic_string.h **** 
4403:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/ccEjei2f.s 			page 112


4404:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
4405:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4406:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4407:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4408:/usr/include/c++/5/bits/basic_string.h ****        *
4409:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
4410:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
4411:/usr/include/c++/5/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
4412:/usr/include/c++/5/bits/basic_string.h ****        *
4413:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
4414:/usr/include/c++/5/bits/basic_string.h ****       */
4415:/usr/include/c++/5/bits/basic_string.h ****       size_type
4416:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
4417:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__c, __pos); }
4418:/usr/include/c++/5/bits/basic_string.h **** 
4419:/usr/include/c++/5/bits/basic_string.h ****       /**
4420:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
4421:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
4422:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4423:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4424:/usr/include/c++/5/bits/basic_string.h ****        *
4425:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4426:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4427:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4428:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4429:/usr/include/c++/5/bits/basic_string.h ****       */
4430:/usr/include/c++/5/bits/basic_string.h ****       size_type
4431:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
4432:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4433:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
4434:/usr/include/c++/5/bits/basic_string.h **** 
4435:/usr/include/c++/5/bits/basic_string.h ****       /**
4436:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
4437:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4438:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4439:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4440:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4441:/usr/include/c++/5/bits/basic_string.h ****        *
4442:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4443:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4444:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4445:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4446:/usr/include/c++/5/bits/basic_string.h ****       */
4447:/usr/include/c++/5/bits/basic_string.h ****       size_type
4448:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
4449:/usr/include/c++/5/bits/basic_string.h **** 
4450:/usr/include/c++/5/bits/basic_string.h ****       /**
4451:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
4452:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4453:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4454:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4455:/usr/include/c++/5/bits/basic_string.h ****        *
4456:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4457:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4458:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4459:/usr/include/c++/5/bits/basic_string.h ****       */
4460:/usr/include/c++/5/bits/basic_string.h ****       size_type
GAS LISTING /tmp/ccEjei2f.s 			page 113


4461:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
4462:/usr/include/c++/5/bits/basic_string.h ****       {
4463:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4464:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
4465:/usr/include/c++/5/bits/basic_string.h ****       }
4466:/usr/include/c++/5/bits/basic_string.h **** 
4467:/usr/include/c++/5/bits/basic_string.h ****       /**
4468:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
4469:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4470:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4471:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4472:/usr/include/c++/5/bits/basic_string.h ****        *
4473:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4474:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4475:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4476:/usr/include/c++/5/bits/basic_string.h ****        *
4477:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
4478:/usr/include/c++/5/bits/basic_string.h ****       */
4479:/usr/include/c++/5/bits/basic_string.h ****       size_type
4480:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
4481:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
4482:/usr/include/c++/5/bits/basic_string.h **** 
4483:/usr/include/c++/5/bits/basic_string.h ****       /**
4484:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
4485:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4486:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4487:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4488:/usr/include/c++/5/bits/basic_string.h ****        *
4489:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
4490:/usr/include/c++/5/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
4491:/usr/include/c++/5/bits/basic_string.h ****        *  was found.  If not found, returns npos.
4492:/usr/include/c++/5/bits/basic_string.h ****       */
4493:/usr/include/c++/5/bits/basic_string.h ****       size_type
4494:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
4495:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4496:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
4497:/usr/include/c++/5/bits/basic_string.h **** 
4498:/usr/include/c++/5/bits/basic_string.h ****       /**
4499:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
4500:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4501:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4502:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
4503:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4504:/usr/include/c++/5/bits/basic_string.h ****        *
4505:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4506:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
4507:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4508:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4509:/usr/include/c++/5/bits/basic_string.h ****       */
4510:/usr/include/c++/5/bits/basic_string.h ****       size_type
4511:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
4512:/usr/include/c++/5/bits/basic_string.h **** 			size_type __n) const;
4513:/usr/include/c++/5/bits/basic_string.h **** 
4514:/usr/include/c++/5/bits/basic_string.h ****       /**
4515:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
4516:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4517:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
GAS LISTING /tmp/ccEjei2f.s 			page 114


4518:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4519:/usr/include/c++/5/bits/basic_string.h ****        *
4520:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4521:/usr/include/c++/5/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
4522:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4523:/usr/include/c++/5/bits/basic_string.h ****       */
4524:/usr/include/c++/5/bits/basic_string.h ****       size_type
4525:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
4526:/usr/include/c++/5/bits/basic_string.h ****       {
4527:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4528:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
4529:/usr/include/c++/5/bits/basic_string.h ****       }
4530:/usr/include/c++/5/bits/basic_string.h **** 
4531:/usr/include/c++/5/bits/basic_string.h ****       /**
4532:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a different character.
4533:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
4534:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4535:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4536:/usr/include/c++/5/bits/basic_string.h ****        *
4537:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
4538:/usr/include/c++/5/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
4539:/usr/include/c++/5/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
4540:/usr/include/c++/5/bits/basic_string.h ****       */
4541:/usr/include/c++/5/bits/basic_string.h ****       size_type
4542:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
4543:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4544:/usr/include/c++/5/bits/basic_string.h **** 
4545:/usr/include/c++/5/bits/basic_string.h ****       /**
4546:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
4547:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4548:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4549:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4550:/usr/include/c++/5/bits/basic_string.h ****        *
4551:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4552:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
4553:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4554:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4555:/usr/include/c++/5/bits/basic_string.h ****       */
4556:/usr/include/c++/5/bits/basic_string.h ****       size_type
4557:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
4558:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4559:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
4560:/usr/include/c++/5/bits/basic_string.h **** 
4561:/usr/include/c++/5/bits/basic_string.h ****       /**
4562:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
4563:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4564:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4565:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
4566:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4567:/usr/include/c++/5/bits/basic_string.h ****        *
4568:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
4569:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
4570:/usr/include/c++/5/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
4571:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4572:/usr/include/c++/5/bits/basic_string.h ****       */
4573:/usr/include/c++/5/bits/basic_string.h ****       size_type
4574:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
GAS LISTING /tmp/ccEjei2f.s 			page 115


4575:/usr/include/c++/5/bits/basic_string.h **** 		       size_type __n) const;
4576:/usr/include/c++/5/bits/basic_string.h ****       /**
4577:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
4578:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4579:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4580:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4581:/usr/include/c++/5/bits/basic_string.h ****        *
4582:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4583:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
4584:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4585:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4586:/usr/include/c++/5/bits/basic_string.h ****       */
4587:/usr/include/c++/5/bits/basic_string.h ****       size_type
4588:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
4589:/usr/include/c++/5/bits/basic_string.h ****       {
4590:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4591:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
4592:/usr/include/c++/5/bits/basic_string.h ****       }
4593:/usr/include/c++/5/bits/basic_string.h **** 
4594:/usr/include/c++/5/bits/basic_string.h ****       /**
4595:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a different character.
4596:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
4597:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4598:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4599:/usr/include/c++/5/bits/basic_string.h ****        *
4600:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
4601:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
4602:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4603:/usr/include/c++/5/bits/basic_string.h ****       */
4604:/usr/include/c++/5/bits/basic_string.h ****       size_type
4605:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
4606:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4607:/usr/include/c++/5/bits/basic_string.h **** 
4608:/usr/include/c++/5/bits/basic_string.h ****       /**
4609:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Get a substring.
4610:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
4611:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
4612:/usr/include/c++/5/bits/basic_string.h ****        *  @return  The new string.
4613:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4614:/usr/include/c++/5/bits/basic_string.h ****        *
4615:/usr/include/c++/5/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
4616:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
4617:/usr/include/c++/5/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
4618:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
4619:/usr/include/c++/5/bits/basic_string.h ****       */
4620:/usr/include/c++/5/bits/basic_string.h ****       basic_string
4621:/usr/include/c++/5/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
4622:/usr/include/c++/5/bits/basic_string.h ****       { return basic_string(*this,
4623:/usr/include/c++/5/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
4624:/usr/include/c++/5/bits/basic_string.h **** 
4625:/usr/include/c++/5/bits/basic_string.h ****       /**
4626:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a string.
4627:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4628:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4629:/usr/include/c++/5/bits/basic_string.h ****        *
4630:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
4631:/usr/include/c++/5/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
GAS LISTING /tmp/ccEjei2f.s 			page 116


4632:/usr/include/c++/5/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
4633:/usr/include/c++/5/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
4634:/usr/include/c++/5/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
4635:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
4636:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4637:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4638:/usr/include/c++/5/bits/basic_string.h ****       */
4639:/usr/include/c++/5/bits/basic_string.h ****       int
4640:/usr/include/c++/5/bits/basic_string.h ****       compare(const basic_string& __str) const
4641:/usr/include/c++/5/bits/basic_string.h ****       {
4642:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
4643:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __osize = __str.size();
4644:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
4645:/usr/include/c++/5/bits/basic_string.h **** 
4646:/usr/include/c++/5/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
4647:/usr/include/c++/5/bits/basic_string.h **** 	if (!__r)
4648:/usr/include/c++/5/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
4649:/usr/include/c++/5/bits/basic_string.h **** 	return __r;
4650:/usr/include/c++/5/bits/basic_string.h ****       }
4651:/usr/include/c++/5/bits/basic_string.h **** 
4652:/usr/include/c++/5/bits/basic_string.h ****       /**
4653:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a string.
4654:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4655:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
4656:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4657:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4658:/usr/include/c++/5/bits/basic_string.h ****        *
4659:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
4660:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
4661:/usr/include/c++/5/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
4662:/usr/include/c++/5/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
4663:/usr/include/c++/5/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
4664:/usr/include/c++/5/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
4665:/usr/include/c++/5/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
4666:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling
4667:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
4668:/usr/include/c++/5/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
4669:/usr/include/c++/5/bits/basic_string.h ****        *  the shorter one is ordered first.
4670:/usr/include/c++/5/bits/basic_string.h ****       */
4671:/usr/include/c++/5/bits/basic_string.h ****       int
4672:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
4673:/usr/include/c++/5/bits/basic_string.h **** 
4674:/usr/include/c++/5/bits/basic_string.h ****       /**
4675:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
4676:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
4677:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4678:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4679:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
4680:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
4681:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4682:/usr/include/c++/5/bits/basic_string.h ****        *
4683:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4684:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
4685:/usr/include/c++/5/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
4686:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
4687:/usr/include/c++/5/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
4688:/usr/include/c++/5/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
GAS LISTING /tmp/ccEjei2f.s 			page 117


4689:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
4690:/usr/include/c++/5/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
4691:/usr/include/c++/5/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
4692:/usr/include/c++/5/bits/basic_string.h ****        *  calling
4693:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
4694:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4695:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4696:/usr/include/c++/5/bits/basic_string.h ****       */
4697:/usr/include/c++/5/bits/basic_string.h ****       int
4698:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
4699:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
4700:/usr/include/c++/5/bits/basic_string.h **** 
4701:/usr/include/c++/5/bits/basic_string.h ****       /**
4702:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a C string.
4703:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
4704:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4705:/usr/include/c++/5/bits/basic_string.h ****        *
4706:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
4707:/usr/include/c++/5/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
4708:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
4709:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
4710:/usr/include/c++/5/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
4711:/usr/include/c++/5/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
4712:/usr/include/c++/5/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
4713:/usr/include/c++/5/bits/basic_string.h ****        *  ordered first.
4714:/usr/include/c++/5/bits/basic_string.h ****       */
4715:/usr/include/c++/5/bits/basic_string.h ****       int
4716:/usr/include/c++/5/bits/basic_string.h ****       compare(const _CharT* __s) const;
4717:/usr/include/c++/5/bits/basic_string.h **** 
4718:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
4719:/usr/include/c++/5/bits/basic_string.h ****       // 5 String::compare specification questionable
4720:/usr/include/c++/5/bits/basic_string.h ****       /**
4721:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
4722:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4723:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4724:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
4725:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4726:/usr/include/c++/5/bits/basic_string.h ****        *
4727:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4728:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
4729:/usr/include/c++/5/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
4730:/usr/include/c++/5/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
4731:/usr/include/c++/5/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
4732:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
4733:/usr/include/c++/5/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
4734:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two string by calling
4735:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
4736:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4737:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
4738:/usr/include/c++/5/bits/basic_string.h ****       */
4739:/usr/include/c++/5/bits/basic_string.h ****       int
4740:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
4741:/usr/include/c++/5/bits/basic_string.h **** 
4742:/usr/include/c++/5/bits/basic_string.h ****       /**
4743:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
4744:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4745:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
GAS LISTING /tmp/ccEjei2f.s 			page 118


4746:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  character %array to compare against.
4747:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
4748:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4749:/usr/include/c++/5/bits/basic_string.h ****        *
4750:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4751:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
4752:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
4753:/usr/include/c++/5/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
4754:/usr/include/c++/5/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
4755:/usr/include/c++/5/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
4756:/usr/include/c++/5/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
4757:/usr/include/c++/5/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
4758:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two strings by calling
4759:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
4760:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4761:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
4762:/usr/include/c++/5/bits/basic_string.h ****        *
4763:/usr/include/c++/5/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
4764:/usr/include/c++/5/bits/basic_string.h ****        *  no special meaning.
4765:/usr/include/c++/5/bits/basic_string.h ****       */
4766:/usr/include/c++/5/bits/basic_string.h ****       int
4767:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
4768:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2) const;
4769:/usr/include/c++/5/bits/basic_string.h ****   };
4770:/usr/include/c++/5/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
4771:/usr/include/c++/5/bits/basic_string.h **** 
4772:/usr/include/c++/5/bits/basic_string.h ****   // operator+
4773:/usr/include/c++/5/bits/basic_string.h ****   /**
4774:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate two strings.
4775:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4776:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4777:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4778:/usr/include/c++/5/bits/basic_string.h ****    */
4779:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4780:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
4781:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4782:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4783:/usr/include/c++/5/bits/basic_string.h ****     {
4784:/usr/include/c++/5/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
4785:/usr/include/c++/5/bits/basic_string.h ****       __str.append(__rhs);
4786:/usr/include/c++/5/bits/basic_string.h ****       return __str;
4787:/usr/include/c++/5/bits/basic_string.h ****     }
4788:/usr/include/c++/5/bits/basic_string.h **** 
4789:/usr/include/c++/5/bits/basic_string.h ****   /**
4790:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
4791:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4792:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4793:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4794:/usr/include/c++/5/bits/basic_string.h ****    */
4795:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4796:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4797:/usr/include/c++/5/bits/basic_string.h ****     operator+(const _CharT* __lhs,
4798:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
4799:/usr/include/c++/5/bits/basic_string.h **** 
4800:/usr/include/c++/5/bits/basic_string.h ****   /**
4801:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate character and string.
4802:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
GAS LISTING /tmp/ccEjei2f.s 			page 119


4803:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4804:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4805:/usr/include/c++/5/bits/basic_string.h ****    */
4806:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4807:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4808:/usr/include/c++/5/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
4809:/usr/include/c++/5/bits/basic_string.h **** 
4810:/usr/include/c++/5/bits/basic_string.h ****   /**
4811:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
4812:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4813:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4814:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4815:/usr/include/c++/5/bits/basic_string.h ****    */
4816:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4817:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4818:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4819:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __rhs)
4820:/usr/include/c++/5/bits/basic_string.h ****     {
4821:/usr/include/c++/5/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
4822:/usr/include/c++/5/bits/basic_string.h ****       __str.append(__rhs);
4823:/usr/include/c++/5/bits/basic_string.h ****       return __str;
4824:/usr/include/c++/5/bits/basic_string.h ****     }
4825:/usr/include/c++/5/bits/basic_string.h **** 
4826:/usr/include/c++/5/bits/basic_string.h ****   /**
4827:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate string and character.
4828:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4829:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4830:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4831:/usr/include/c++/5/bits/basic_string.h ****    */
4832:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4833:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4834:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
4835:/usr/include/c++/5/bits/basic_string.h ****     {
4836:/usr/include/c++/5/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
4837:/usr/include/c++/5/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
4838:/usr/include/c++/5/bits/basic_string.h ****       __string_type __str(__lhs);
4839:/usr/include/c++/5/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
4840:/usr/include/c++/5/bits/basic_string.h ****       return __str;
4841:/usr/include/c++/5/bits/basic_string.h ****     }
4842:/usr/include/c++/5/bits/basic_string.h **** 
4843:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
4844:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4845:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4846:/usr/include/c++/5/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
4847:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4848:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
4849:/usr/include/c++/5/bits/basic_string.h **** 
4850:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4851:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4852:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4853:/usr/include/c++/5/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
4854:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
4855:/usr/include/c++/5/bits/basic_string.h **** 
4856:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4857:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4858:/usr/include/c++/5/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
4859:/usr/include/c++/5/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
GAS LISTING /tmp/ccEjei2f.s 			page 120


4860:/usr/include/c++/5/bits/basic_string.h ****     {
4861:/usr/include/c++/5/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
4862:/usr/include/c++/5/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
4863:/usr/include/c++/5/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
4864:/usr/include/c++/5/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
4865:/usr/include/c++/5/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
4866:/usr/include/c++/5/bits/basic_string.h ****     }
4867:/usr/include/c++/5/bits/basic_string.h **** 
4868:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4869:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4870:/usr/include/c++/5/bits/basic_string.h ****     operator+(const _CharT* __lhs,
4871:/usr/include/c++/5/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
4872:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
4873:/usr/include/c++/5/bits/basic_string.h **** 
4874:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4875:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4876:/usr/include/c++/5/bits/basic_string.h ****     operator+(_CharT __lhs,
4877:/usr/include/c++/5/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
4878:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
4879:/usr/include/c++/5/bits/basic_string.h **** 
4880:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4881:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4882:/usr/include/c++/5/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
4883:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __rhs)
4884:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
4885:/usr/include/c++/5/bits/basic_string.h **** 
4886:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4887:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4888:/usr/include/c++/5/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
4889:/usr/include/c++/5/bits/basic_string.h **** 	      _CharT __rhs)
4890:/usr/include/c++/5/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
4891:/usr/include/c++/5/bits/basic_string.h **** #endif
4892:/usr/include/c++/5/bits/basic_string.h **** 
4893:/usr/include/c++/5/bits/basic_string.h ****   // operator ==
4894:/usr/include/c++/5/bits/basic_string.h ****   /**
4895:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
4896:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4897:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Second string.
4898:/usr/include/c++/5/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
4899:/usr/include/c++/5/bits/basic_string.h ****    */
4900:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4901:/usr/include/c++/5/bits/basic_string.h ****     inline bool
4902:/usr/include/c++/5/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4903:/usr/include/c++/5/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4904:/usr/include/c++/5/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
4905:/usr/include/c++/5/bits/basic_string.h **** 
4906:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT>
4907:/usr/include/c++/5/bits/basic_string.h ****     inline
4908:/usr/include/c++/5/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
4909:/usr/include/c++/5/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
4910:/usr/include/c++/5/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs)
4911:/usr/include/c++/5/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
4912:/usr/include/c++/5/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
4913:/usr/include/c++/5/bits/basic_string.h **** 						    __lhs.size())); }
4914:/usr/include/c++/5/bits/basic_string.h **** 
4915:/usr/include/c++/5/bits/basic_string.h ****   /**
4916:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
GAS LISTING /tmp/ccEjei2f.s 			page 121


4917:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  C string.
4918:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  String.
4919:/usr/include/c++/5/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
4920:/usr/include/c++/5/bits/basic_string.h ****    */
4921:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4922:/usr/include/c++/5/bits/basic_string.h ****     inline bool
4923:/usr/include/c++/5/bits/basic_string.h ****     operator==(const _CharT* __lhs,
4924:/usr/include/c++/5/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4925:/usr/include/c++/5/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
4926:/usr/include/c++/5/bits/basic_string.h **** 
4927:/usr/include/c++/5/bits/basic_string.h ****   /**
4928:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
4929:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  String.
4930:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  C string.
4931:/usr/include/c++/5/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
4932:/usr/include/c++/5/bits/basic_string.h ****    */
4933:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4934:/usr/include/c++/5/bits/basic_string.h ****     inline bool
4935:/usr/include/c++/5/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 674              		.loc 5 4935 0
 675              		.cfi_startproc
 676 0000 55       		pushq	%rbp
 677              		.cfi_def_cfa_offset 16
 678              		.cfi_offset 6, -16
 679 0001 4889E5   		movq	%rsp, %rbp
 680              		.cfi_def_cfa_register 6
 681 0004 4883EC10 		subq	$16, %rsp
 682 0008 48897DF8 		movq	%rdi, -8(%rbp)
 683 000c 488975F0 		movq	%rsi, -16(%rbp)
4936:/usr/include/c++/5/bits/basic_string.h **** 	       const _CharT* __rhs)
4937:/usr/include/c++/5/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
 684              		.loc 5 4937 0
 685 0010 488B55F0 		movq	-16(%rbp), %rdx
 686 0014 488B45F8 		movq	-8(%rbp), %rax
 687 0018 4889D6   		movq	%rdx, %rsi
 688 001b 4889C7   		movq	%rax, %rdi
 689 001e E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc
 689      00
 690 0023 85C0     		testl	%eax, %eax
 691 0025 0F94C0   		sete	%al
 692 0028 C9       		leave
 693              		.cfi_def_cfa 7, 8
 694 0029 C3       		ret
 695              		.cfi_endproc
 696              	.LFE2054:
 698              		.section	.text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev,"axG",@progb
 699              		.align 2
 700              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev
 702              	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev:
 703              	.LFB2111:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 704              		.loc 4 79 0
 705              		.cfi_startproc
 706 0000 55       		pushq	%rbp
 707              		.cfi_def_cfa_offset 16
 708              		.cfi_offset 6, -16
 709 0001 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/ccEjei2f.s 			page 122


 710              		.cfi_def_cfa_register 6
 711 0004 4883EC10 		subq	$16, %rsp
 712 0008 48897DF8 		movq	%rdi, -8(%rbp)
 713              	.LBB5:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 714              		.loc 4 79 0
 715 000c 488B45F8 		movq	-8(%rbp), %rax
 716 0010 4889C7   		movq	%rax, %rdi
 717 0013 E8000000 		call	_ZNSaIN7Decoder12morse_symbolEED2Ev
 717      00
 718              	.LBE5:
 719 0018 90       		nop
 720 0019 C9       		leave
 721              		.cfi_def_cfa 7, 8
 722 001a C3       		ret
 723              		.cfi_endproc
 724              	.LFE2111:
 726              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD1Ev
 727              		.set	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseIN7
 728              		.section	.text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Ve
 729              		.align 2
 730              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev
 732              	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev:
 733              	.LFB2113:
 159:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 734              		.loc 4 159 0
 735              		.cfi_startproc
 736              		.cfi_personality 0x3,__gxx_personality_v0
 737              		.cfi_lsda 0x3,.LLSDA2113
 738 0000 55       		pushq	%rbp
 739              		.cfi_def_cfa_offset 16
 740              		.cfi_offset 6, -16
 741 0001 4889E5   		movq	%rsp, %rbp
 742              		.cfi_def_cfa_register 6
 743 0004 4883EC10 		subq	$16, %rsp
 744 0008 48897DF8 		movq	%rdi, -8(%rbp)
 745              	.LBB6:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 746              		.loc 4 161 0
 747 000c 488B45F8 		movq	-8(%rbp), %rax
 748 0010 488B4010 		movq	16(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 749              		.loc 4 160 0
 750 0014 4889C2   		movq	%rax, %rdx
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 751              		.loc 4 161 0
 752 0017 488B45F8 		movq	-8(%rbp), %rax
 753 001b 488B00   		movq	(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 754              		.loc 4 160 0
 755 001e 4829C2   		subq	%rax, %rdx
 756 0021 4889D0   		movq	%rdx, %rax
 757 0024 48C1F806 		sarq	$6, %rax
 758 0028 4889C2   		movq	%rax, %rdx
 759 002b 488B45F8 		movq	-8(%rbp), %rax
 760 002f 488B08   		movq	(%rax), %rcx
 761 0032 488B45F8 		movq	-8(%rbp), %rax
GAS LISTING /tmp/ccEjei2f.s 			page 123


 762 0036 4889CE   		movq	%rcx, %rsi
 763 0039 4889C7   		movq	%rax, %rdi
 764 003c E8000000 		call	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m
 764      00
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 765              		.loc 4 161 0
 766 0041 488B45F8 		movq	-8(%rbp), %rax
 767 0045 4889C7   		movq	%rax, %rdi
 768 0048 E8000000 		call	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD1Ev
 768      00
 769              	.LBE6:
 770 004d 90       		nop
 771 004e C9       		leave
 772              		.cfi_def_cfa 7, 8
 773 004f C3       		ret
 774              		.cfi_endproc
 775              	.LFE2113:
 776              		.section	.gcc_except_table
 777              	.LLSDA2113:
 778 0041 FF       		.byte	0xff
 779 0042 FF       		.byte	0xff
 780 0043 01       		.byte	0x1
 781 0044 00       		.uleb128 .LLSDACSE2113-.LLSDACSB2113
 782              	.LLSDACSB2113:
 783              	.LLSDACSE2113:
 784              		.section	.text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Ve
 786              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED1Ev
 787              		.set	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED1Ev,_ZNSt12_Vector_baseIN7Decoder12morse
 788              		.section	.text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@
 789              		.align 2
 790              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv
 792              	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv:
 793              	.LFB2115:
 113:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 794              		.loc 4 113 0
 795              		.cfi_startproc
 796 0000 55       		pushq	%rbp
 797              		.cfi_def_cfa_offset 16
 798              		.cfi_offset 6, -16
 799 0001 4889E5   		movq	%rsp, %rbp
 800              		.cfi_def_cfa_register 6
 801 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/5/bits/stl_vector.h **** 
 802              		.loc 4 114 0
 803 0008 488B45F8 		movq	-8(%rbp), %rax
 804 000c 5D       		popq	%rbp
 805              		.cfi_def_cfa 7, 8
 806 000d C3       		ret
 807              		.cfi_endproc
 808              	.LFE2115:
 810              		.section	.text._ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E,"axG",@progbits,_ZSt8_Des
 811              		.weak	_ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E
 813              	_ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E:
 814              	.LFB2116:
 815              		.file 6 "/usr/include/c++/5/bits/stl_construct.h"
   1:/usr/include/c++/5/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_construct.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 124


   3:/usr/include/c++/5/bits/stl_construct.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_construct.h **** //
   5:/usr/include/c++/5/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_construct.h **** 
  11:/usr/include/c++/5/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_construct.h **** 
  16:/usr/include/c++/5/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_construct.h **** 
  20:/usr/include/c++/5/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_construct.h **** 
  25:/usr/include/c++/5/bits/stl_construct.h **** /*
  26:/usr/include/c++/5/bits/stl_construct.h ****  *
  27:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_construct.h ****  *
  30:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_construct.h ****  *
  38:/usr/include/c++/5/bits/stl_construct.h ****  *
  39:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/5/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_construct.h ****  *
  42:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_construct.h ****  */
  50:/usr/include/c++/5/bits/stl_construct.h **** 
  51:/usr/include/c++/5/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/5/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/5/bits/stl_construct.h ****  */
  55:/usr/include/c++/5/bits/stl_construct.h **** 
  56:/usr/include/c++/5/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/5/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/5/bits/stl_construct.h **** 
  59:/usr/include/c++/5/bits/stl_construct.h **** #include <new>
GAS LISTING /tmp/ccEjei2f.s 			page 125


  60:/usr/include/c++/5/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/5/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/5/bits/stl_construct.h **** 
  63:/usr/include/c++/5/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/5/bits/stl_construct.h **** {
  65:/usr/include/c++/5/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/5/bits/stl_construct.h **** 
  67:/usr/include/c++/5/bits/stl_construct.h ****   /**
  68:/usr/include/c++/5/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/5/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/5/bits/stl_construct.h ****    */
  71:/usr/include/c++/5/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/5/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/5/bits/stl_construct.h **** #else
  77:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/5/bits/stl_construct.h ****     {
  81:/usr/include/c++/5/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/5/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/5/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/5/bits/stl_construct.h ****     }
  85:/usr/include/c++/5/bits/stl_construct.h **** #endif
  86:/usr/include/c++/5/bits/stl_construct.h **** 
  87:/usr/include/c++/5/bits/stl_construct.h ****   /**
  88:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/5/bits/stl_construct.h ****    */
  90:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/5/bits/stl_construct.h **** 
  95:/usr/include/c++/5/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/5/bits/stl_construct.h ****     {
  98:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/5/bits/stl_construct.h ****         static void
 100:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/5/bits/stl_construct.h **** 	{
 102:/usr/include/c++/5/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/5/bits/stl_construct.h **** 	}
 105:/usr/include/c++/5/bits/stl_construct.h ****     };
 106:/usr/include/c++/5/bits/stl_construct.h **** 
 107:/usr/include/c++/5/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/5/bits/stl_construct.h ****     {
 110:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/5/bits/stl_construct.h ****         static void
 112:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/5/bits/stl_construct.h ****     };
 114:/usr/include/c++/5/bits/stl_construct.h **** 
 115:/usr/include/c++/5/bits/stl_construct.h ****   /**
 116:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
GAS LISTING /tmp/ccEjei2f.s 			page 126


 117:/usr/include/c++/5/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/5/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/5/bits/stl_construct.h ****    */
 120:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/5/bits/stl_construct.h ****     {
 124:/usr/include/c++/5/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/5/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/5/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/5/bits/stl_construct.h ****     }
 129:/usr/include/c++/5/bits/stl_construct.h **** 
 130:/usr/include/c++/5/bits/stl_construct.h ****   /**
 131:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/5/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/5/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/5/bits/stl_construct.h ****    */
 135:/usr/include/c++/5/bits/stl_construct.h **** 
 136:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/5/bits/stl_construct.h ****     void
 138:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/5/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/5/bits/stl_construct.h ****     {
 141:/usr/include/c++/5/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/5/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/5/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/5/bits/stl_construct.h ****     }
 145:/usr/include/c++/5/bits/stl_construct.h **** 
 146:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 816              		.loc 6 148 0
 817              		.cfi_startproc
 818 0000 55       		pushq	%rbp
 819              		.cfi_def_cfa_offset 16
 820              		.cfi_offset 6, -16
 821 0001 4889E5   		movq	%rsp, %rbp
 822              		.cfi_def_cfa_register 6
 823 0004 4883EC20 		subq	$32, %rsp
 824 0008 48897DF8 		movq	%rdi, -8(%rbp)
 825 000c 488975F0 		movq	%rsi, -16(%rbp)
 826 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/5/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/5/bits/stl_construct.h ****     {
 151:/usr/include/c++/5/bits/stl_construct.h ****       _Destroy(__first, __last);
 827              		.loc 6 151 0
 828 0014 488B55F0 		movq	-16(%rbp), %rdx
 829 0018 488B45F8 		movq	-8(%rbp), %rax
 830 001c 4889D6   		movq	%rdx, %rsi
 831 001f 4889C7   		movq	%rax, %rdi
 832 0022 E8000000 		call	_ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_
 832      00
 152:/usr/include/c++/5/bits/stl_construct.h ****     }
 833              		.loc 6 152 0
 834 0027 90       		nop
 835 0028 C9       		leave
GAS LISTING /tmp/ccEjei2f.s 			page 127


 836              		.cfi_def_cfa 7, 8
 837 0029 C3       		ret
 838              		.cfi_endproc
 839              	.LFE2116:
 841              		.section	.text._ZNSaIN7Decoder12morse_symbolEED2Ev,"axG",@progbits,_ZNSaIN7Decoder12morse_symbolEE
 842              		.align 2
 843              		.weak	_ZNSaIN7Decoder12morse_symbolEED2Ev
 845              	_ZNSaIN7Decoder12morse_symbolEED2Ev:
 846              	.LFB2156:
 847              		.file 7 "/usr/include/c++/5/bits/allocator.h"
   1:/usr/include/c++/5/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/5/bits/allocator.h **** 
   3:/usr/include/c++/5/bits/allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/allocator.h **** //
   5:/usr/include/c++/5/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/allocator.h **** // any later version.
  10:/usr/include/c++/5/bits/allocator.h **** 
  11:/usr/include/c++/5/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/allocator.h **** 
  16:/usr/include/c++/5/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/allocator.h **** 
  20:/usr/include/c++/5/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/allocator.h **** 
  25:/usr/include/c++/5/bits/allocator.h **** /*
  26:/usr/include/c++/5/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/5/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/5/bits/allocator.h ****  *
  29:/usr/include/c++/5/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/5/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/5/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/5/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/5/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/5/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/5/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/5/bits/allocator.h ****  */
  37:/usr/include/c++/5/bits/allocator.h **** 
  38:/usr/include/c++/5/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/5/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/5/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/5/bits/allocator.h ****  */
  42:/usr/include/c++/5/bits/allocator.h **** 
  43:/usr/include/c++/5/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/5/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/5/bits/allocator.h **** 
  46:/usr/include/c++/5/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/5/bits/allocator.h **** #include <bits/memoryfwd.h>
GAS LISTING /tmp/ccEjei2f.s 			page 128


  48:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/5/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/5/bits/allocator.h **** #endif
  51:/usr/include/c++/5/bits/allocator.h **** 
  52:/usr/include/c++/5/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/5/bits/allocator.h **** {
  54:/usr/include/c++/5/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/5/bits/allocator.h **** 
  56:/usr/include/c++/5/bits/allocator.h ****   /**
  57:/usr/include/c++/5/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/5/bits/allocator.h ****    *  @{
  59:/usr/include/c++/5/bits/allocator.h ****    */
  60:/usr/include/c++/5/bits/allocator.h **** 
  61:/usr/include/c++/5/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/5/bits/allocator.h ****   template<>
  63:/usr/include/c++/5/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/5/bits/allocator.h ****     {
  65:/usr/include/c++/5/bits/allocator.h ****     public:
  66:/usr/include/c++/5/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/5/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/5/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/5/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/5/bits/allocator.h **** 
  72:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/5/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/5/bits/allocator.h **** 
  76:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/5/bits/allocator.h **** #endif
  81:/usr/include/c++/5/bits/allocator.h ****     };
  82:/usr/include/c++/5/bits/allocator.h **** 
  83:/usr/include/c++/5/bits/allocator.h ****   /**
  84:/usr/include/c++/5/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/5/bits/allocator.h ****    *
  86:/usr/include/c++/5/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
  87:/usr/include/c++/5/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/5/bits/allocator.h ****    *
  89:/usr/include/c++/5/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/5/bits/allocator.h ****    */
  91:/usr/include/c++/5/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/5/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/5/bits/allocator.h ****     {
  94:/usr/include/c++/5/bits/allocator.h ****    public:
  95:/usr/include/c++/5/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/5/bits/allocator.h **** 
 103:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/5/bits/allocator.h ****         struct rebind
GAS LISTING /tmp/ccEjei2f.s 			page 129


 105:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/5/bits/allocator.h **** 
 107:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/5/bits/allocator.h **** #endif
 112:/usr/include/c++/5/bits/allocator.h **** 
 113:/usr/include/c++/5/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/5/bits/allocator.h **** 
 115:/usr/include/c++/5/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/5/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/5/bits/allocator.h **** 
 118:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/5/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/5/bits/allocator.h **** 
 121:/usr/include/c++/5/bits/allocator.h ****       ~allocator() throw() { }
 848              		.loc 7 121 0
 849              		.cfi_startproc
 850 0000 55       		pushq	%rbp
 851              		.cfi_def_cfa_offset 16
 852              		.cfi_offset 6, -16
 853 0001 4889E5   		movq	%rsp, %rbp
 854              		.cfi_def_cfa_register 6
 855 0004 4883EC10 		subq	$16, %rsp
 856 0008 48897DF8 		movq	%rdi, -8(%rbp)
 857              	.LBB7:
 858              		.loc 7 121 0
 859 000c 488B45F8 		movq	-8(%rbp), %rax
 860 0010 4889C7   		movq	%rax, %rdi
 861 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev
 861      00
 862              	.LBE7:
 863 0018 90       		nop
 864 0019 C9       		leave
 865              		.cfi_def_cfa 7, 8
 866 001a C3       		ret
 867              		.cfi_endproc
 868              	.LFE2156:
 870              		.weak	_ZNSaIN7Decoder12morse_symbolEED1Ev
 871              		.set	_ZNSaIN7Decoder12morse_symbolEED1Ev,_ZNSaIN7Decoder12morse_symbolEED2Ev
 872              		.section	.text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m,"axG",@pr
 873              		.align 2
 874              		.weak	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m
 876              	_ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m:
 877              	.LFB2158:
 174:/usr/include/c++/5/bits/stl_vector.h ****       {
 878              		.loc 4 174 0
 879              		.cfi_startproc
 880 0000 55       		pushq	%rbp
 881              		.cfi_def_cfa_offset 16
 882              		.cfi_offset 6, -16
 883 0001 4889E5   		movq	%rsp, %rbp
 884              		.cfi_def_cfa_register 6
 885 0004 4883EC20 		subq	$32, %rsp
 886 0008 48897DF8 		movq	%rdi, -8(%rbp)
 887 000c 488975F0 		movq	%rsi, -16(%rbp)
GAS LISTING /tmp/ccEjei2f.s 			page 130


 888 0010 488955E8 		movq	%rdx, -24(%rbp)
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 889              		.loc 4 177 0
 890 0014 48837DF0 		cmpq	$0, -16(%rbp)
 890      00
 891 0019 7417     		je	.L50
 178:/usr/include/c++/5/bits/stl_vector.h ****       }
 892              		.loc 4 178 0
 893 001b 488B45F8 		movq	-8(%rbp), %rax
 894 001f 488B55E8 		movq	-24(%rbp), %rdx
 895 0023 488B4DF0 		movq	-16(%rbp), %rcx
 896 0027 4889CE   		movq	%rcx, %rsi
 897 002a 4889C7   		movq	%rax, %rdi
 898 002d E8000000 		call	_ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m
 898      00
 899              	.L50:
 179:/usr/include/c++/5/bits/stl_vector.h **** 
 900              		.loc 4 179 0
 901 0032 90       		nop
 902 0033 C9       		leave
 903              		.cfi_def_cfa 7, 8
 904 0034 C3       		ret
 905              		.cfi_endproc
 906              	.LFE2158:
 908              		.section	.text._ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_,"axG",@progbits,_ZSt8_DestroyIPN7Dec
 909              		.weak	_ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_
 911              	_ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_:
 912              	.LFB2159:
 122:/usr/include/c++/5/bits/stl_construct.h ****     {
 913              		.loc 6 122 0
 914              		.cfi_startproc
 915 0000 55       		pushq	%rbp
 916              		.cfi_def_cfa_offset 16
 917              		.cfi_offset 6, -16
 918 0001 4889E5   		movq	%rsp, %rbp
 919              		.cfi_def_cfa_register 6
 920 0004 4883EC10 		subq	$16, %rsp
 921 0008 48897DF8 		movq	%rdi, -8(%rbp)
 922 000c 488975F0 		movq	%rsi, -16(%rbp)
 126:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 923              		.loc 6 126 0
 924 0010 488B55F0 		movq	-16(%rbp), %rdx
 925 0014 488B45F8 		movq	-8(%rbp), %rax
 926 0018 4889D6   		movq	%rdx, %rsi
 927 001b 4889C7   		movq	%rax, %rdi
 928 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_
 928      00
 128:/usr/include/c++/5/bits/stl_construct.h **** 
 929              		.loc 6 128 0
 930 0023 90       		nop
 931 0024 C9       		leave
 932              		.cfi_def_cfa 7, 8
 933 0025 C3       		ret
 934              		.cfi_endproc
 935              	.LFE2159:
 937              		.section	.text._ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev,"axG",@progbits,_ZN9__gn
 938              		.align 2
GAS LISTING /tmp/ccEjei2f.s 			page 131


 939              		.weak	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev
 941              	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev:
 942              	.LFB2185:
 943              		.file 8 "/usr/include/c++/5/ext/new_allocator.h"
   1:/usr/include/c++/5/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/5/ext/new_allocator.h **** 
   3:/usr/include/c++/5/ext/new_allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/ext/new_allocator.h **** //
   5:/usr/include/c++/5/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/5/ext/new_allocator.h **** 
  11:/usr/include/c++/5/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/ext/new_allocator.h **** 
  16:/usr/include/c++/5/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/ext/new_allocator.h **** 
  20:/usr/include/c++/5/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/ext/new_allocator.h **** 
  25:/usr/include/c++/5/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/5/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/5/ext/new_allocator.h ****  */
  28:/usr/include/c++/5/ext/new_allocator.h **** 
  29:/usr/include/c++/5/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/5/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/5/ext/new_allocator.h **** 
  32:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/5/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/5/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/5/ext/new_allocator.h **** #endif
  39:/usr/include/c++/5/ext/new_allocator.h **** 
  40:/usr/include/c++/5/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/5/ext/new_allocator.h **** {
  42:/usr/include/c++/5/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/5/ext/new_allocator.h **** 
  44:/usr/include/c++/5/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/5/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/5/ext/new_allocator.h **** 
  47:/usr/include/c++/5/ext/new_allocator.h ****   /**
  48:/usr/include/c++/5/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/5/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/5/ext/new_allocator.h ****    *
  51:/usr/include/c++/5/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/5/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/5/ext/new_allocator.h ****    *    - all deallocation calls operator delete
GAS LISTING /tmp/ccEjei2f.s 			page 132


  54:/usr/include/c++/5/ext/new_allocator.h ****    *
  55:/usr/include/c++/5/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/5/ext/new_allocator.h ****    */
  57:/usr/include/c++/5/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/5/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/5/ext/new_allocator.h ****     {
  60:/usr/include/c++/5/ext/new_allocator.h ****     public:
  61:/usr/include/c++/5/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/5/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/5/ext/new_allocator.h **** 
  69:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/5/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/5/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/5/ext/new_allocator.h **** 
  73:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/5/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/5/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/5/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/5/ext/new_allocator.h **** #endif
  78:/usr/include/c++/5/ext/new_allocator.h **** 
  79:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/5/ext/new_allocator.h **** 
  81:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/5/ext/new_allocator.h **** 
  83:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/5/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/5/ext/new_allocator.h **** 
  86:/usr/include/c++/5/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 944              		.loc 8 86 0
 945              		.cfi_startproc
 946 0000 55       		pushq	%rbp
 947              		.cfi_def_cfa_offset 16
 948              		.cfi_offset 6, -16
 949 0001 4889E5   		movq	%rsp, %rbp
 950              		.cfi_def_cfa_register 6
 951 0004 48897DF8 		movq	%rdi, -8(%rbp)
 952              		.loc 8 86 0
 953 0008 90       		nop
 954 0009 5D       		popq	%rbp
 955              		.cfi_def_cfa 7, 8
 956 000a C3       		ret
 957              		.cfi_endproc
 958              	.LFE2185:
 960              		.weak	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED1Ev
 961              		.set	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED1Ev,_ZN9__gnu_cxx13new_allocatorIN7Dec
 962              		.section	.text._ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m,"axG",@
 963              		.weak	_ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m
 965              	_ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m:
 966              	.LFB2187:
 967              		.file 9 "/usr/include/c++/5/bits/alloc_traits.h"
   1:/usr/include/c++/5/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/5/bits/alloc_traits.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 133


   3:/usr/include/c++/5/bits/alloc_traits.h **** // Copyright (C) 2011-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/alloc_traits.h **** //
   5:/usr/include/c++/5/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/5/bits/alloc_traits.h **** 
  11:/usr/include/c++/5/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/alloc_traits.h **** 
  16:/usr/include/c++/5/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/alloc_traits.h **** 
  20:/usr/include/c++/5/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/alloc_traits.h **** 
  25:/usr/include/c++/5/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/5/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/5/bits/alloc_traits.h ****  */
  29:/usr/include/c++/5/bits/alloc_traits.h **** 
  30:/usr/include/c++/5/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/5/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/5/bits/alloc_traits.h **** 
  33:/usr/include/c++/5/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/5/bits/alloc_traits.h **** 
  35:/usr/include/c++/5/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/usr/include/c++/5/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/c++/5/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/c++/5/bits/alloc_traits.h **** 
  39:/usr/include/c++/5/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/5/bits/alloc_traits.h **** {
  41:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/5/bits/alloc_traits.h **** 
  43:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  44:/usr/include/c++/5/bits/alloc_traits.h ****     class __alloctr_rebind_helper
  45:/usr/include/c++/5/bits/alloc_traits.h ****     {
  46:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp2>
  47:/usr/include/c++/5/bits/alloc_traits.h **** 	static constexpr true_type
  48:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_chk(typename _Alloc2::template rebind<_Tp2>::other*);
  49:/usr/include/c++/5/bits/alloc_traits.h **** 
  50:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename, typename>
  51:/usr/include/c++/5/bits/alloc_traits.h **** 	static constexpr false_type
  52:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_chk(...);
  53:/usr/include/c++/5/bits/alloc_traits.h **** 
  54:/usr/include/c++/5/bits/alloc_traits.h ****     public:
  55:/usr/include/c++/5/bits/alloc_traits.h ****       using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
  56:/usr/include/c++/5/bits/alloc_traits.h ****     };
  57:/usr/include/c++/5/bits/alloc_traits.h **** 
  58:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
  59:/usr/include/c++/5/bits/alloc_traits.h **** 	   bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
GAS LISTING /tmp/ccEjei2f.s 			page 134


  60:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind;
  61:/usr/include/c++/5/bits/alloc_traits.h **** 
  62:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  63:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind<_Alloc, _Tp, true>
  64:/usr/include/c++/5/bits/alloc_traits.h ****     {
  65:/usr/include/c++/5/bits/alloc_traits.h ****       typedef typename _Alloc::template rebind<_Tp>::other __type;
  66:/usr/include/c++/5/bits/alloc_traits.h ****     };
  67:/usr/include/c++/5/bits/alloc_traits.h **** 
  68:/usr/include/c++/5/bits/alloc_traits.h ****   template<template<typename, typename...> class _Alloc, typename _Tp,
  69:/usr/include/c++/5/bits/alloc_traits.h **** 	   typename _Up, typename... _Args>
  70:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
  71:/usr/include/c++/5/bits/alloc_traits.h ****     {
  72:/usr/include/c++/5/bits/alloc_traits.h ****       typedef _Alloc<_Tp, _Args...> __type;
  73:/usr/include/c++/5/bits/alloc_traits.h ****     };
  74:/usr/include/c++/5/bits/alloc_traits.h **** 
  75:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  76:/usr/include/c++/5/bits/alloc_traits.h ****     using __alloc_rebind = typename __alloctr_rebind<_Alloc, _Tp>::__type;
  77:/usr/include/c++/5/bits/alloc_traits.h **** 
  78:/usr/include/c++/5/bits/alloc_traits.h ****   /**
  79:/usr/include/c++/5/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/c++/5/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/c++/5/bits/alloc_traits.h ****   */
  82:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/c++/5/bits/alloc_traits.h ****     struct allocator_traits
  84:/usr/include/c++/5/bits/alloc_traits.h ****     {
  85:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/c++/5/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/c++/5/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/c++/5/bits/alloc_traits.h **** 
  90:/usr/include/c++/5/bits/alloc_traits.h **** #define _GLIBCXX_ALLOC_TR_NESTED_TYPE(_NTYPE, _ALT) \
  91:/usr/include/c++/5/bits/alloc_traits.h ****   private: \
  92:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Tp> \
  93:/usr/include/c++/5/bits/alloc_traits.h ****     static typename _Tp::_NTYPE _S_##_NTYPE##_helper(_Tp*); \
  94:/usr/include/c++/5/bits/alloc_traits.h ****   static _ALT _S_##_NTYPE##_helper(...); \
  95:/usr/include/c++/5/bits/alloc_traits.h ****     typedef decltype(_S_##_NTYPE##_helper((_Alloc*)0)) __##_NTYPE; \
  96:/usr/include/c++/5/bits/alloc_traits.h ****   public:
  97:/usr/include/c++/5/bits/alloc_traits.h **** 
  98:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(pointer, value_type*)
  99:/usr/include/c++/5/bits/alloc_traits.h **** 
 100:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 101:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
 102:/usr/include/c++/5/bits/alloc_traits.h ****        *
 103:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 104:/usr/include/c++/5/bits/alloc_traits.h ****       */
 105:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __pointer pointer;
 106:/usr/include/c++/5/bits/alloc_traits.h **** 
 107:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_pointer,
 108:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<const value_type>)
 109:/usr/include/c++/5/bits/alloc_traits.h **** 
 110:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 111:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 112:/usr/include/c++/5/bits/alloc_traits.h ****        *
 113:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 114:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 115:/usr/include/c++/5/bits/alloc_traits.h ****       */
 116:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __const_pointer const_pointer;
GAS LISTING /tmp/ccEjei2f.s 			page 135


 117:/usr/include/c++/5/bits/alloc_traits.h **** 
 118:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(void_pointer,
 119:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<void>)
 120:/usr/include/c++/5/bits/alloc_traits.h **** 
 121:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 122:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 123:/usr/include/c++/5/bits/alloc_traits.h ****        *
 124:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 125:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 126:/usr/include/c++/5/bits/alloc_traits.h ****       */
 127:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __void_pointer void_pointer;
 128:/usr/include/c++/5/bits/alloc_traits.h **** 
 129:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_void_pointer,
 130:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<const void>)
 131:/usr/include/c++/5/bits/alloc_traits.h **** 
 132:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 133:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 134:/usr/include/c++/5/bits/alloc_traits.h ****        *
 135:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 136:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 137:/usr/include/c++/5/bits/alloc_traits.h ****       */
 138:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __const_void_pointer const_void_pointer;
 139:/usr/include/c++/5/bits/alloc_traits.h **** 
 140:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(difference_type,
 141:/usr/include/c++/5/bits/alloc_traits.h **** 			      typename pointer_traits<pointer>::difference_type)
 142:/usr/include/c++/5/bits/alloc_traits.h **** 
 143:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 144:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 145:/usr/include/c++/5/bits/alloc_traits.h ****        *
 146:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 147:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 148:/usr/include/c++/5/bits/alloc_traits.h ****       */
 149:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __difference_type difference_type;
 150:/usr/include/c++/5/bits/alloc_traits.h **** 
 151:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(size_type,
 152:/usr/include/c++/5/bits/alloc_traits.h **** 			      typename make_unsigned<difference_type>::type)
 153:/usr/include/c++/5/bits/alloc_traits.h **** 
 154:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 155:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's size type
 156:/usr/include/c++/5/bits/alloc_traits.h ****        *
 157:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 158:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 159:/usr/include/c++/5/bits/alloc_traits.h ****       */
 160:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __size_type size_type;
 161:/usr/include/c++/5/bits/alloc_traits.h **** 
 162:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_copy_assignment,
 163:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 164:/usr/include/c++/5/bits/alloc_traits.h **** 
 165:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 166:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 167:/usr/include/c++/5/bits/alloc_traits.h ****        *
 168:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 169:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 170:/usr/include/c++/5/bits/alloc_traits.h ****       */
 171:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_copy_assignment
 172:/usr/include/c++/5/bits/alloc_traits.h **** 	propagate_on_container_copy_assignment;
 173:/usr/include/c++/5/bits/alloc_traits.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 136


 174:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_move_assignment,
 175:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 176:/usr/include/c++/5/bits/alloc_traits.h **** 
 177:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 178:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 179:/usr/include/c++/5/bits/alloc_traits.h ****        *
 180:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 181:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 182:/usr/include/c++/5/bits/alloc_traits.h ****       */
 183:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_move_assignment
 184:/usr/include/c++/5/bits/alloc_traits.h **** 	propagate_on_container_move_assignment;
 185:/usr/include/c++/5/bits/alloc_traits.h **** 
 186:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,
 187:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 188:/usr/include/c++/5/bits/alloc_traits.h **** 
 189:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 190:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 191:/usr/include/c++/5/bits/alloc_traits.h ****        *
 192:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 193:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 194:/usr/include/c++/5/bits/alloc_traits.h ****       */
 195:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_swap propagate_on_container_swap;
 196:/usr/include/c++/5/bits/alloc_traits.h **** 
 197:/usr/include/c++/5/bits/alloc_traits.h **** #undef _GLIBCXX_ALLOC_TR_NESTED_TYPE
 198:/usr/include/c++/5/bits/alloc_traits.h **** 
 199:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 200:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
 201:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 202:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 203:/usr/include/c++/5/bits/alloc_traits.h **** 
 204:/usr/include/c++/5/bits/alloc_traits.h ****     private:
 205:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 206:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __allocate_helper
 207:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 208:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3,
 209:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc3*>()->allocate(
 210:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<size_type>(),
 211:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<const_void_pointer>()))>
 212:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 213:/usr/include/c++/5/bits/alloc_traits.h **** 
 214:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 215:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 216:/usr/include/c++/5/bits/alloc_traits.h **** 
 217:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 218:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 219:/usr/include/c++/5/bits/alloc_traits.h **** 
 220:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_allocate = typename __allocate_helper<_Alloc2>::type;
 222:/usr/include/c++/5/bits/alloc_traits.h **** 
 223:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 224:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_allocate<_Alloc2>>>
 225:/usr/include/c++/5/bits/alloc_traits.h **** 	static pointer
 226:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 227:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 228:/usr/include/c++/5/bits/alloc_traits.h **** 
 229:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2, typename _UnusedHint,
 230:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_allocate<_Alloc2>>>>
GAS LISTING /tmp/ccEjei2f.s 			page 137


 231:/usr/include/c++/5/bits/alloc_traits.h **** 	static pointer
 232:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 233:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 234:/usr/include/c++/5/bits/alloc_traits.h **** 
 235:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 236:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __construct_helper
 237:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 238:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 239:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 240:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 241:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 242:/usr/include/c++/5/bits/alloc_traits.h **** 
 243:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 244:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 245:/usr/include/c++/5/bits/alloc_traits.h **** 
 246:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 247:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 248:/usr/include/c++/5/bits/alloc_traits.h **** 
 249:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_construct
 251:/usr/include/c++/5/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 252:/usr/include/c++/5/bits/alloc_traits.h **** 
 253:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 255:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 256:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 257:/usr/include/c++/5/bits/alloc_traits.h **** 
 258:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 259:/usr/include/c++/5/bits/alloc_traits.h **** 	static
 260:/usr/include/c++/5/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 261:/usr/include/c++/5/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 262:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 263:/usr/include/c++/5/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 264:/usr/include/c++/5/bits/alloc_traits.h **** 
 265:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 266:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __destroy_helper
 267:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 268:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 269:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->destroy(
 270:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<_Tp*>()))>
 271:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 272:/usr/include/c++/5/bits/alloc_traits.h **** 
 273:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 274:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 275:/usr/include/c++/5/bits/alloc_traits.h **** 
 276:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 277:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 278:/usr/include/c++/5/bits/alloc_traits.h **** 
 279:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 280:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_destroy = typename __destroy_helper<_Tp>::type;
 281:/usr/include/c++/5/bits/alloc_traits.h **** 
 282:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 283:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__has_destroy<_Tp>>
 284:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_destroy(_Alloc& __a, _Tp* __p)
 285:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 286:/usr/include/c++/5/bits/alloc_traits.h **** 
 287:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
GAS LISTING /tmp/ccEjei2f.s 			page 138


 288:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__not_<__has_destroy<_Tp>>>
 289:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_destroy(_Alloc&, _Tp* __p)
 290:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 291:/usr/include/c++/5/bits/alloc_traits.h **** 
 292:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __maxsize_helper
 294:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 295:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3,
 296:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc3*>()->max_size())>
 297:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 298:/usr/include/c++/5/bits/alloc_traits.h **** 
 299:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 300:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 301:/usr/include/c++/5/bits/alloc_traits.h **** 
 302:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc2>(0));
 303:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 304:/usr/include/c++/5/bits/alloc_traits.h **** 
 305:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 306:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_max_size = typename __maxsize_helper<_Alloc2>::type;
 307:/usr/include/c++/5/bits/alloc_traits.h **** 
 308:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 309:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_max_size<_Alloc2>>>
 310:/usr/include/c++/5/bits/alloc_traits.h **** 	static size_type
 311:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 312:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 313:/usr/include/c++/5/bits/alloc_traits.h **** 
 314:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 315:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 316:/usr/include/c++/5/bits/alloc_traits.h **** 	static size_type
 317:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 318:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __gnu_cxx::__numeric_traits<size_type>::__max; }
 319:/usr/include/c++/5/bits/alloc_traits.h **** 
 320:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 321:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __select_helper
 322:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 323:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3, typename
 324:/usr/include/c++/5/bits/alloc_traits.h **** 	    = decltype(std::declval<_Alloc3*>()
 325:/usr/include/c++/5/bits/alloc_traits.h **** 		->select_on_container_copy_construction())>
 326:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 327:/usr/include/c++/5/bits/alloc_traits.h **** 
 328:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 329:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 330:/usr/include/c++/5/bits/alloc_traits.h **** 
 331:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc2>(0));
 332:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 333:/usr/include/c++/5/bits/alloc_traits.h **** 
 334:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 335:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_soccc = typename __select_helper<_Alloc2>::type;
 336:/usr/include/c++/5/bits/alloc_traits.h **** 
 337:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 338:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_soccc<_Alloc2>>>
 339:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Alloc2
 340:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 341:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 342:/usr/include/c++/5/bits/alloc_traits.h **** 
 343:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 344:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_soccc<_Alloc2>>>>
GAS LISTING /tmp/ccEjei2f.s 			page 139


 345:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Alloc2
 346:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 347:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a; }
 348:/usr/include/c++/5/bits/alloc_traits.h **** 
 349:/usr/include/c++/5/bits/alloc_traits.h ****     public:
 350:/usr/include/c++/5/bits/alloc_traits.h **** 
 351:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 352:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 353:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 354:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 355:/usr/include/c++/5/bits/alloc_traits.h ****        *
 356:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 357:/usr/include/c++/5/bits/alloc_traits.h ****       */
 358:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 359:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 360:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 361:/usr/include/c++/5/bits/alloc_traits.h **** 
 362:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 363:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 364:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 366:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 367:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 368:/usr/include/c++/5/bits/alloc_traits.h ****        *          of type @c value_type
 369:/usr/include/c++/5/bits/alloc_traits.h ****        *
 370:/usr/include/c++/5/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 371:/usr/include/c++/5/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 372:/usr/include/c++/5/bits/alloc_traits.h ****       */
 373:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 374:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 375:/usr/include/c++/5/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint); }
 376:/usr/include/c++/5/bits/alloc_traits.h **** 
 377:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 378:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 379:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 380:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 381:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 382:/usr/include/c++/5/bits/alloc_traits.h ****        *
 383:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 384:/usr/include/c++/5/bits/alloc_traits.h ****       */
 385:/usr/include/c++/5/bits/alloc_traits.h ****       static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 968              		.loc 9 385 0
 969              		.cfi_startproc
 970 0000 55       		pushq	%rbp
 971              		.cfi_def_cfa_offset 16
 972              		.cfi_offset 6, -16
 973 0001 4889E5   		movq	%rsp, %rbp
 974              		.cfi_def_cfa_register 6
 975 0004 4883EC20 		subq	$32, %rsp
 976 0008 48897DF8 		movq	%rdi, -8(%rbp)
 977 000c 488975F0 		movq	%rsi, -16(%rbp)
 978 0010 488955E8 		movq	%rdx, -24(%rbp)
 386:/usr/include/c++/5/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 979              		.loc 9 386 0
 980 0014 488B55E8 		movq	-24(%rbp), %rdx
 981 0018 488B4DF0 		movq	-16(%rbp), %rcx
 982 001c 488B45F8 		movq	-8(%rbp), %rax
GAS LISTING /tmp/ccEjei2f.s 			page 140


 983 0020 4889CE   		movq	%rcx, %rsi
 984 0023 4889C7   		movq	%rax, %rdi
 985 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m
 985      00
 986 002b 90       		nop
 987 002c C9       		leave
 988              		.cfi_def_cfa 7, 8
 989 002d C3       		ret
 990              		.cfi_endproc
 991              	.LFE2187:
 993              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_,"axG",@progbi
 994              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_
 996              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_:
 997              	.LFB2188:
 100:/usr/include/c++/5/bits/stl_construct.h **** 	{
 998              		.loc 6 100 0
 999              		.cfi_startproc
 1000 0000 55       		pushq	%rbp
 1001              		.cfi_def_cfa_offset 16
 1002              		.cfi_offset 6, -16
 1003 0001 4889E5   		movq	%rsp, %rbp
 1004              		.cfi_def_cfa_register 6
 1005 0004 4883EC10 		subq	$16, %rsp
 1006 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1007 000c 488975F0 		movq	%rsi, -16(%rbp)
 1008              	.L56:
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1009              		.loc 6 102 0 discriminator 2
 1010 0010 488B45F8 		movq	-8(%rbp), %rax
 1011 0014 483B45F0 		cmpq	-16(%rbp), %rax
 1012 0018 741B     		je	.L57
 103:/usr/include/c++/5/bits/stl_construct.h **** 	}
 1013              		.loc 6 103 0 discriminator 1
 1014 001a 488B45F8 		movq	-8(%rbp), %rax
 1015 001e 4889C7   		movq	%rax, %rdi
 1016 0021 E8000000 		call	_ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_
 1016      00
 1017 0026 4889C7   		movq	%rax, %rdi
 1018 0029 E8000000 		call	_ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_
 1018      00
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 1019              		.loc 6 102 0 discriminator 1
 1020 002e 488345F8 		addq	$64, -8(%rbp)
 1020      40
 1021 0033 EBDB     		jmp	.L56
 1022              	.L57:
 104:/usr/include/c++/5/bits/stl_construct.h ****     };
 1023              		.loc 6 104 0
 1024 0035 90       		nop
 1025 0036 C9       		leave
 1026              		.cfi_def_cfa 7, 8
 1027 0037 C3       		ret
 1028              		.cfi_endproc
 1029              	.LFE2188:
 1031              		.section	.text._ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m,"axG",@pro
 1032              		.align 2
 1033              		.weak	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m
GAS LISTING /tmp/ccEjei2f.s 			page 141


 1035              	_ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m:
 1036              	.LFB2204:
  87:/usr/include/c++/5/ext/new_allocator.h **** 
  88:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/5/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/5/ext/new_allocator.h **** 
  92:/usr/include/c++/5/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/5/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/5/ext/new_allocator.h **** 
  96:/usr/include/c++/5/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/5/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/5/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/5/ext/new_allocator.h ****       { 
 101:/usr/include/c++/5/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/5/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/5/ext/new_allocator.h **** 
 104:/usr/include/c++/5/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/5/ext/new_allocator.h ****       }
 106:/usr/include/c++/5/ext/new_allocator.h **** 
 107:/usr/include/c++/5/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/5/ext/new_allocator.h ****       void
 109:/usr/include/c++/5/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 1037              		.loc 8 109 0
 1038              		.cfi_startproc
 1039 0000 55       		pushq	%rbp
 1040              		.cfi_def_cfa_offset 16
 1041              		.cfi_offset 6, -16
 1042 0001 4889E5   		movq	%rsp, %rbp
 1043              		.cfi_def_cfa_register 6
 1044 0004 4883EC20 		subq	$32, %rsp
 1045 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1046 000c 488975F0 		movq	%rsi, -16(%rbp)
 1047 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 1048              		.loc 8 110 0
 1049 0014 488B45F0 		movq	-16(%rbp), %rax
 1050 0018 4889C7   		movq	%rax, %rdi
 1051 001b E8000000 		call	_ZdlPv
 1051      00
 1052 0020 90       		nop
 1053 0021 C9       		leave
 1054              		.cfi_def_cfa 7, 8
 1055 0022 C3       		ret
 1056              		.cfi_endproc
 1057              	.LFE2204:
 1059              		.section	.text._ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_,"axG",@progbits,_ZSt11__addresso
 1060              		.weak	_ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_
 1062              	_ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_:
 1063              	.LFB2205:
 1064              		.file 10 "/usr/include/c++/5/bits/move.h"
   1:/usr/include/c++/5/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/5/bits/move.h **** 
   3:/usr/include/c++/5/bits/move.h **** // Copyright (C) 2007-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/move.h **** //
GAS LISTING /tmp/ccEjei2f.s 			page 142


   5:/usr/include/c++/5/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/move.h **** // any later version.
  10:/usr/include/c++/5/bits/move.h **** 
  11:/usr/include/c++/5/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/move.h **** 
  16:/usr/include/c++/5/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/move.h **** 
  20:/usr/include/c++/5/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/move.h **** 
  25:/usr/include/c++/5/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/5/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/5/bits/move.h ****  */
  29:/usr/include/c++/5/bits/move.h **** 
  30:/usr/include/c++/5/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/5/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/5/bits/move.h **** 
  33:/usr/include/c++/5/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/5/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/5/bits/move.h **** 
  36:/usr/include/c++/5/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/5/bits/move.h **** {
  38:/usr/include/c++/5/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/5/bits/move.h **** 
  40:/usr/include/c++/5/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/5/bits/move.h ****   /**
  42:/usr/include/c++/5/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/5/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/5/bits/move.h ****    */
  45:/usr/include/c++/5/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/5/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/5/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 1065              		.loc 10 47 0
 1066              		.cfi_startproc
 1067 0000 55       		pushq	%rbp
 1068              		.cfi_def_cfa_offset 16
 1069              		.cfi_offset 6, -16
 1070 0001 4889E5   		movq	%rsp, %rbp
 1071              		.cfi_def_cfa_register 6
 1072 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/5/bits/move.h ****     {
  49:/usr/include/c++/5/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/5/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 1073              		.loc 10 50 0
 1074 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/5/bits/move.h ****     }
GAS LISTING /tmp/ccEjei2f.s 			page 143


 1075              		.loc 10 51 0
 1076 000c 5D       		popq	%rbp
 1077              		.cfi_def_cfa 7, 8
 1078 000d C3       		ret
 1079              		.cfi_endproc
 1080              	.LFE2205:
 1082              		.section	.text._ZN7Decoder12morse_symbolD2Ev,"axG",@progbits,_ZN7Decoder12morse_symbolD5Ev,comdat
 1083              		.align 2
 1084              		.weak	_ZN7Decoder12morse_symbolD2Ev
 1086              	_ZN7Decoder12morse_symbolD2Ev:
 1087              	.LFB2208:
  14:Decoder/Decoder.h ****     // Structure for keeping one Morse symbol
  15:Decoder/Decoder.h ****     struct morse_symbol {
 1088              		.loc 2 15 0
 1089              		.cfi_startproc
 1090 0000 55       		pushq	%rbp
 1091              		.cfi_def_cfa_offset 16
 1092              		.cfi_offset 6, -16
 1093 0001 4889E5   		movq	%rsp, %rbp
 1094              		.cfi_def_cfa_register 6
 1095 0004 4883EC10 		subq	$16, %rsp
 1096 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1097              	.LBB8:
 1098              		.loc 2 15 0
 1099 000c 488B45F8 		movq	-8(%rbp), %rax
 1100 0010 4883C020 		addq	$32, %rax
 1101 0014 4889C7   		movq	%rax, %rdi
 1102 0017 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 1102      00
 1103 001c 488B45F8 		movq	-8(%rbp), %rax
 1104 0020 4889C7   		movq	%rax, %rdi
 1105 0023 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 1105      00
 1106              	.LBE8:
 1107 0028 90       		nop
 1108 0029 C9       		leave
 1109              		.cfi_def_cfa 7, 8
 1110 002a C3       		ret
 1111              		.cfi_endproc
 1112              	.LFE2208:
 1114              		.weak	_ZN7Decoder12morse_symbolD1Ev
 1115              		.set	_ZN7Decoder12morse_symbolD1Ev,_ZN7Decoder12morse_symbolD2Ev
 1116              		.section	.text._ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_,"axG",@progbits,_ZSt8_DestroyIN7Decoder
 1117              		.weak	_ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_
 1119              	_ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_:
 1120              	.LFB2206:
  92:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 1121              		.loc 6 92 0
 1122              		.cfi_startproc
 1123 0000 55       		pushq	%rbp
 1124              		.cfi_def_cfa_offset 16
 1125              		.cfi_offset 6, -16
 1126 0001 4889E5   		movq	%rsp, %rbp
 1127              		.cfi_def_cfa_register 6
 1128 0004 4883EC10 		subq	$16, %rsp
 1129 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/5/bits/stl_construct.h **** 
GAS LISTING /tmp/ccEjei2f.s 			page 144


 1130              		.loc 6 93 0
 1131 000c 488B45F8 		movq	-8(%rbp), %rax
 1132 0010 4889C7   		movq	%rax, %rdi
 1133 0013 E8000000 		call	_ZN7Decoder12morse_symbolD1Ev
 1133      00
 1134 0018 90       		nop
 1135 0019 C9       		leave
 1136              		.cfi_def_cfa 7, 8
 1137 001a C3       		ret
 1138              		.cfi_endproc
 1139              	.LFE2206:
 1141              		.text
 1143              	_Z41__static_initialization_and_destruction_0ii:
 1144              	.LFB2234:
 1145              		.loc 3 29 0
 1146              		.cfi_startproc
 1147 0314 55       		pushq	%rbp
 1148              		.cfi_def_cfa_offset 16
 1149              		.cfi_offset 6, -16
 1150 0315 4889E5   		movq	%rsp, %rbp
 1151              		.cfi_def_cfa_register 6
 1152 0318 4883EC10 		subq	$16, %rsp
 1153 031c 897DFC   		movl	%edi, -4(%rbp)
 1154 031f 8975F8   		movl	%esi, -8(%rbp)
 1155              		.loc 3 29 0
 1156 0322 837DFC01 		cmpl	$1, -4(%rbp)
 1157 0326 7527     		jne	.L65
 1158              		.loc 3 29 0 is_stmt 0 discriminator 1
 1159 0328 817DF8FF 		cmpl	$65535, -8(%rbp)
 1159      FF0000
 1160 032f 751E     		jne	.L65
 1161              		.file 11 "/usr/include/c++/5/iostream"
   1:/usr/include/c++/5/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/5/iostream **** 
   3:/usr/include/c++/5/iostream **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/iostream **** //
   5:/usr/include/c++/5/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/iostream **** // any later version.
  10:/usr/include/c++/5/iostream **** 
  11:/usr/include/c++/5/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/5/iostream **** 
  16:/usr/include/c++/5/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/iostream **** 
  20:/usr/include/c++/5/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/iostream **** 
  25:/usr/include/c++/5/iostream **** /** @file include/iostream
GAS LISTING /tmp/ccEjei2f.s 			page 145


  26:/usr/include/c++/5/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/5/iostream ****  */
  28:/usr/include/c++/5/iostream **** 
  29:/usr/include/c++/5/iostream **** //
  30:/usr/include/c++/5/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/5/iostream **** //
  32:/usr/include/c++/5/iostream **** 
  33:/usr/include/c++/5/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/5/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/5/iostream **** 
  36:/usr/include/c++/5/iostream **** #pragma GCC system_header
  37:/usr/include/c++/5/iostream **** 
  38:/usr/include/c++/5/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/5/iostream **** #include <ostream>
  40:/usr/include/c++/5/iostream **** #include <istream>
  41:/usr/include/c++/5/iostream **** 
  42:/usr/include/c++/5/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/5/iostream **** {
  44:/usr/include/c++/5/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/5/iostream **** 
  46:/usr/include/c++/5/iostream ****   /**
  47:/usr/include/c++/5/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/5/iostream ****    *
  49:/usr/include/c++/5/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/5/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/5/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/5/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/5/iostream ****    *
  54:/usr/include/c++/5/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/5/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/5/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/5/iostream ****    *  manual linked to above.
  58:/usr/include/c++/5/iostream ****   */
  59:/usr/include/c++/5/iostream ****   //@{
  60:/usr/include/c++/5/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/5/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/5/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/5/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/5/iostream **** 
  65:/usr/include/c++/5/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/5/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/5/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/5/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/5/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/5/iostream **** #endif
  71:/usr/include/c++/5/iostream ****   //@}
  72:/usr/include/c++/5/iostream **** 
  73:/usr/include/c++/5/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/5/iostream ****   static ios_base::Init __ioinit;
 1162              		.loc 11 74 0 is_stmt 1
 1163 0331 BF000000 		movl	$_ZStL8__ioinit, %edi
 1163      00
 1164 0336 E8000000 		call	_ZNSt8ios_base4InitC1Ev
 1164      00
 1165 033b BA000000 		movl	$__dso_handle, %edx
 1165      00
 1166 0340 BE000000 		movl	$_ZStL8__ioinit, %esi
GAS LISTING /tmp/ccEjei2f.s 			page 146


 1166      00
 1167 0345 BF000000 		movl	$_ZNSt8ios_base4InitD1Ev, %edi
 1167      00
 1168 034a E8000000 		call	__cxa_atexit
 1168      00
 1169              	.L65:
 1170              		.loc 3 29 0
 1171 034f 90       		nop
 1172 0350 C9       		leave
 1173              		.cfi_def_cfa 7, 8
 1174 0351 C3       		ret
 1175              		.cfi_endproc
 1176              	.LFE2234:
 1179              	_GLOBAL__sub_I_main:
 1180              	.LFB2235:
 1181              		.loc 3 29 0
 1182              		.cfi_startproc
 1183 0352 55       		pushq	%rbp
 1184              		.cfi_def_cfa_offset 16
 1185              		.cfi_offset 6, -16
 1186 0353 4889E5   		movq	%rsp, %rbp
 1187              		.cfi_def_cfa_register 6
 1188              		.loc 3 29 0
 1189 0356 BEFFFF00 		movl	$65535, %esi
 1189      00
 1190 035b BF010000 		movl	$1, %edi
 1190      00
 1191 0360 E8AFFFFF 		call	_Z41__static_initialization_and_destruction_0ii
 1191      FF
 1192 0365 5D       		popq	%rbp
 1193              		.cfi_def_cfa 7, 8
 1194 0366 C3       		ret
 1195              		.cfi_endproc
 1196              	.LFE2235:
 1198              		.section	.init_array,"aw"
 1199              		.align 8
 1200 0000 00000000 		.quad	_GLOBAL__sub_I_main
 1200      00000000 
 1201              		.section	.rodata
 1202 0091 00000000 		.align 8
 1202      000000
 1203              	.LC4:
 1204 0098 00000000 		.long	0
 1205 009c 65CDCD41 		.long	1104006501
 1206              		.text
 1207              	.Letext0:
 1208              		.file 12 "/usr/include/c++/5/bits/stringfwd.h"
 1209              		.file 13 "/usr/include/c++/5/cwchar"
 1210              		.file 14 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h"
 1211              		.file 15 "/usr/include/c++/5/bits/exception_ptr.h"
 1212              		.file 16 "/usr/include/c++/5/type_traits"
 1213              		.file 17 "/usr/include/c++/5/bits/char_traits.h"
 1214              		.file 18 "/usr/include/c++/5/cstdint"
 1215              		.file 19 "/usr/include/c++/5/clocale"
 1216              		.file 20 "/usr/include/c++/5/cstdlib"
 1217              		.file 21 "/usr/include/c++/5/cstdio"
 1218              		.file 22 "/usr/include/c++/5/bits/ptr_traits.h"
GAS LISTING /tmp/ccEjei2f.s 			page 147


 1219              		.file 23 "/usr/include/c++/5/initializer_list"
 1220              		.file 24 "/usr/include/c++/5/system_error"
 1221              		.file 25 "/usr/include/c++/5/bits/ios_base.h"
 1222              		.file 26 "/usr/include/c++/5/cwctype"
 1223              		.file 27 "/usr/include/c++/5/bits/vector.tcc"
 1224              		.file 28 "/usr/include/c++/5/ctime"
 1225              		.file 29 "<built-in>"
 1226              		.file 30 "/usr/include/c++/5/ratio"
 1227              		.file 31 "/usr/include/c++/5/bits/stl_iterator_base_types.h"
 1228              		.file 32 "/usr/include/c++/5/iosfwd"
 1229              		.file 33 "/usr/include/c++/5/debug/debug.h"
 1230              		.file 34 "/usr/include/c++/5/bits/predefined_ops.h"
 1231              		.file 35 "/usr/include/c++/5/ext/numeric_traits.h"
 1232              		.file 36 "/usr/include/c++/5/ext/alloc_traits.h"
 1233              		.file 37 "/usr/include/c++/5/bits/stl_iterator.h"
 1234              		.file 38 "/usr/include/stdio.h"
 1235              		.file 39 "/usr/include/libio.h"
 1236              		.file 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 1237              		.file 41 "/usr/include/wchar.h"
 1238              		.file 42 "/usr/include/time.h"
 1239              		.file 43 "/usr/include/stdint.h"
 1240              		.file 44 "/usr/include/locale.h"
 1241              		.file 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1242              		.file 46 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h"
 1243              		.file 47 "/usr/include/stdlib.h"
 1244              		.file 48 "/usr/include/_G_config.h"
 1245              		.file 49 "/usr/include/wctype.h"
 1246              		.file 50 "/usr/include/c++/5/bits/stl_pair.h"
GAS LISTING /tmp/ccEjei2f.s 			page 148


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccEjei2f.s:7      .rodata:0000000000000000 _ZStL19piecewise_construct
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccEjei2f.s:15     .text._ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_:0000000000000000 _ZNSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEC1IlvEERKT_
     /tmp/ccEjei2f.s:45     .text._ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv:0000000000000000 _ZNKSt6chrono8durationIlSt5ratioILl1ELl1000000000EEE5countEv
     /tmp/ccEjei2f.s:68     .text._ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv:0000000000000000 _ZNKSt6chrono10time_pointINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEEE16time_since_epochEv
     /tmp/ccEjei2f.s:91     .text._ZN7DecoderD2Ev:0000000000000000 _ZN7DecoderD2Ev
     /tmp/ccEjei2f.s:617    .text._ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED1Ev
     /tmp/ccEjei2f.s:91     .text._ZN7DecoderD2Ev:0000000000000000 _ZN7DecoderD1Ev
     /tmp/ccEjei2f.s:121    .text._ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_:0000000000000000 _ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_
     /tmp/ccEjei2f.s:121    .text._ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIJNS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_:0000000000000000 _ZNSt6chronomiIlSt5ratioILl1ELl1000000000EElS2_EENSt11common_typeIINS_8durationIT_T0_EENS4_IT1_T2_EEEE4typeERKS7_RKSA_
     /tmp/ccEjei2f.s:181    .text._ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE:0000000000000000 _ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE
     /tmp/ccEjei2f.s:181    .text._ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIJT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE:0000000000000000 _ZNSt6chronomiINS_3_V212system_clockENS_8durationIlSt5ratioILl1ELl1000000000EEEES6_EENSt11common_typeIIT0_T1_EE4typeERKNS_10time_pointIT_S8_EERKNSC_ISD_S9_EE
     /tmp/ccEjei2f.s:227    .text._ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EElLb1ELb1EE6__castIlS3_EES4_RKNS1_IT_T0_EE:0000000000000000 _ZNSt6chrono20__duration_cast_implINS_8durationIlSt5ratioILl1ELl1000000000EEEES2_ILl1ELl1EElLb1ELb1EE6__castIlS3_EES4_RKNS1_IT_T0_EE
     /tmp/ccEjei2f.s:268    .text._ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE:0000000000000000 _ZNSt6chrono13duration_castINS_8durationIlSt5ratioILl1ELl1000000000EEEElS3_EENSt9enable_ifIXsrNS_13__is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE
     /tmp/ccEjei2f.s:307    .text:0000000000000000 main
     /tmp/ccEjei2f.s:671    .text._ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_:0000000000000000 _ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_
     /tmp/ccEjei2f.s:617    .text._ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED2Ev
     /tmp/ccEjei2f.s:792    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccEjei2f.s:813    .text._ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN7Decoder12morse_symbolES1_EvT_S3_RSaIT0_E
     /tmp/ccEjei2f.s:732    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev
     /tmp/ccEjei2f.s:702    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev
     /tmp/ccEjei2f.s:845    .text._ZNSaIN7Decoder12morse_symbolEED2Ev:0000000000000000 _ZNSaIN7Decoder12morse_symbolEED2Ev
     /tmp/ccEjei2f.s:702    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD1Ev
     /tmp/ccEjei2f.s:876    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccEjei2f.s:732    .text._ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED1Ev
     /tmp/ccEjei2f.s:911    .text._ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN7Decoder12morse_symbolEEvT_S3_
     /tmp/ccEjei2f.s:941    .text._ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev
     /tmp/ccEjei2f.s:845    .text._ZNSaIN7Decoder12morse_symbolEED2Ev:0000000000000000 _ZNSaIN7Decoder12morse_symbolEED1Ev
     /tmp/ccEjei2f.s:965    .text._ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m:0000000000000000 _ZNSt16allocator_traitsISaIN7Decoder12morse_symbolEEE10deallocateERS2_PS1_m
     /tmp/ccEjei2f.s:996    .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN7Decoder12morse_symbolEEEvT_S5_
     /tmp/ccEjei2f.s:941    .text._ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED1Ev
     /tmp/ccEjei2f.s:1035   .text._ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEE10deallocateEPS2_m
     /tmp/ccEjei2f.s:1062   .text._ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_:0000000000000000 _ZSt11__addressofIN7Decoder12morse_symbolEEPT_RS2_
     /tmp/ccEjei2f.s:1119   .text._ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_:0000000000000000 _ZSt8_DestroyIN7Decoder12morse_symbolEEvPT_
     /tmp/ccEjei2f.s:1086   .text._ZN7Decoder12morse_symbolD2Ev:0000000000000000 _ZN7Decoder12morse_symbolD2Ev
     /tmp/ccEjei2f.s:1086   .text._ZN7Decoder12morse_symbolD2Ev:0000000000000000 _ZN7Decoder12morse_symbolD1Ev
     /tmp/ccEjei2f.s:1143   .text:0000000000000314 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccEjei2f.s:1179   .text:0000000000000352 _GLOBAL__sub_I_main
                           .group:0000000000000000 _ZN7DecoderD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN7Decoder12morse_symbolESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN7Decoder12morse_symbolESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSaIN7Decoder12morse_symbolEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN7Decoder12morse_symbolEED5Ev
                           .group:0000000000000000 _ZN7Decoder12morse_symbolD5Ev

UNDEFINED SYMBOLS
__stack_chk_fail
__gxx_personality_v0
_ZN7DecoderC1Ev
_ZNSt6chrono3_V212system_clock3nowEv
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSaIcED1Ev
_ZN7Decoder7codeBigENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbi
GAS LISTING /tmp/ccEjei2f.s 			page 149


_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZSt4cout
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEd
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
_ZNSolsEPFRSoS_E
_Unwind_Resume
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc
_ZdlPv
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
